
d:/WindyCity_IOT/Labs/Lab7/target/3.0.0/argon/Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005f50  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9f70  000d9f70  00009f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d9f78  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e4f4  000d9f7c  0001e4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000294  2003e560  2003e560  0002e560  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d9fe4  000d9fe4  00029fe4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000da00c  000da00c  0002a00c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00224002  00000000  00000000  0002a010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001fa40  00000000  00000000  0024e012  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00045805  00000000  00000000  0026da52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003510  00000000  00000000  002b3257  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000ab68  00000000  00000000  002b6767  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004448c  00000000  00000000  002c12cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00053e63  00000000  00000000  0030575b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012fe51  00000000  00000000  003595be  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009e04  00000000  00000000  00489410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fcab 	bl	d898c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fcb3 	bl	d89a8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4f4 	.word	0x2003e4f4
   d404c:	000d9f7c 	.word	0x000d9f7c
   d4050:	2003e55c 	.word	0x2003e55c
   d4054:	2003e560 	.word	0x2003e560
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fe69 	bl	d6d38 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9f4c 	.word	0x000d9f4c
   d4080:	000d9f70 	.word	0x000d9f70

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bc10 	b.w	d48a8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd29 	bl	d4ae0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 be13 	b.w	d6cbc <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 ba33 	b.w	d6500 <malloc>

000d409a <_Znaj>:
   d409a:	f002 ba31 	b.w	d6500 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 ba37 	b.w	d6510 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 f97c 	bl	d63a8 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d60a9 	.word	0x000d60a9

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN10BlynkParam3addEPKc.part.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ca:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40cc:	4608      	mov	r0, r1
   d40ce:	9101      	str	r1, [sp, #4]
   d40d0:	f004 fca8 	bl	d8a24 <strlen>
    if (len + l > buff_size)
   d40d4:	6863      	ldr	r3, [r4, #4]
   d40d6:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40d8:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40da:	18e8      	adds	r0, r5, r3
   d40dc:	4290      	cmp	r0, r2
   d40de:	d808      	bhi.n	d40f2 <_ZN10BlynkParam3addEPKc.part.0+0x2a>
    memcpy(buff+len, b, l);
   d40e0:	6820      	ldr	r0, [r4, #0]
   d40e2:	9901      	ldr	r1, [sp, #4]
   d40e4:	462a      	mov	r2, r5
   d40e6:	4418      	add	r0, r3
   d40e8:	f004 fc50 	bl	d898c <memcpy>
    len += l;
   d40ec:	6860      	ldr	r0, [r4, #4]
   d40ee:	4428      	add	r0, r5
   d40f0:	6060      	str	r0, [r4, #4]
}
   d40f2:	b003      	add	sp, #12
   d40f4:	bd30      	pop	{r4, r5, pc}
	...

000d40f8 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d40f8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40fa:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40fc:	4b0a      	ldr	r3, [pc, #40]	; (d4128 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d40fe:	6003      	str	r3, [r0, #0]
   d4100:	4605      	mov	r5, r0
   d4102:	b17c      	cbz	r4, d4124 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4104:	6863      	ldr	r3, [r4, #4]
   d4106:	3b01      	subs	r3, #1
   d4108:	6063      	str	r3, [r4, #4]
   d410a:	b95b      	cbnz	r3, d4124 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	4620      	mov	r0, r4
   d4110:	689b      	ldr	r3, [r3, #8]
   d4112:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4114:	68a3      	ldr	r3, [r4, #8]
   d4116:	3b01      	subs	r3, #1
   d4118:	60a3      	str	r3, [r4, #8]
   d411a:	b91b      	cbnz	r3, d4124 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d411c:	6823      	ldr	r3, [r4, #0]
   d411e:	4620      	mov	r0, r4
   d4120:	68db      	ldr	r3, [r3, #12]
   d4122:	4798      	blx	r3
   d4124:	4628      	mov	r0, r5
   d4126:	bd38      	pop	{r3, r4, r5, pc}
   d4128:	000d9c98 	.word	0x000d9c98

000d412c <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d412c:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d412e:	f001 ffc3 	bl	d60b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4132:	4b03      	ldr	r3, [pc, #12]	; (d4140 <_ZN10CloudClass7processEv+0x14>)
   d4134:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d4136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d413a:	f002 b9d1 	b.w	d64e0 <spark_process>
   d413e:	bf00      	nop
   d4140:	2003e7d8 	.word	0x2003e7d8

000d4144 <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4144:	6803      	ldr	r3, [r0, #0]
   d4146:	b12b      	cbz	r3, d4154 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d4148:	6842      	ldr	r2, [r0, #4]
   d414a:	4293      	cmp	r3, r2
   d414c:	d202      	bcs.n	d4154 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d414e:	4618      	mov	r0, r3
   d4150:	f004 bc06 	b.w	d8960 <atoi>
   d4154:	2000      	movs	r0, #0
   d4156:	4770      	bx	lr

000d4158 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d4158:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d415a:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d415c:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d415e:	b145      	cbz	r5, d4172 <_ZN10BlynkParam8iteratorppEv+0x1a>
   d4160:	6843      	ldr	r3, [r0, #4]
   d4162:	429d      	cmp	r5, r3
   d4164:	d205      	bcs.n	d4172 <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d4166:	4628      	mov	r0, r5
   d4168:	f004 fc5c 	bl	d8a24 <strlen>
   d416c:	3001      	adds	r0, #1
   d416e:	4405      	add	r5, r0
   d4170:	6025      	str	r5, [r4, #0]
        }
   d4172:	4620      	mov	r0, r4
   d4174:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4178 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4178:	b538      	push	{r3, r4, r5, lr}
   d417a:	4604      	mov	r4, r0
   d417c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d417e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d4182:	6825      	ldr	r5, [r4, #0]
   d4184:	4a04      	ldr	r2, [pc, #16]	; (d4198 <_ZN10BlynkParam3addEi+0x20>)
   d4186:	1a09      	subs	r1, r1, r0
   d4188:	4428      	add	r0, r5
   d418a:	f002 f9d1 	bl	d6530 <snprintf>
   d418e:	6863      	ldr	r3, [r4, #4]
   d4190:	3001      	adds	r0, #1
   d4192:	4403      	add	r3, r0
   d4194:	6063      	str	r3, [r4, #4]
    }
   d4196:	bd38      	pop	{r3, r4, r5, pc}
   d4198:	000d8b78 	.word	0x000d8b78

000d419c <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d419c:	b538      	push	{r3, r4, r5, lr}
   d419e:	4604      	mov	r4, r0
   d41a0:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d41a2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d41a6:	6825      	ldr	r5, [r4, #0]
   d41a8:	4a04      	ldr	r2, [pc, #16]	; (d41bc <_ZN10BlynkParam3addEl+0x20>)
   d41aa:	1a09      	subs	r1, r1, r0
   d41ac:	4428      	add	r0, r5
   d41ae:	f002 f9bf 	bl	d6530 <snprintf>
   d41b2:	6863      	ldr	r3, [r4, #4]
   d41b4:	3001      	adds	r0, #1
   d41b6:	4403      	add	r3, r0
   d41b8:	6063      	str	r3, [r4, #4]
    }
   d41ba:	bd38      	pop	{r3, r4, r5, pc}
   d41bc:	000d8b7b 	.word	0x000d8b7b

000d41c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d41c0:	b508      	push	{r3, lr}
        state = CONNECTING;
   d41c2:	2300      	movs	r3, #0
   d41c4:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d41c6:	6800      	ldr	r0, [r0, #0]
   d41c8:	f003 f9dc 	bl	d7584 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d41cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d41d0:	f000 bd66 	b.w	d4ca0 <BlynkNoOpCbk>

000d41d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d41d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d41d8:	eb01 0902 	add.w	r9, r1, r2
   d41dc:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d41de:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d41e0:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d41e4:	4680      	mov	r8, r0
   d41e6:	460d      	mov	r5, r1
   d41e8:	4616      	mov	r6, r2
    if (it >= param.end())
   d41ea:	f080 8092 	bcs.w	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d41ee:	a805      	add	r0, sp, #20
   d41f0:	880f      	ldrh	r7, [r1, #0]
   d41f2:	f7ff ffb1 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
   d41f6:	6803      	ldr	r3, [r0, #0]
   d41f8:	4599      	cmp	r9, r3
   d41fa:	f240 808a 	bls.w	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d41fe:	a805      	add	r0, sp, #20
   d4200:	f7ff ffa0 	bl	d4144 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d4204:	f247 2376 	movw	r3, #29302	; 0x7276
   d4208:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d420a:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d420c:	f000 80a9 	beq.w	d4362 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d4210:	d827      	bhi.n	d4262 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d4212:	f247 2361 	movw	r3, #29281	; 0x7261
   d4216:	429f      	cmp	r7, r3
   d4218:	d07e      	beq.n	d4318 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d421a:	f247 2364 	movw	r3, #29284	; 0x7264
   d421e:	429f      	cmp	r7, r3
   d4220:	d042      	beq.n	d42a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d4222:	f646 5370 	movw	r3, #28016	; 0x6d70
   d4226:	429f      	cmp	r7, r3
   d4228:	d128      	bne.n	d427c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d422a:	4e63      	ldr	r6, [pc, #396]	; (d43b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d422c:	4f63      	ldr	r7, [pc, #396]	; (d43bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d422e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d43d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d4232:	9b05      	ldr	r3, [sp, #20]
   d4234:	4599      	cmp	r9, r3
   d4236:	d96c      	bls.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4238:	a805      	add	r0, sp, #20
   d423a:	f7ff ff83 	bl	d4144 <_ZNK10BlynkParam8iterator5asIntEv>
   d423e:	b2c4      	uxtb	r4, r0
            ++it;
   d4240:	a805      	add	r0, sp, #20
   d4242:	f7ff ff89 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d4246:	9d05      	ldr	r5, [sp, #20]
   d4248:	4631      	mov	r1, r6
   d424a:	4628      	mov	r0, r5
   d424c:	f004 fbd8 	bl	d8a00 <strcmp>
   d4250:	4601      	mov	r1, r0
   d4252:	b9e0      	cbnz	r0, d428e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d4254:	4620      	mov	r0, r4
   d4256:	f003 fb9d 	bl	d7994 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d425a:	a805      	add	r0, sp, #20
   d425c:	f7ff ff7c 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d4260:	e7e7      	b.n	d4232 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d4262:	f247 7364 	movw	r3, #30564	; 0x7764
   d4266:	429f      	cmp	r7, r3
   d4268:	d03f      	beq.n	d42ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d426a:	f247 7376 	movw	r3, #30582	; 0x7776
   d426e:	429f      	cmp	r7, r3
   d4270:	f000 8087 	beq.w	d4382 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d4274:	f247 7361 	movw	r3, #30561	; 0x7761
   d4278:	429f      	cmp	r7, r3
   d427a:	d05f      	beq.n	d433c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d427c:	2300      	movs	r3, #0
   d427e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4282:	2202      	movs	r2, #2
   d4284:	9200      	str	r2, [sp, #0]
   d4286:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d428a:	4619      	mov	r1, r3
   d428c:	e029      	b.n	d42e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d428e:	4639      	mov	r1, r7
   d4290:	4628      	mov	r0, r5
   d4292:	f004 fbb5 	bl	d8a00 <strcmp>
   d4296:	b128      	cbz	r0, d42a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d4298:	4641      	mov	r1, r8
   d429a:	4628      	mov	r0, r5
   d429c:	f004 fbb0 	bl	d8a00 <strcmp>
   d42a0:	2800      	cmp	r0, #0
   d42a2:	d1da      	bne.n	d425a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d42a4:	2101      	movs	r1, #1
   d42a6:	e7d5      	b.n	d4254 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d42a8:	ab0a      	add	r3, sp, #40	; 0x28
   d42aa:	4945      	ldr	r1, [pc, #276]	; (d43c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d42ac:	9307      	str	r3, [sp, #28]
   d42ae:	a807      	add	r0, sp, #28
   d42b0:	2310      	movs	r3, #16
   d42b2:	2500      	movs	r5, #0
   d42b4:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d42b8:	f7ff ff06 	bl	d40c8 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d42bc:	a807      	add	r0, sp, #28
   d42be:	4621      	mov	r1, r4
   d42c0:	f7ff ff5a 	bl	d4178 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d42c4:	4620      	mov	r0, r4
   d42c6:	f003 fb8f 	bl	d79e8 <digitalRead>
        rsp.add(analogRead(pin));
   d42ca:	4601      	mov	r1, r0
   d42cc:	a807      	add	r0, sp, #28
   d42ce:	f7ff ff65 	bl	d419c <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d42d2:	9b08      	ldr	r3, [sp, #32]
   d42d4:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d42d8:	3b01      	subs	r3, #1
   d42da:	9300      	str	r3, [sp, #0]
   d42dc:	9b07      	ldr	r3, [sp, #28]
   d42de:	462a      	mov	r2, r5
   d42e0:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d42e2:	4640      	mov	r0, r8
   d42e4:	f000 fb18 	bl	d4918 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d42e8:	e013      	b.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d42ea:	a805      	add	r0, sp, #20
   d42ec:	f7ff ff34 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
   d42f0:	6803      	ldr	r3, [r0, #0]
   d42f2:	4599      	cmp	r9, r3
   d42f4:	d90d      	bls.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d42f6:	b2a4      	uxth	r4, r4
   d42f8:	2101      	movs	r1, #1
   d42fa:	4620      	mov	r0, r4
   d42fc:	f003 fb4a 	bl	d7994 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4300:	a805      	add	r0, sp, #20
   d4302:	f7ff ff1f 	bl	d4144 <_ZNK10BlynkParam8iterator5asIntEv>
   d4306:	1e01      	subs	r1, r0, #0
   d4308:	bf18      	it	ne
   d430a:	2101      	movne	r1, #1
   d430c:	4620      	mov	r0, r4
   d430e:	f003 fb52 	bl	d79b6 <digitalWrite>
    }
}
   d4312:	b00f      	add	sp, #60	; 0x3c
   d4314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4318:	ab0a      	add	r3, sp, #40	; 0x28
   d431a:	9307      	str	r3, [sp, #28]
   d431c:	a807      	add	r0, sp, #28
   d431e:	2310      	movs	r3, #16
   d4320:	4928      	ldr	r1, [pc, #160]	; (d43c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d4322:	2500      	movs	r5, #0
   d4324:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4328:	f7ff fece 	bl	d40c8 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d432c:	a807      	add	r0, sp, #28
   d432e:	4621      	mov	r1, r4
   d4330:	f7ff ff22 	bl	d4178 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d4334:	4620      	mov	r0, r4
   d4336:	f003 fb6a 	bl	d7a0e <analogRead>
   d433a:	e7c6      	b.n	d42ca <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d433c:	a805      	add	r0, sp, #20
   d433e:	f7ff ff0b 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
   d4342:	6803      	ldr	r3, [r0, #0]
   d4344:	4599      	cmp	r9, r3
   d4346:	d9e4      	bls.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d4348:	b2a4      	uxth	r4, r4
   d434a:	2101      	movs	r1, #1
   d434c:	4620      	mov	r0, r4
   d434e:	f003 fb21 	bl	d7994 <pinMode>
        analogWrite(pin, it.asInt());
   d4352:	a805      	add	r0, sp, #20
   d4354:	f7ff fef6 	bl	d4144 <_ZNK10BlynkParam8iterator5asIntEv>
   d4358:	4601      	mov	r1, r0
   d435a:	4620      	mov	r0, r4
   d435c:	f003 fb6e 	bl	d7a3c <_Z11analogWritetm>
    } break;
   d4360:	e7d7      	b.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d4362:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d4364:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d4368:	f000 fc9c 	bl	d4ca4 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d436c:	4603      	mov	r3, r0
            handler(req);
   d436e:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4370:	b123      	cbz	r3, d437c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d4372:	4a15      	ldr	r2, [pc, #84]	; (d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d4374:	4293      	cmp	r3, r2
   d4376:	d001      	beq.n	d437c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d4378:	4798      	blx	r3
   d437a:	e7ca      	b.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   d437c:	f000 fc8e 	bl	d4c9c <BlynkWidgetRead>
        }
    }
   d4380:	e7c7      	b.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d4382:	a805      	add	r0, sp, #20
   d4384:	f7ff fee8 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d4388:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d438a:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d438e:	1b5d      	subs	r5, r3, r5
   d4390:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d4392:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d4394:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d4398:	950c      	str	r5, [sp, #48]	; 0x30
   d439a:	f000 fc8d 	bl	d4cb8 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d439e:	4603      	mov	r3, r0
            handler(req, param);
   d43a0:	a90a      	add	r1, sp, #40	; 0x28
   d43a2:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d43a4:	b123      	cbz	r3, d43b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d43a6:	4a09      	ldr	r2, [pc, #36]	; (d43cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d43a8:	4293      	cmp	r3, r2
   d43aa:	d001      	beq.n	d43b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   d43ac:	4798      	blx	r3
   d43ae:	e7b0      	b.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   d43b0:	f000 fc75 	bl	d4c9e <BlynkWidgetWrite>
    } break;
   d43b4:	e7ad      	b.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d43b6:	bf00      	nop
   d43b8:	000d8b7f 	.word	0x000d8b7f
   d43bc:	000d8b82 	.word	0x000d8b82
   d43c0:	000d8b8a 	.word	0x000d8b8a
   d43c4:	000d8b8d 	.word	0x000d8b8d
   d43c8:	000d4c9d 	.word	0x000d4c9d
   d43cc:	000d4c9f 	.word	0x000d4c9f
   d43d0:	000d8b86 	.word	0x000d8b86

000d43d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d43d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d43d8:	b08c      	sub	sp, #48	; 0x30
   d43da:	af04      	add	r7, sp, #16
   d43dc:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d43de:	2205      	movs	r2, #5
   d43e0:	6800      	ldr	r0, [r0, #0]
   d43e2:	1d39      	adds	r1, r7, #4
   d43e4:	f002 fc07 	bl	d6bf6 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d43e8:	b3b8      	cbz	r0, d445a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d43ea:	2805      	cmp	r0, #5
   d43ec:	d004      	beq.n	d43f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d43ee:	2000      	movs	r0, #0
}
   d43f0:	3720      	adds	r7, #32
   d43f2:	46bd      	mov	sp, r7
   d43f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d43f8:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d43fc:	0a13      	lsrs	r3, r2, #8
   d43fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d4402:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d4406:	f8a7 3005 	strh.w	r3, [r7, #5]
   d440a:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d440c:	0a13      	lsrs	r3, r2, #8
   d440e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4412:	fa1f f883 	uxth.w	r8, r3
   d4416:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d441a:	2900      	cmp	r1, #0
   d441c:	d0e7      	beq.n	d43ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d441e:	793b      	ldrb	r3, [r7, #4]
   d4420:	bb23      	cbnz	r3, d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d4422:	f000 fc39 	bl	d4c98 <_Z11BlynkMillisv>
   d4426:	4602      	mov	r2, r0
   d4428:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d442a:	7f60      	ldrb	r0, [r4, #29]
   d442c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4430:	b9c0      	cbnz	r0, d4464 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d4432:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d4436:	2901      	cmp	r1, #1
   d4438:	d114      	bne.n	d4464 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d443a:	2b09      	cmp	r3, #9
   d443c:	d00f      	beq.n	d445e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d443e:	2bc8      	cmp	r3, #200	; 0xc8
   d4440:	d001      	beq.n	d4446 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d4442:	2b04      	cmp	r3, #4
   d4444:	d1d4      	bne.n	d43f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d4446:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d4448:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d444a:	4620      	mov	r0, r4
                state = CONNECTED;
   d444c:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d444e:	f000 fb11 	bl	d4a74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d4452:	f7ff fe6b 	bl	d412c <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d4456:	f000 fc23 	bl	d4ca0 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d445a:	2001      	movs	r0, #1
   d445c:	e7c8      	b.n	d43f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d445e:	2303      	movs	r3, #3
   d4460:	7763      	strb	r3, [r4, #29]
                break;
   d4462:	e7c5      	b.n	d43f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4464:	1f58      	subs	r0, r3, #5
   d4466:	bf18      	it	ne
   d4468:	2001      	movne	r0, #1
   d446a:	e7c1      	b.n	d43f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d446c:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4470:	d903      	bls.n	d447a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d4472:	4620      	mov	r0, r4
   d4474:	f7ff fea4 	bl	d41c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4478:	e7ef      	b.n	d445a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d447a:	f108 0308 	add.w	r3, r8, #8
   d447e:	f023 0307 	bic.w	r3, r3, #7
   d4482:	466e      	mov	r6, sp
   d4484:	ebad 0d03 	sub.w	sp, sp, r3
   d4488:	ad04      	add	r5, sp, #16
   d448a:	6820      	ldr	r0, [r4, #0]
   d448c:	4642      	mov	r2, r8
   d448e:	4629      	mov	r1, r5
   d4490:	f002 fbb1 	bl	d6bf6 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d4494:	4580      	cmp	r8, r0
   d4496:	f04f 0000 	mov.w	r0, #0
   d449a:	d17f      	bne.n	d459c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d449c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d44a0:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d44a2:	f000 fbf9 	bl	d4c98 <_Z11BlynkMillisv>
    switch (hdr.type)
   d44a6:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d44a8:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d44aa:	2b14      	cmp	r3, #20
   d44ac:	f000 80a6 	beq.w	d45fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d44b0:	d848      	bhi.n	d4544 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d44b2:	2b0f      	cmp	r3, #15
   d44b4:	f000 80a2 	beq.w	d45fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d44b8:	d807      	bhi.n	d44ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d44ba:	2b02      	cmp	r3, #2
   d44bc:	d048      	beq.n	d4550 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d44be:	2b06      	cmp	r3, #6
   d44c0:	d051      	beq.n	d4566 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d44c2:	4620      	mov	r0, r4
   d44c4:	f7ff fe7c 	bl	d41c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d44c8:	e058      	b.n	d457c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d44ca:	2b11      	cmp	r3, #17
   d44cc:	d1f9      	bne.n	d44c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d44ce:	2300      	movs	r3, #0
   d44d0:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d44d2:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d44d6:	442b      	add	r3, r5
        if (it >= param.end())
   d44d8:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d44da:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d44de:	d24d      	bcs.n	d457c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d44e0:	f107 000c 	add.w	r0, r7, #12
   d44e4:	f8d5 8000 	ldr.w	r8, [r5]
   d44e8:	f7ff fe36 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d44ec:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d44ee:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d44f2:	1b5d      	subs	r5, r3, r5
   d44f4:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d44f6:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d44fa:	687b      	ldr	r3, [r7, #4]
   d44fc:	61fd      	str	r5, [r7, #28]
   d44fe:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4502:	8363      	strh	r3, [r4, #26]
   d4504:	4b64      	ldr	r3, [pc, #400]	; (d4698 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d4506:	4598      	cmp	r8, r3
   d4508:	f000 80bf 	beq.w	d468a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d450c:	f200 808c 	bhi.w	d4628 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d4510:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d4514:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d4518:	4413      	add	r3, r2
   d451a:	4598      	cmp	r8, r3
   d451c:	f000 809d 	beq.w	d465a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d4520:	d879      	bhi.n	d4616 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d4522:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d4526:	3b06      	subs	r3, #6
   d4528:	4598      	cmp	r8, r3
   d452a:	f000 809c 	beq.w	d4666 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d452e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d4532:	3303      	adds	r3, #3
   d4534:	4598      	cmp	r8, r3
   d4536:	d16b      	bne.n	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d4538:	f107 0114 	add.w	r1, r7, #20
   d453c:	4638      	mov	r0, r7
   d453e:	f000 fbae 	bl	d4c9e <BlynkWidgetWrite>
   d4542:	e065      	b.n	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d4544:	2b29      	cmp	r3, #41	; 0x29
   d4546:	d01b      	beq.n	d4580 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d4548:	2b37      	cmp	r3, #55	; 0x37
   d454a:	d017      	beq.n	d457c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d454c:	2b1d      	cmp	r3, #29
   d454e:	d1b8      	bne.n	d44c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d4550:	7f63      	ldrb	r3, [r4, #29]
   d4552:	b943      	cbnz	r3, d4566 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d4554:	2301      	movs	r3, #1
   d4556:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d4558:	4620      	mov	r0, r4
   d455a:	f000 fa8b 	bl	d4a74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d455e:	f7ff fde5 	bl	d412c <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d4562:	f000 fb9d 	bl	d4ca0 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d4566:	2300      	movs	r3, #0
   d4568:	21c8      	movs	r1, #200	; 0xc8
   d456a:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d456e:	9100      	str	r1, [sp, #0]
   d4570:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4574:	4619      	mov	r1, r3
   d4576:	4620      	mov	r0, r4
   d4578:	f000 f9ce 	bl	d4918 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d457c:	2001      	movs	r0, #1
   d457e:	e00d      	b.n	d459c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d4580:	68a3      	ldr	r3, [r4, #8]
   d4582:	b91b      	cbnz	r3, d458c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d4584:	2040      	movs	r0, #64	; 0x40
   d4586:	f001 ffbb 	bl	d6500 <malloc>
   d458a:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d458c:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4590:	44a8      	add	r8, r5
        if (it >= param.end())
   d4592:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4594:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d4598:	d302      	bcc.n	d45a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d459a:	2000      	movs	r0, #0
   d459c:	46b5      	mov	sp, r6
   d459e:	e727      	b.n	d43f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d45a0:	4629      	mov	r1, r5
   d45a2:	2240      	movs	r2, #64	; 0x40
   d45a4:	68a0      	ldr	r0, [r4, #8]
   d45a6:	f004 fa45 	bl	d8a34 <strncpy>
        redir_serv[63] = '\0';
   d45aa:	68a3      	ldr	r3, [r4, #8]
   d45ac:	2500      	movs	r5, #0
   d45ae:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d45b2:	f107 0014 	add.w	r0, r7, #20
   d45b6:	f7ff fdcf 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
   d45ba:	6803      	ldr	r3, [r0, #0]
   d45bc:	4543      	cmp	r3, r8
   d45be:	d21b      	bcs.n	d45f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d45c0:	6978      	ldr	r0, [r7, #20]
   d45c2:	b120      	cbz	r0, d45ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d45c4:	69bb      	ldr	r3, [r7, #24]
   d45c6:	4298      	cmp	r0, r3
   d45c8:	d214      	bcs.n	d45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d45ca:	f004 f9cd 	bl	d8968 <atol>
            redir_port = it.asLong();
   d45ce:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d45d0:	6820      	ldr	r0, [r4, #0]
   d45d2:	f002 ffd7 	bl	d7584 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d45d6:	6823      	ldr	r3, [r4, #0]
   d45d8:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d45da:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d45dc:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d45de:	2300      	movs	r3, #0
   d45e0:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d45e2:	f000 fb59 	bl	d4c98 <_Z11BlynkMillisv>
   d45e6:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d45ea:	3808      	subs	r0, #8
   d45ec:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d45f0:	6160      	str	r0, [r4, #20]
   d45f2:	e7c3      	b.n	d457c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d45f4:	4628      	mov	r0, r5
   d45f6:	e7ea      	b.n	d45ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d45f8:	2550      	movs	r5, #80	; 0x50
   d45fa:	e7e9      	b.n	d45d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d45fc:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d45fe:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d4602:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4606:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d4608:	4629      	mov	r1, r5
   d460a:	4620      	mov	r0, r4
   d460c:	f7ff fde2 	bl	d41d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d4610:	2300      	movs	r3, #0
   d4612:	8363      	strh	r3, [r4, #26]
   d4614:	e7b2      	b.n	d457c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4616:	4b21      	ldr	r3, [pc, #132]	; (d469c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d4618:	4598      	cmp	r8, r3
   d461a:	d1f9      	bne.n	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d461c:	f107 0114 	add.w	r1, r7, #20
   d4620:	4638      	mov	r0, r7
   d4622:	f000 fb3c 	bl	d4c9e <BlynkWidgetWrite>
   d4626:	e7f3      	b.n	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4628:	4b1d      	ldr	r3, [pc, #116]	; (d46a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d462a:	4598      	cmp	r8, r3
   d462c:	d021      	beq.n	d4672 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d462e:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d4632:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d4636:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d463a:	4598      	cmp	r8, r3
   d463c:	d01f      	beq.n	d467e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d463e:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d4642:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d4646:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d464a:	4598      	cmp	r8, r3
   d464c:	d1e0      	bne.n	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d464e:	f107 0114 	add.w	r1, r7, #20
   d4652:	4638      	mov	r0, r7
   d4654:	f000 fb23 	bl	d4c9e <BlynkWidgetWrite>
   d4658:	e7da      	b.n	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d465a:	f107 0114 	add.w	r1, r7, #20
   d465e:	4638      	mov	r0, r7
   d4660:	f000 fb1d 	bl	d4c9e <BlynkWidgetWrite>
   d4664:	e7d4      	b.n	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d4666:	f107 0114 	add.w	r1, r7, #20
   d466a:	4638      	mov	r0, r7
   d466c:	f000 fb17 	bl	d4c9e <BlynkWidgetWrite>
   d4670:	e7ce      	b.n	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d4672:	f107 0114 	add.w	r1, r7, #20
   d4676:	4638      	mov	r0, r7
   d4678:	f000 fb11 	bl	d4c9e <BlynkWidgetWrite>
   d467c:	e7c8      	b.n	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d467e:	f107 0114 	add.w	r1, r7, #20
   d4682:	4638      	mov	r0, r7
   d4684:	f000 fb0b 	bl	d4c9e <BlynkWidgetWrite>
   d4688:	e7c2      	b.n	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d468a:	f107 0114 	add.w	r1, r7, #20
   d468e:	4638      	mov	r0, r7
   d4690:	f000 fb05 	bl	d4c9e <BlynkWidgetWrite>
   d4694:	e7bc      	b.n	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4696:	bf00      	nop
   d4698:	00736676 	.word	0x00736676
   d469c:	00676264 	.word	0x00676264
   d46a0:	6e6f6361 	.word	0x6e6f6361

000d46a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d46a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d46a8:	4604      	mov	r4, r0
   d46aa:	b08c      	sub	sp, #48	; 0x30
   d46ac:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d46ae:	f7ff fd3d 	bl	d412c <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d46b2:	7f63      	ldrb	r3, [r4, #29]
   d46b4:	2b02      	cmp	r3, #2
   d46b6:	f000 80a8 	beq.w	d480a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d46ba:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d46bc:	8b62      	ldrh	r2, [r4, #26]
   d46be:	3301      	adds	r3, #1
   d46c0:	b2db      	uxtb	r3, r3
   d46c2:	7723      	strb	r3, [r4, #28]
   d46c4:	b10a      	cbz	r2, d46ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d46c6:	2501      	movs	r5, #1
   d46c8:	e016      	b.n	d46f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d46ca:	2b02      	cmp	r3, #2
   d46cc:	d8fb      	bhi.n	d46c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d46ce:	6820      	ldr	r0, [r4, #0]
   d46d0:	f002 fd77 	bl	d71c2 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d46d4:	b1b8      	cbz	r0, d4706 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d46d6:	b925      	cbnz	r5, d46e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d46d8:	6820      	ldr	r0, [r4, #0]
   d46da:	f002 fef9 	bl	d74d0 <_ZN9TCPClient9availableEv>
   d46de:	2800      	cmp	r0, #0
   d46e0:	dd11      	ble.n	d4706 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d46e2:	4620      	mov	r0, r4
   d46e4:	f7ff fe76 	bl	d43d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d46e8:	4605      	mov	r5, r0
   d46ea:	2800      	cmp	r0, #0
   d46ec:	d1f4      	bne.n	d46d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d46ee:	6820      	ldr	r0, [r4, #0]
   d46f0:	f002 ff48 	bl	d7584 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d46f4:	f000 fad4 	bl	d4ca0 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d46f8:	7f23      	ldrb	r3, [r4, #28]
   d46fa:	3b01      	subs	r3, #1
   d46fc:	7723      	strb	r3, [r4, #28]
}
   d46fe:	4628      	mov	r0, r5
   d4700:	b00c      	add	sp, #48	; 0x30
   d4702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d4706:	f000 fac7 	bl	d4c98 <_Z11BlynkMillisv>
   d470a:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d470c:	6820      	ldr	r0, [r4, #0]
   d470e:	f002 fd58 	bl	d71c2 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d4712:	7f67      	ldrb	r7, [r4, #29]
   d4714:	2f01      	cmp	r7, #1
   d4716:	4605      	mov	r5, r0
   d4718:	d129      	bne.n	d476e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d471a:	b920      	cbnz	r0, d4726 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d471c:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d471e:	4620      	mov	r0, r4
   d4720:	f7ff fd4e 	bl	d41c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4724:	e7e8      	b.n	d46f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d4726:	68e3      	ldr	r3, [r4, #12]
   d4728:	f24f 6218 	movw	r2, #63000	; 0xf618
   d472c:	1af3      	subs	r3, r6, r3
   d472e:	4293      	cmp	r3, r2
   d4730:	d904      	bls.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d4732:	4620      	mov	r0, r4
   d4734:	f7ff fd44 	bl	d41c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4738:	2500      	movs	r5, #0
   d473a:	e7dd      	b.n	d46f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d473c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d4740:	4293      	cmp	r3, r2
   d4742:	d803      	bhi.n	d474c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4744:	6923      	ldr	r3, [r4, #16]
   d4746:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4748:	4293      	cmp	r3, r2
   d474a:	d9bc      	bls.n	d46c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d474c:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d474e:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4752:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4754:	4293      	cmp	r3, r2
   d4756:	d9b6      	bls.n	d46c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d4758:	2300      	movs	r3, #0
   d475a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d475e:	9300      	str	r3, [sp, #0]
   d4760:	461a      	mov	r2, r3
   d4762:	2106      	movs	r1, #6
   d4764:	4620      	mov	r0, r4
   d4766:	f000 f8d7 	bl	d4918 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d476a:	6166      	str	r6, [r4, #20]
   d476c:	e7ab      	b.n	d46c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d476e:	2f00      	cmp	r7, #0
   d4770:	d1a9      	bne.n	d46c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d4772:	6962      	ldr	r2, [r4, #20]
   d4774:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d4776:	b140      	cbz	r0, d478a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d4778:	f241 7370 	movw	r3, #6000	; 0x1770
   d477c:	429a      	cmp	r2, r3
   d477e:	d9a2      	bls.n	d46c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d4780:	6820      	ldr	r0, [r4, #0]
   d4782:	f002 feff 	bl	d7584 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4786:	7767      	strb	r7, [r4, #29]
   d4788:	e7d6      	b.n	d4738 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d478a:	f241 3388 	movw	r3, #5000	; 0x1388
   d478e:	429a      	cmp	r2, r3
   d4790:	d999      	bls.n	d46c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d4792:	6820      	ldr	r0, [r4, #0]
   d4794:	f002 fef6 	bl	d7584 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d4798:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d479c:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d47a0:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d47a4:	f1be 0f00 	cmp.w	lr, #0
   d47a8:	d00b      	beq.n	d47c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d47aa:	462b      	mov	r3, r5
   d47ac:	4642      	mov	r2, r8
   d47ae:	4671      	mov	r1, lr
   d47b0:	4660      	mov	r0, ip
   d47b2:	f002 ff45 	bl	d7640 <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d47b6:	1e43      	subs	r3, r0, #1
   d47b8:	425d      	negs	r5, r3
   d47ba:	415d      	adcs	r5, r3
   d47bc:	b98d      	cbnz	r5, d47e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d47be:	6166      	str	r6, [r4, #20]
                return false;
   d47c0:	e79a      	b.n	d46f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d47c2:	4b13      	ldr	r3, [pc, #76]	; (d4810 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d47c4:	9306      	str	r3, [sp, #24]
   d47c6:	f10c 0720 	add.w	r7, ip, #32
   d47ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d47cc:	ad07      	add	r5, sp, #28
   d47ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d47d0:	683b      	ldr	r3, [r7, #0]
   d47d2:	702b      	strb	r3, [r5, #0]
   d47d4:	4642      	mov	r2, r8
   d47d6:	4673      	mov	r3, lr
   d47d8:	a906      	add	r1, sp, #24
   d47da:	4660      	mov	r0, ip
   d47dc:	f002 fdfd 	bl	d73da <_ZN9TCPClient7connectE9IPAddresstm>
   d47e0:	e7e9      	b.n	d47b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d47e2:	6863      	ldr	r3, [r4, #4]
   d47e4:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d47e6:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d47e8:	4618      	mov	r0, r3
            msgIdOut = 1;
   d47ea:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d47ec:	f004 f91a 	bl	d8a24 <strlen>
   d47f0:	2200      	movs	r2, #0
   d47f2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d47f6:	9b05      	ldr	r3, [sp, #20]
   d47f8:	9000      	str	r0, [sp, #0]
   d47fa:	4632      	mov	r2, r6
   d47fc:	211d      	movs	r1, #29
   d47fe:	4620      	mov	r0, r4
   d4800:	f000 f88a 	bl	d4918 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4804:	6923      	ldr	r3, [r4, #16]
   d4806:	6163      	str	r3, [r4, #20]
            return true;
   d4808:	e776      	b.n	d46f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d480a:	2500      	movs	r5, #0
   d480c:	e777      	b.n	d46fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d480e:	bf00      	nop
   d4810:	000d9bc8 	.word	0x000d9bc8

000d4814 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4818:	4615      	mov	r5, r2
   d481a:	b08c      	sub	sp, #48	; 0x30
   d481c:	4604      	mov	r4, r0
   d481e:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4820:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d4824:	460f      	mov	r7, r1
   d4826:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d4828:	f000 fa34 	bl	d4c94 <_Z10BlynkDelaym>
   d482c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d482e:	ae01      	add	r6, sp, #4
   d4830:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4832:	682b      	ldr	r3, [r5, #0]
   d4834:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d4836:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4838:	f000 fa2e 	bl	d4c98 <_Z11BlynkMillisv>
   d483c:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4840:	3808      	subs	r0, #8
   d4842:	af01      	add	r7, sp, #4
   d4844:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4848:	6160      	str	r0, [r4, #20]
   d484a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d484c:	ae07      	add	r6, sp, #28
   d484e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4850:	683b      	ldr	r3, [r7, #0]
   d4852:	7033      	strb	r3, [r6, #0]
   d4854:	af07      	add	r7, sp, #28
   d4856:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d4858:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d485a:	f04f 0c00 	mov.w	ip, #0
   d485e:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d4862:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d4866:	3520      	adds	r5, #32
   d4868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d486a:	6833      	ldr	r3, [r6, #0]
   d486c:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d486e:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d4870:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d4874:	6820      	ldr	r0, [r4, #0]
   d4876:	f002 fe85 	bl	d7584 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d487a:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d487c:	f000 fa0c 	bl	d4c98 <_Z11BlynkMillisv>
   d4880:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d4882:	7f63      	ldrb	r3, [r4, #29]
   d4884:	2b01      	cmp	r3, #1
   d4886:	d00c      	beq.n	d48a2 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d4888:	f000 fa06 	bl	d4c98 <_Z11BlynkMillisv>
   d488c:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d488e:	42b8      	cmp	r0, r7
   d4890:	d804      	bhi.n	d489c <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d4892:	2100      	movs	r1, #0
   d4894:	4620      	mov	r0, r4
   d4896:	f7ff ff05 	bl	d46a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d489a:	e7f2      	b.n	d4882 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d489c:	7f63      	ldrb	r3, [r4, #29]
   d489e:	2b01      	cmp	r3, #1
   d48a0:	d1e8      	bne.n	d4874 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d48a2:	b00c      	add	sp, #48	; 0x30
   d48a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d48a8 <setup>:
// variables
uint16_t reading;
double voltage;
double temperature;

void setup() {
   d48a8:	b530      	push	{r4, r5, lr}
  pinMode(A4, INPUT);
  

  // init display values
  display.setup();
   d48aa:	4c18      	ldr	r4, [pc, #96]	; (d490c <setup+0x64>)
void setup() {
   d48ac:	b089      	sub	sp, #36	; 0x24
  pinMode(A4, INPUT);
   d48ae:	2100      	movs	r1, #0
   d48b0:	200f      	movs	r0, #15
   d48b2:	f003 f86f 	bl	d7994 <pinMode>
  display.setup();
   d48b6:	4620      	mov	r0, r4
   d48b8:	f000 fe72 	bl	d55a0 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d48bc:	4620      	mov	r0, r4
   d48be:	f001 f88d 	bl	d59dc <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d48c2:	2101      	movs	r1, #1
   d48c4:	4620      	mov	r0, r4
   d48c6:	f000 fe1c 	bl	d5502 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d48ca:	2500      	movs	r5, #0
   d48cc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println();
   d48d0:	4620      	mov	r0, r4
   d48d2:	e9c4 5304 	strd	r5, r3, [r4, #16]
   d48d6:	f002 f914 	bl	d6b02 <_ZN5Print7printlnEv>
  display.display();
   d48da:	4620      	mov	r0, r4
   d48dc:	f001 faea 	bl	d5eb4 <_ZN16Adafruit_SSD13067displayEv>
  Blynk.begin("cnjXDn_t7vcs3I-PR-jbSobGd__j2qM9", IPAddress(167, 172, 234, 162), 9090);
   d48e0:	23a2      	movs	r3, #162	; 0xa2
   d48e2:	9300      	str	r3, [sp, #0]
   d48e4:	22ac      	movs	r2, #172	; 0xac
   d48e6:	23ea      	movs	r3, #234	; 0xea
   d48e8:	21a7      	movs	r1, #167	; 0xa7
   d48ea:	a802      	add	r0, sp, #8
   d48ec:	f002 fad4 	bl	d6e98 <_ZN9IPAddressC1Ehhhh>
   d48f0:	f242 3382 	movw	r3, #9090	; 0x2382
   d48f4:	aa02      	add	r2, sp, #8
   d48f6:	4806      	ldr	r0, [pc, #24]	; (d4910 <setup+0x68>)
   d48f8:	4906      	ldr	r1, [pc, #24]	; (d4914 <setup+0x6c>)
   d48fa:	f7ff ff8b 	bl	d4814 <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  Blynk.run();
   d48fe:	4629      	mov	r1, r5
   d4900:	4803      	ldr	r0, [pc, #12]	; (d4910 <setup+0x68>)
   d4902:	f7ff fecf 	bl	d46a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
}
   d4906:	b009      	add	sp, #36	; 0x24
   d4908:	bd30      	pop	{r4, r5, pc}
   d490a:	bf00      	nop
   d490c:	2003e5c0 	.word	0x2003e5c0
   d4910:	2003e564 	.word	0x2003e564
   d4914:	000d8b90 	.word	0x000d8b90

000d4918 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d491c:	b083      	sub	sp, #12
   d491e:	af00      	add	r7, sp, #0
   d4920:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d4922:	6800      	ldr	r0, [r0, #0]
   d4924:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d4926:	4688      	mov	r8, r1
   d4928:	4616      	mov	r6, r2
   d492a:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d492c:	46eb      	mov	fp, sp
   d492e:	f002 fc48 	bl	d71c2 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d4932:	2800      	cmp	r0, #0
   d4934:	d07f      	beq.n	d4a36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4936:	f1b8 0f1d 	cmp.w	r8, #29
   d493a:	d804      	bhi.n	d4946 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d493c:	4b4c      	ldr	r3, [pc, #304]	; (d4a70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d493e:	fa23 f308 	lsr.w	r3, r3, r8
   d4942:	07db      	lsls	r3, r3, #31
   d4944:	d402      	bmi.n	d494c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d4946:	7f63      	ldrb	r3, [r4, #29]
   d4948:	2b01      	cmp	r3, #1
   d494a:	d174      	bne.n	d4a36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d494c:	b946      	cbnz	r6, d4960 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d494e:	8b66      	ldrh	r6, [r4, #26]
   d4950:	b936      	cbnz	r6, d4960 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d4952:	8b23      	ldrh	r3, [r4, #24]
   d4954:	3301      	adds	r3, #1
   d4956:	b29b      	uxth	r3, r3
   d4958:	2b00      	cmp	r3, #0
   d495a:	d071      	beq.n	d4a40 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d495c:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d495e:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d4960:	f1a8 030c 	sub.w	r3, r8, #12
   d4964:	2b08      	cmp	r3, #8
   d4966:	d816      	bhi.n	d4996 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4968:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d496c:	4293      	cmp	r3, r2
   d496e:	bf38      	it	cc
   d4970:	4613      	movcc	r3, r2
   d4972:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4976:	f000 f98f 	bl	d4c98 <_Z11BlynkMillisv>
   d497a:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d497e:	2800      	cmp	r0, #0
   d4980:	db60      	blt.n	d4a44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d4982:	2100      	movs	r1, #0
   d4984:	4620      	mov	r0, r4
   d4986:	f7ff fe8d 	bl	d46a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d498a:	f000 f985 	bl	d4c98 <_Z11BlynkMillisv>
   d498e:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d4992:	2800      	cmp	r0, #0
   d4994:	daf5      	bge.n	d4982 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4996:	f1b9 0f00 	cmp.w	r9, #0
   d499a:	d05a      	beq.n	d4a52 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d499c:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d499e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d49a0:	2a00      	cmp	r2, #0
   d49a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d49a4:	bf08      	it	eq
   d49a6:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d49a8:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d49ac:	f10a 0307 	add.w	r3, sl, #7
   d49b0:	f023 0307 	bic.w	r3, r3, #7
   d49b4:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d49b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d49ba:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d49be:	18ea      	adds	r2, r5, r3
   d49c0:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d49c4:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d49c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d49ca:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d49ce:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d49d2:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d49d6:	f1b9 0f00 	cmp.w	r9, #0
   d49da:	d03c      	beq.n	d4a56 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d49dc:	2d00      	cmp	r5, #0
   d49de:	d03a      	beq.n	d4a56 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d49e0:	462a      	mov	r2, r5
   d49e2:	4649      	mov	r1, r9
   d49e4:	f10d 0005 	add.w	r0, sp, #5
   d49e8:	f003 ffd0 	bl	d898c <memcpy>
        pos += length;
   d49ec:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d49ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d49f0:	b13b      	cbz	r3, d4a02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d49f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d49f4:	b12b      	cbz	r3, d4a02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d49f6:	461a      	mov	r2, r3
   d49f8:	687b      	ldr	r3, [r7, #4]
   d49fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d49fc:	4418      	add	r0, r3
   d49fe:	f003 ffc5 	bl	d898c <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4a02:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4a04:	4555      	cmp	r5, sl
   d4a06:	d22a      	bcs.n	d4a5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4a08:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4a0c:	687b      	ldr	r3, [r7, #4]
   d4a0e:	6820      	ldr	r0, [r4, #0]
   d4a10:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4a14:	bf28      	it	cs
   d4a16:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4a1a:	1959      	adds	r1, r3, r5
   d4a1c:	f002 fbbb 	bl	d7196 <_ZN9TCPClient5writeEPKhj>
   d4a20:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4a22:	2000      	movs	r0, #0
   d4a24:	f000 f936 	bl	d4c94 <_Z10BlynkDelaym>
        if (w == 0) {
   d4a28:	b9be      	cbnz	r6, d4a5a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4a2a:	6820      	ldr	r0, [r4, #0]
   d4a2c:	f002 fdaa 	bl	d7584 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4a30:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4a32:	f000 f935 	bl	d4ca0 <BlynkNoOpCbk>
}
   d4a36:	370c      	adds	r7, #12
   d4a38:	46dd      	mov	sp, fp
   d4a3a:	46bd      	mov	sp, r7
   d4a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4a40:	2301      	movs	r3, #1
   d4a42:	e78b      	b.n	d495c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4a44:	7f21      	ldrb	r1, [r4, #28]
   d4a46:	2900      	cmp	r1, #0
   d4a48:	d1a5      	bne.n	d4996 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4a4a:	4620      	mov	r0, r4
   d4a4c:	f7ff fe2a 	bl	d46a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4a50:	e7a1      	b.n	d4996 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a52:	2305      	movs	r3, #5
   d4a54:	e7a3      	b.n	d499e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4a56:	2005      	movs	r0, #5
   d4a58:	e7c9      	b.n	d49ee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4a5a:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4a5c:	e7d2      	b.n	d4a04 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4a5e:	d003      	beq.n	d4a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4a60:	4620      	mov	r0, r4
   d4a62:	f7ff fbad 	bl	d41c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4a66:	e7e6      	b.n	d4a36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4a68:	f000 f916 	bl	d4c98 <_Z11BlynkMillisv>
   d4a6c:	6120      	str	r0, [r4, #16]
   d4a6e:	e7e2      	b.n	d4a36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4a70:	20000045 	.word	0x20000045

000d4a74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4a74:	b500      	push	{lr}
   d4a76:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4a78:	ab04      	add	r3, sp, #16
   d4a7a:	2200      	movs	r2, #0
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	2349      	movs	r3, #73	; 0x49
   d4a80:	9300      	str	r3, [sp, #0]
   d4a82:	9202      	str	r2, [sp, #8]
   d4a84:	4b03      	ldr	r3, [pc, #12]	; (d4a94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4a86:	2111      	movs	r1, #17
   d4a88:	f7ff ff46 	bl	d4918 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4a8c:	b015      	add	sp, #84	; 0x54
   d4a8e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a92:	bf00      	nop
   d4a94:	000d8bd2 	.word	0x000d8bd2

000d4a98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyI6StringEEvRKT_>:
    }

    // Please use Blynk.logEvent("event", "Description")
    template<typename T>
    BLYNK_DEPRECATED
    void notify(const T& msg) {
   d4a98:	b510      	push	{r4, lr}
   d4a9a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4a9e:	ab08      	add	r3, sp, #32
    add(str.c_str());
   d4aa0:	6809      	ldr	r1, [r1, #0]
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4aa2:	9305      	str	r3, [sp, #20]
   d4aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4aa8:	2300      	movs	r3, #0
   d4aaa:	e9cd 3206 	strd	r3, r2, [sp, #24]
   d4aae:	4604      	mov	r4, r0
    if (str == NULL) {
   d4ab0:	b989      	cbnz	r1, d4ad6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyI6StringEEvRKT_+0x3e>
        buff[len++] = '\0';
   d4ab2:	2201      	movs	r2, #1
   d4ab4:	9206      	str	r2, [sp, #24]
   d4ab6:	f88d 1020 	strb.w	r1, [sp, #32]
        logEvent("notify", msg);
#else
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4aba:	9b06      	ldr	r3, [sp, #24]
   d4abc:	2200      	movs	r2, #0
   d4abe:	3b01      	subs	r3, #1
   d4ac0:	9300      	str	r3, [sp, #0]
   d4ac2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d4ac6:	9b05      	ldr	r3, [sp, #20]
   d4ac8:	210e      	movs	r1, #14
   d4aca:	4620      	mov	r0, r4
   d4acc:	f7ff ff24 	bl	d4918 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    }
   d4ad0:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   d4ad4:	bd10      	pop	{r4, pc}
   d4ad6:	a805      	add	r0, sp, #20
   d4ad8:	f7ff faf6 	bl	d40c8 <_ZN10BlynkParam3addEPKc.part.0>
   d4adc:	e7ed      	b.n	d4aba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyI6StringEEvRKT_+0x22>
	...

000d4ae0 <loop>:

void loop() {
   d4ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
  display.loop();
   d4ae2:	4c43      	ldr	r4, [pc, #268]	; (d4bf0 <loop+0x110>)
  //read sensor and convert values to voltage + temperature
  reading = analogRead(A4);
  voltage = (reading * 3.3) / 4095.0;
  temperature = (voltage - 0.5) * 100;
   d4ae4:	4d43      	ldr	r5, [pc, #268]	; (d4bf4 <loop+0x114>)
void loop() {
   d4ae6:	b089      	sub	sp, #36	; 0x24
  display.loop();
   d4ae8:	4620      	mov	r0, r4
   d4aea:	f000 fd82 	bl	d55f2 <_ZN16OledWingAdafruit4loopEv>
  reading = analogRead(A4);
   d4aee:	200f      	movs	r0, #15
   d4af0:	f002 ff8d 	bl	d7a0e <analogRead>
   d4af4:	4b40      	ldr	r3, [pc, #256]	; (d4bf8 <loop+0x118>)
   d4af6:	8018      	strh	r0, [r3, #0]
  voltage = (reading * 3.3) / 4095.0;
   d4af8:	b280      	uxth	r0, r0
   d4afa:	f003 fa73 	bl	d7fe4 <__aeabi_i2d>
   d4afe:	a338      	add	r3, pc, #224	; (adr r3, d4be0 <loop+0x100>)
   d4b00:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b04:	f003 fad8 	bl	d80b8 <__aeabi_dmul>
   d4b08:	a337      	add	r3, pc, #220	; (adr r3, d4be8 <loop+0x108>)
   d4b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b0e:	f003 fbfd 	bl	d830c <__aeabi_ddiv>
   d4b12:	4b3a      	ldr	r3, [pc, #232]	; (d4bfc <loop+0x11c>)
   d4b14:	4606      	mov	r6, r0
   d4b16:	460f      	mov	r7, r1
   d4b18:	e9c3 6700 	strd	r6, r7, [r3]
  temperature = (voltage - 0.5) * 100;
   d4b1c:	2200      	movs	r2, #0
   d4b1e:	4b38      	ldr	r3, [pc, #224]	; (d4c00 <loop+0x120>)
   d4b20:	f003 f912 	bl	d7d48 <__aeabi_dsub>
   d4b24:	4b37      	ldr	r3, [pc, #220]	; (d4c04 <loop+0x124>)
   d4b26:	2200      	movs	r2, #0
   d4b28:	f003 fac6 	bl	d80b8 <__aeabi_dmul>
   d4b2c:	e9c5 0100 	strd	r0, r1, [r5]
  String output = "";
   d4b30:	4935      	ldr	r1, [pc, #212]	; (d4c08 <loop+0x128>)
   d4b32:	4668      	mov	r0, sp
   d4b34:	f001 ff2b 	bl	d698e <_ZN6StringC1EPKc>

  // set up display
  display.clearDisplay();
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f000 ff4f 	bl	d59dc <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4b3e:	2101      	movs	r1, #1
   d4b40:	4620      	mov	r0, r4
   d4b42:	f000 fcde 	bl	d5502 <_ZN12Adafruit_GFX11setTextSizeEh>
   d4b46:	2200      	movs	r2, #0
   d4b48:	f04f 1301 	mov.w	r3, #65537	; 0x10001
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4b4c:	492f      	ldr	r1, [pc, #188]	; (d4c0c <loop+0x12c>)
   d4b4e:	4668      	mov	r0, sp
   d4b50:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d4b54:	f001 ff70 	bl	d6a38 <_ZN6String6concatEPKc>
  display.setTextColor(WHITE);
  display.setCursor(0,0);
    
  //set up output string with celsius and fahrenheit
  output += "Celsius: ";
  output += (String) temperature;
   d4b58:	ed95 0b00 	vldr	d0, [r5]
   d4b5c:	2106      	movs	r1, #6
   d4b5e:	a804      	add	r0, sp, #16
   d4b60:	f001 ff3b 	bl	d69da <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4b64:	a904      	add	r1, sp, #16
   d4b66:	4668      	mov	r0, sp
   d4b68:	f001 ff62 	bl	d6a30 <_ZN6String6concatERKS_>
   d4b6c:	a804      	add	r0, sp, #16
   d4b6e:	f001 fec3 	bl	d68f8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4b72:	4927      	ldr	r1, [pc, #156]	; (d4c10 <loop+0x130>)
   d4b74:	4668      	mov	r0, sp
   d4b76:	f001 ff5f 	bl	d6a38 <_ZN6String6concatEPKc>
   d4b7a:	4926      	ldr	r1, [pc, #152]	; (d4c14 <loop+0x134>)
   d4b7c:	4668      	mov	r0, sp
   d4b7e:	f001 ff5b 	bl	d6a38 <_ZN6String6concatEPKc>
  output += "\n";
  output += "Fahrenheit: ";
  output += (String) ((temperature*9/5)+32);
   d4b82:	e9d5 0100 	ldrd	r0, r1, [r5]
   d4b86:	4b24      	ldr	r3, [pc, #144]	; (d4c18 <loop+0x138>)
   d4b88:	2200      	movs	r2, #0
   d4b8a:	f003 fa95 	bl	d80b8 <__aeabi_dmul>
   d4b8e:	4b23      	ldr	r3, [pc, #140]	; (d4c1c <loop+0x13c>)
   d4b90:	2200      	movs	r2, #0
   d4b92:	f003 fbbb 	bl	d830c <__aeabi_ddiv>
   d4b96:	4b22      	ldr	r3, [pc, #136]	; (d4c20 <loop+0x140>)
   d4b98:	2200      	movs	r2, #0
   d4b9a:	f003 f8d7 	bl	d7d4c <__adddf3>
   d4b9e:	ec41 0b10 	vmov	d0, r0, r1
   d4ba2:	2106      	movs	r1, #6
   d4ba4:	a804      	add	r0, sp, #16
   d4ba6:	f001 ff18 	bl	d69da <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4baa:	a904      	add	r1, sp, #16
   d4bac:	4668      	mov	r0, sp
   d4bae:	f001 ff3f 	bl	d6a30 <_ZN6String6concatERKS_>
   d4bb2:	a804      	add	r0, sp, #16
   d4bb4:	f001 fea0 	bl	d68f8 <_ZN6StringD1Ev>

  //print to display
  display.println(output);
   d4bb8:	9900      	ldr	r1, [sp, #0]
   d4bba:	4620      	mov	r0, r4
   d4bbc:	f001 ffad 	bl	d6b1a <_ZN5Print7printlnEPKc>
  display.display();
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	f001 f977 	bl	d5eb4 <_ZN16Adafruit_SSD13067displayEv>


  // notify app button A pressed
  if (display.pressedA())
   d4bc6:	4620      	mov	r0, r4
   d4bc8:	f000 fd2c 	bl	d5624 <_ZN16OledWingAdafruit8pressedAEv>
   d4bcc:	b118      	cbz	r0, d4bd6 <loop+0xf6>
  {
    Blynk.notify(output);
   d4bce:	4815      	ldr	r0, [pc, #84]	; (d4c24 <loop+0x144>)
   d4bd0:	4669      	mov	r1, sp
   d4bd2:	f7ff ff61 	bl	d4a98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyI6StringEEvRKT_>
  String output = "";
   d4bd6:	4668      	mov	r0, sp
   d4bd8:	f001 fe8e 	bl	d68f8 <_ZN6StringD1Ev>
  }
   d4bdc:	b009      	add	sp, #36	; 0x24
   d4bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4be0:	66666666 	.word	0x66666666
   d4be4:	400a6666 	.word	0x400a6666
   d4be8:	00000000 	.word	0x00000000
   d4bec:	40affe00 	.word	0x40affe00
   d4bf0:	2003e5c0 	.word	0x2003e5c0
   d4bf4:	2003e638 	.word	0x2003e638
   d4bf8:	2003e630 	.word	0x2003e630
   d4bfc:	2003e640 	.word	0x2003e640
   d4c00:	3fe00000 	.word	0x3fe00000
   d4c04:	40590000 	.word	0x40590000
   d4c08:	000d8bbc 	.word	0x000d8bbc
   d4c0c:	000d8bb1 	.word	0x000d8bb1
   d4c10:	000d8bbb 	.word	0x000d8bbb
   d4c14:	000d8bbd 	.word	0x000d8bbd
   d4c18:	40220000 	.word	0x40220000
   d4c1c:	40140000 	.word	0x40140000
   d4c20:	40400000 	.word	0x40400000
   d4c24:	2003e564 	.word	0x2003e564

000d4c28 <_GLOBAL__sub_I_Blynk>:
   d4c28:	b538      	push	{r3, r4, r5, lr}
        : domain(NULL), port(0)
   d4c2a:	4d14      	ldr	r5, [pc, #80]	; (d4c7c <_GLOBAL__sub_I_Blynk+0x54>)
SYSTEM_THREAD(ENABLED);
   d4c2c:	2100      	movs	r1, #0
   d4c2e:	2001      	movs	r0, #1
   d4c30:	f001 fbda 	bl	d63e8 <system_thread_set_state>
   d4c34:	4628      	mov	r0, r5
   d4c36:	f002 fcef 	bl	d7618 <_ZN9TCPClientC1Ev>
   d4c3a:	f105 001c 	add.w	r0, r5, #28
   d4c3e:	f002 f8e7 	bl	d6e10 <_ZN9IPAddressC1Ev>
   d4c42:	2400      	movs	r4, #0
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4c44:	4a0e      	ldr	r2, [pc, #56]	; (d4c80 <_GLOBAL__sub_I_Blynk+0x58>)
   d4c46:	490f      	ldr	r1, [pc, #60]	; (d4c84 <_GLOBAL__sub_I_Blynk+0x5c>)
   d4c48:	636c      	str	r4, [r5, #52]	; 0x34
   d4c4a:	4628      	mov	r0, r5
   d4c4c:	872c      	strh	r4, [r5, #56]	; 0x38
   d4c4e:	f002 ff5b 	bl	d7b08 <__aeabi_atexit>
        , state(CONNECTING)
   d4c52:	4b0d      	ldr	r3, [pc, #52]	; (d4c88 <_GLOBAL__sub_I_Blynk+0x60>)
   d4c54:	e9c3 5400 	strd	r5, r4, [r3]
   d4c58:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4c5c:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4c60:	619c      	str	r4, [r3, #24]
   d4c62:	839c      	strh	r4, [r3, #28]
OledWingAdafruit display;
   d4c64:	4c09      	ldr	r4, [pc, #36]	; (d4c8c <_GLOBAL__sub_I_Blynk+0x64>)
   d4c66:	2107      	movs	r1, #7
   d4c68:	4620      	mov	r0, r4
   d4c6a:	f000 fc6b 	bl	d5544 <_ZN16OledWingAdafruitC1Ei>
   d4c6e:	4620      	mov	r0, r4
   d4c70:	4a03      	ldr	r2, [pc, #12]	; (d4c80 <_GLOBAL__sub_I_Blynk+0x58>)
   d4c72:	4907      	ldr	r1, [pc, #28]	; (d4c90 <_GLOBAL__sub_I_Blynk+0x68>)
   d4c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
OledWingAdafruit display;
   d4c78:	f002 bf46 	b.w	d7b08 <__aeabi_atexit>
   d4c7c:	2003e584 	.word	0x2003e584
   d4c80:	2003e560 	.word	0x2003e560
   d4c84:	000d40f9 	.word	0x000d40f9
   d4c88:	2003e564 	.word	0x2003e564
   d4c8c:	2003e5c0 	.word	0x2003e5c0
   d4c90:	000d5511 	.word	0x000d5511

000d4c94 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d4c94:	f001 bfd8 	b.w	d6c48 <delay>

000d4c98 <_Z11BlynkMillisv>:

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4c98:	f001 ba0e 	b.w	d60b8 <HAL_Timer_Get_Milli_Seconds>

000d4c9c <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d4c9c:	4770      	bx	lr

000d4c9e <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d4c9e:	4770      	bx	lr

000d4ca0 <BlynkNoOpCbk>:
{}
   d4ca0:	4770      	bx	lr
	...

000d4ca4 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d4ca4:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d4ca6:	bf5a      	itte	pl
   d4ca8:	4b02      	ldrpl	r3, [pc, #8]	; (d4cb4 <GetReadHandler+0x10>)
   d4caa:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d4cae:	2000      	movmi	r0, #0
#endif
}
   d4cb0:	4770      	bx	lr
   d4cb2:	bf00      	nop
   d4cb4:	000d8c20 	.word	0x000d8c20

000d4cb8 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d4cb8:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d4cba:	bf5a      	itte	pl
   d4cbc:	4b02      	ldrpl	r3, [pc, #8]	; (d4cc8 <GetWriteHandler+0x10>)
   d4cbe:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d4cc2:	2000      	movmi	r0, #0
#endif
}
   d4cc4:	4770      	bx	lr
   d4cc6:	bf00      	nop
   d4cc8:	000d8e20 	.word	0x000d8e20

000d4ccc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4ccc:	4770      	bx	lr

000d4cce <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4cce:	b510      	push	{r4, lr}
  }
   d4cd0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4cd2:	4604      	mov	r4, r0
  }
   d4cd4:	f002 ff1d 	bl	d7b12 <_ZdlPvj>
   d4cd8:	4620      	mov	r0, r4
   d4cda:	bd10      	pop	{r4, pc}

000d4cdc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4cdc:	b40e      	push	{r1, r2, r3}
   d4cde:	b503      	push	{r0, r1, lr}
   d4ce0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4ce2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4ce4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4ce8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4cea:	f001 ff3e 	bl	d6b6a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4cee:	b002      	add	sp, #8
   d4cf0:	f85d eb04 	ldr.w	lr, [sp], #4
   d4cf4:	b003      	add	sp, #12
   d4cf6:	4770      	bx	lr

000d4cf8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4cf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4cfa:	4604      	mov	r4, r0
   d4cfc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4cfe:	7922      	ldrb	r2, [r4, #4]
   d4d00:	68a3      	ldr	r3, [r4, #8]
   d4d02:	b132      	cbz	r2, d4d12 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4d04:	b9a3      	cbnz	r3, d4d30 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4d06:	490b      	ldr	r1, [pc, #44]	; (d4d34 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4d08:	b002      	add	sp, #8
   d4d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4d0e:	f001 bef1 	b.w	d6af4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4d12:	4a09      	ldr	r2, [pc, #36]	; (d4d38 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4d14:	7b26      	ldrb	r6, [r4, #12]
   d4d16:	4d09      	ldr	r5, [pc, #36]	; (d4d3c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4d18:	4909      	ldr	r1, [pc, #36]	; (d4d40 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4d1a:	7b64      	ldrb	r4, [r4, #13]
   d4d1c:	2e01      	cmp	r6, #1
   d4d1e:	bf18      	it	ne
   d4d20:	4629      	movne	r1, r5
   d4d22:	e9cd 1400 	strd	r1, r4, [sp]
   d4d26:	4907      	ldr	r1, [pc, #28]	; (d4d44 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4d28:	f7ff ffd8 	bl	d4cdc <_ZN5Print6printfEPKcz>
  }
   d4d2c:	b002      	add	sp, #8
   d4d2e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4d30:	4a05      	ldr	r2, [pc, #20]	; (d4d48 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4d32:	e7ef      	b.n	d4d14 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4d34:	000d9031 	.word	0x000d9031
   d4d38:	000d8bbc 	.word	0x000d8bbc
   d4d3c:	000d902d 	.word	0x000d902d
   d4d40:	000d9029 	.word	0x000d9029
   d4d44:	000d9047 	.word	0x000d9047
   d4d48:	000d9020 	.word	0x000d9020

000d4d4c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d50:	b085      	sub	sp, #20
   d4d52:	461f      	mov	r7, r3
   d4d54:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4d58:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4d5c:	eba8 0902 	sub.w	r9, r8, r2
   d4d60:	eba7 0a01 	sub.w	sl, r7, r1
   d4d64:	f1b9 0f00 	cmp.w	r9, #0
   d4d68:	bfb8      	it	lt
   d4d6a:	f1c9 0900 	rsblt	r9, r9, #0
   d4d6e:	f1ba 0f00 	cmp.w	sl, #0
   d4d72:	bfb8      	it	lt
   d4d74:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4d78:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4d7a:	4683      	mov	fp, r0
   d4d7c:	460c      	mov	r4, r1
   d4d7e:	4615      	mov	r5, r2
    if (steep) {
   d4d80:	dd04      	ble.n	d4d8c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4d82:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4d84:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4d86:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4d88:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4d8a:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4d8c:	42bc      	cmp	r4, r7
   d4d8e:	dd05      	ble.n	d4d9c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4d90:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4d92:	4645      	mov	r5, r8
   d4d94:	4690      	mov	r8, r2
    if (x0 > x1) {
   d4d96:	4622      	mov	r2, r4
   d4d98:	463c      	mov	r4, r7
   d4d9a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4d9c:	1b3e      	subs	r6, r7, r4
   d4d9e:	b2b2      	uxth	r2, r6
   d4da0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d4da2:	eba8 0205 	sub.w	r2, r8, r5
   d4da6:	2a00      	cmp	r2, #0
   d4da8:	bfb8      	it	lt
   d4daa:	4252      	neglt	r2, r2
   d4dac:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d4dae:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4db2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4db6:	4545      	cmp	r5, r8
   d4db8:	bfb4      	ite	lt
   d4dba:	2201      	movlt	r2, #1
   d4dbc:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d4dc0:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d4dc2:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4dc4:	42bc      	cmp	r4, r7
   d4dc6:	dc1c      	bgt.n	d4e02 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4dc8:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4dcc:	9303      	str	r3, [sp, #12]
        if (steep) {
   d4dce:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4dd0:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4dd4:	bfc7      	ittee	gt
   d4dd6:	4629      	movgt	r1, r5
   d4dd8:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4dda:	462a      	movle	r2, r5
   d4ddc:	4621      	movle	r1, r4
   d4dde:	4658      	mov	r0, fp
   d4de0:	47c0      	blx	r8
        }
        err -= dy;
   d4de2:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4de4:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d4de6:	1ab6      	subs	r6, r6, r2
   d4de8:	b2b1      	uxth	r1, r6
   d4dea:	b236      	sxth	r6, r6
        if (err < 0) {
   d4dec:	2e00      	cmp	r6, #0
   d4dee:	da05      	bge.n	d4dfc <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4df0:	9a02      	ldr	r2, [sp, #8]
   d4df2:	4415      	add	r5, r2
            err += dx;
   d4df4:	9a00      	ldr	r2, [sp, #0]
   d4df6:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4df8:	b22d      	sxth	r5, r5
            err += dx;
   d4dfa:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4dfc:	3401      	adds	r4, #1
   d4dfe:	b224      	sxth	r4, r4
   d4e00:	e7e0      	b.n	d4dc4 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d4e02:	b005      	add	sp, #20
   d4e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4e08 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4e08:	4770      	bx	lr

000d4e0a <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4e0a:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4e0c:	6804      	ldr	r4, [r0, #0]
   d4e0e:	6924      	ldr	r4, [r4, #16]
   d4e10:	46a4      	mov	ip, r4
}
   d4e12:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d4e16:	4760      	bx	ip

000d4e18 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4e18:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4e1a:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4e1c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4e20:	9502      	str	r5, [sp, #8]
   d4e22:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4e24:	46a4      	mov	ip, r4
}
   d4e26:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4e28:	4760      	bx	ip

000d4e2a <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4e2a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4e2c:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d4e2e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4e32:	9502      	str	r5, [sp, #8]
   d4e34:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4e36:	46a4      	mov	ip, r4
}
   d4e38:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d4e3a:	4760      	bx	ip

000d4e3c <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4e3c:	b470      	push	{r4, r5, r6}
   d4e3e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4e42:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4e46:	6804      	ldr	r4, [r0, #0]
   d4e48:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4e4c:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4e4e:	46a4      	mov	ip, r4
}
   d4e50:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d4e52:	4760      	bx	ip

000d4e54 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4e54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4e58:	461c      	mov	r4, r3
    startWrite();
   d4e5a:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4e5c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4e60:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d4e62:	4605      	mov	r5, r0
   d4e64:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d4e66:	3c01      	subs	r4, #1
   d4e68:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d4e6a:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4e6c:	b224      	sxth	r4, r4
    startWrite();
   d4e6e:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4e70:	682b      	ldr	r3, [r5, #0]
   d4e72:	f8cd 8004 	str.w	r8, [sp, #4]
   d4e76:	9400      	str	r4, [sp, #0]
   d4e78:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4e7a:	4628      	mov	r0, r5
   d4e7c:	463b      	mov	r3, r7
   d4e7e:	4632      	mov	r2, r6
   d4e80:	4639      	mov	r1, r7
   d4e82:	47a0      	blx	r4
    endWrite();
   d4e84:	682b      	ldr	r3, [r5, #0]
   d4e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e88:	4628      	mov	r0, r5
}
   d4e8a:	b002      	add	sp, #8
   d4e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4e90:	4718      	bx	r3

000d4e92 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4e92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4e96:	461d      	mov	r5, r3
    startWrite();
   d4e98:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d4e9a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4e9e:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4ea0:	4604      	mov	r4, r0
   d4ea2:	4617      	mov	r7, r2
   d4ea4:	460e      	mov	r6, r1
    startWrite();
   d4ea6:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4ea8:	e9cd 7800 	strd	r7, r8, [sp]
   d4eac:	6822      	ldr	r2, [r4, #0]
   d4eae:	1e6b      	subs	r3, r5, #1
   d4eb0:	4433      	add	r3, r6
   d4eb2:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4eb4:	4620      	mov	r0, r4
   d4eb6:	b21b      	sxth	r3, r3
   d4eb8:	463a      	mov	r2, r7
   d4eba:	4631      	mov	r1, r6
   d4ebc:	47a8      	blx	r5
    endWrite();
   d4ebe:	6823      	ldr	r3, [r4, #0]
   d4ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ec2:	4620      	mov	r0, r4
}
   d4ec4:	b002      	add	sp, #8
   d4ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4eca:	4718      	bx	r3

000d4ecc <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4ecc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4ed0:	461e      	mov	r6, r3
    startWrite();
   d4ed2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4ed4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4ed8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4eda:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d4ede:	460c      	mov	r4, r1
   d4ee0:	4605      	mov	r5, r0
   d4ee2:	4617      	mov	r7, r2
    startWrite();
   d4ee4:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4ee6:	4426      	add	r6, r4
   d4ee8:	42b4      	cmp	r4, r6
   d4eea:	682b      	ldr	r3, [r5, #0]
   d4eec:	da0b      	bge.n	d4f06 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d4eee:	f8cd 8000 	str.w	r8, [sp]
   d4ef2:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4ef6:	4621      	mov	r1, r4
   d4ef8:	464b      	mov	r3, r9
   d4efa:	463a      	mov	r2, r7
   d4efc:	4628      	mov	r0, r5
   d4efe:	3401      	adds	r4, #1
   d4f00:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d4f02:	b224      	sxth	r4, r4
   d4f04:	e7f0      	b.n	d4ee8 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d4f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f08:	4628      	mov	r0, r5
}
   d4f0a:	b002      	add	sp, #8
   d4f0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4f10:	4718      	bx	r3

000d4f12 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d4f12:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4f14:	6802      	ldr	r2, [r0, #0]
   d4f16:	9101      	str	r1, [sp, #4]
   d4f18:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4f1c:	9100      	str	r1, [sp, #0]
   d4f1e:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4f20:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4f24:	2200      	movs	r2, #0
   d4f26:	4611      	mov	r1, r2
   d4f28:	47a0      	blx	r4
}
   d4f2a:	b002      	add	sp, #8
   d4f2c:	bd10      	pop	{r4, pc}

000d4f2e <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4f2e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4f32:	461d      	mov	r5, r3
    startWrite();
   d4f34:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4f36:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d4f3a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4f3c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4f40:	4604      	mov	r4, r0
   d4f42:	460f      	mov	r7, r1
   d4f44:	4616      	mov	r6, r2
    startWrite();
   d4f46:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4f48:	6823      	ldr	r3, [r4, #0]
   d4f4a:	f8cd 8000 	str.w	r8, [sp]
   d4f4e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4f52:	4632      	mov	r2, r6
   d4f54:	462b      	mov	r3, r5
   d4f56:	4639      	mov	r1, r7
   d4f58:	4620      	mov	r0, r4
   d4f5a:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4f5c:	6823      	ldr	r3, [r4, #0]
   d4f5e:	f8cd 8000 	str.w	r8, [sp]
   d4f62:	f109 32ff 	add.w	r2, r9, #4294967295
   d4f66:	4432      	add	r2, r6
   d4f68:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4f6c:	4639      	mov	r1, r7
   d4f6e:	462b      	mov	r3, r5
   d4f70:	4620      	mov	r0, r4
   d4f72:	b212      	sxth	r2, r2
   d4f74:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d4f76:	6823      	ldr	r3, [r4, #0]
   d4f78:	f8cd 8000 	str.w	r8, [sp]
   d4f7c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4f80:	4632      	mov	r2, r6
   d4f82:	464b      	mov	r3, r9
   d4f84:	4639      	mov	r1, r7
   d4f86:	4620      	mov	r0, r4
   d4f88:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d4f8a:	1e6b      	subs	r3, r5, #1
   d4f8c:	19d9      	adds	r1, r3, r7
   d4f8e:	6823      	ldr	r3, [r4, #0]
   d4f90:	f8cd 8000 	str.w	r8, [sp]
   d4f94:	6a1d      	ldr	r5, [r3, #32]
   d4f96:	4620      	mov	r0, r4
   d4f98:	464b      	mov	r3, r9
   d4f9a:	4632      	mov	r2, r6
   d4f9c:	b209      	sxth	r1, r1
   d4f9e:	47a8      	blx	r5
    endWrite();
   d4fa0:	6823      	ldr	r3, [r4, #0]
   d4fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fa4:	4620      	mov	r0, r4
}
   d4fa6:	b002      	add	sp, #8
   d4fa8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4fac:	4718      	bx	r3

000d4fae <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d4fae:	4770      	bx	lr

000d4fb0 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d4fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d4fb4:	4299      	cmp	r1, r3
        uint16_t color) {
   d4fb6:	4616      	mov	r6, r2
   d4fb8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d4fbc:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4fc0:	6802      	ldr	r2, [r0, #0]
   d4fc2:	4680      	mov	r8, r0
   d4fc4:	460d      	mov	r5, r1
   d4fc6:	461c      	mov	r4, r3
    if(x0 == x1){
   d4fc8:	d113      	bne.n	d4ff2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4fca:	42be      	cmp	r6, r7
   d4fcc:	bfc8      	it	gt
   d4fce:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4fd0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4fd4:	bfc4      	itt	gt
   d4fd6:	463e      	movgt	r6, r7
   d4fd8:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4fda:	1c7b      	adds	r3, r7, #1
   d4fdc:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d4fde:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4fe0:	b21b      	sxth	r3, r3
   d4fe2:	4632      	mov	r2, r6
   d4fe4:	4629      	mov	r1, r5
   d4fe6:	4640      	mov	r0, r8
   d4fe8:	46a4      	mov	ip, r4
}
   d4fea:	b003      	add	sp, #12
   d4fec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4ff0:	4760      	bx	ip
    } else if(y0 == y1){
   d4ff2:	42be      	cmp	r6, r7
   d4ff4:	d10a      	bne.n	d500c <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d4ff6:	4299      	cmp	r1, r3
   d4ff8:	bfc2      	ittt	gt
   d4ffa:	460b      	movgt	r3, r1
   d4ffc:	4625      	movgt	r5, r4
   d4ffe:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5000:	1c63      	adds	r3, r4, #1
   d5002:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d5006:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5008:	1b5b      	subs	r3, r3, r5
   d500a:	e7e9      	b.n	d4fe0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d500c:	6953      	ldr	r3, [r2, #20]
   d500e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d5010:	e9cd 7900 	strd	r7, r9, [sp]
   d5014:	f8d8 3000 	ldr.w	r3, [r8]
   d5018:	4640      	mov	r0, r8
   d501a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d501c:	4632      	mov	r2, r6
   d501e:	4623      	mov	r3, r4
   d5020:	4629      	mov	r1, r5
   d5022:	47b8      	blx	r7
        endWrite();
   d5024:	f8d8 3000 	ldr.w	r3, [r8]
   d5028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d502a:	4640      	mov	r0, r8
}
   d502c:	b003      	add	sp, #12
   d502e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d5032:	4718      	bx	r3

000d5034 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d5034:	f001 0303 	and.w	r3, r1, #3
   d5038:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d503c:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d503e:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d5040:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5044:	bf59      	ittee	pl
   d5046:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d5048:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d504a:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d504c:	81c3      	strhmi	r3, [r0, #14]
}
   d504e:	4770      	bx	lr

000d5050 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5050:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d5052:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d5054:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d5056:	4a07      	ldr	r2, [pc, #28]	; (d5074 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d5058:	4d07      	ldr	r5, [pc, #28]	; (d5078 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d505a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d505c:	2400      	movs	r4, #0
    _width    = WIDTH;
   d505e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d5060:	f04f 31ff 	mov.w	r1, #4294967295
   d5064:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d5068:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d506a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d506c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d506e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d5070:	6204      	str	r4, [r0, #32]
}
   d5072:	bd30      	pop	{r4, r5, pc}
   d5074:	01000101 	.word	0x01000101
   d5078:	000d956c 	.word	0x000d956c

000d507c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5080:	b089      	sub	sp, #36	; 0x24
   d5082:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d5086:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5088:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d508c:	9304      	str	r3, [sp, #16]
   d508e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d5092:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5094:	9305      	str	r3, [sp, #20]
   d5096:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d509a:	4604      	mov	r4, r0
    startWrite();
   d509c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d509e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d50a2:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d50a6:	bf48      	it	mi
   d50a8:	f108 020e 	addmi.w	r2, r8, #14
   d50ac:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d50b0:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d50b2:	4635      	mov	r5, r6
   d50b4:	9b03      	ldr	r3, [sp, #12]
   d50b6:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d50b8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d50bc:	189a      	adds	r2, r3, r2
   d50be:	9b05      	ldr	r3, [sp, #20]
   d50c0:	428b      	cmp	r3, r1
   d50c2:	b212      	sxth	r2, r2
   d50c4:	dd27      	ble.n	d5116 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d50c6:	9b04      	ldr	r3, [sp, #16]
   d50c8:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d50ca:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d50ce:	9306      	str	r3, [sp, #24]
   d50d0:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d50d4:	4580      	cmp	r8, r0
   d50d6:	fa1f f189 	uxth.w	r1, r9
   d50da:	dd17      	ble.n	d510c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d50dc:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d50de:	bf05      	ittet	eq
   d50e0:	9b06      	ldreq	r3, [sp, #24]
   d50e2:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d50e4:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d50e6:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d50e8:	bf18      	it	ne
   d50ea:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d50ec:	062b      	lsls	r3, r5, #24
   d50ee:	d50a      	bpl.n	d5106 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d50f0:	9b02      	ldr	r3, [sp, #8]
   d50f2:	6820      	ldr	r0, [r4, #0]
   d50f4:	9207      	str	r2, [sp, #28]
   d50f6:	4419      	add	r1, r3
   d50f8:	6983      	ldr	r3, [r0, #24]
   d50fa:	b209      	sxth	r1, r1
   d50fc:	461f      	mov	r7, r3
   d50fe:	4620      	mov	r0, r4
   d5100:	4653      	mov	r3, sl
   d5102:	47b8      	blx	r7
   d5104:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d5106:	f109 0901 	add.w	r9, r9, #1
   d510a:	e7e1      	b.n	d50d0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d510c:	9b01      	ldr	r3, [sp, #4]
   d510e:	3301      	adds	r3, #1
   d5110:	9301      	str	r3, [sp, #4]
   d5112:	445e      	add	r6, fp
   d5114:	e7ce      	b.n	d50b4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d5116:	6823      	ldr	r3, [r4, #0]
   d5118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d511a:	4620      	mov	r0, r4
}
   d511c:	b009      	add	sp, #36	; 0x24
   d511e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d5122:	4718      	bx	r3

000d5124 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5128:	ed2d 8b02 	vpush	{d8}
   d512c:	b091      	sub	sp, #68	; 0x44
   d512e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d5130:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5132:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d5136:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d513a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d513e:	9103      	str	r1, [sp, #12]
   d5140:	461f      	mov	r7, r3
   d5142:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d5146:	9304      	str	r3, [sp, #16]
   d5148:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d514a:	2a00      	cmp	r2, #0
   d514c:	f040 80c5 	bne.w	d52da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d5150:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5154:	428b      	cmp	r3, r1
   d5156:	f340 814c 	ble.w	d53f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d515a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d515e:	42b3      	cmp	r3, r6
   d5160:	f340 8147 	ble.w	d53f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5164:	2306      	movs	r3, #6
   d5166:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d516a:	2b00      	cmp	r3, #0
   d516c:	f340 8141 	ble.w	d53f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d5170:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5174:	2b00      	cmp	r3, #0
   d5176:	f340 813c 	ble.w	d53f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d517a:	7f03      	ldrb	r3, [r0, #28]
   d517c:	b91b      	cbnz	r3, d5186 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d517e:	2faf      	cmp	r7, #175	; 0xaf
   d5180:	bf84      	itt	hi
   d5182:	3701      	addhi	r7, #1
   d5184:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d5186:	f8db 3000 	ldr.w	r3, [fp]
   d518a:	4658      	mov	r0, fp
   d518c:	695b      	ldr	r3, [r3, #20]
   d518e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5190:	2205      	movs	r2, #5
   d5192:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5194:	2200      	movs	r2, #0
   d5196:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5198:	4a98      	ldr	r2, [pc, #608]	; (d53fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d519a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d519e:	18d3      	adds	r3, r2, r3
   d51a0:	930c      	str	r3, [sp, #48]	; 0x30
   d51a2:	b2b3      	uxth	r3, r6
   d51a4:	9306      	str	r3, [sp, #24]
   d51a6:	9a05      	ldr	r2, [sp, #20]
   d51a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d51aa:	5c9b      	ldrb	r3, [r3, r2]
   d51ac:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d51ae:	b2ab      	uxth	r3, r5
   d51b0:	930b      	str	r3, [sp, #44]	; 0x2c
   d51b2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d51b6:	9308      	str	r3, [sp, #32]
   d51b8:	9b03      	ldr	r3, [sp, #12]
   d51ba:	fb02 f905 	mul.w	r9, r2, r5
   d51be:	fa19 f983 	uxtah	r9, r9, r3
   d51c2:	fa0f f389 	sxth.w	r3, r9
   d51c6:	ee08 3a10 	vmov	s16, r3
   d51ca:	2308      	movs	r3, #8
   d51cc:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d51ce:	9b03      	ldr	r3, [sp, #12]
   d51d0:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d51d4:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d51d8:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d51dc:	9a07      	ldr	r2, [sp, #28]
   d51de:	f8db 3000 	ldr.w	r3, [fp]
   d51e2:	07d2      	lsls	r2, r2, #31
   d51e4:	d552      	bpl.n	d528c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d51e6:	2d01      	cmp	r5, #1
   d51e8:	fa1f f289 	uxth.w	r2, r9
   d51ec:	d13e      	bne.n	d526c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d51ee:	2c01      	cmp	r4, #1
   d51f0:	d13c      	bne.n	d526c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d51f2:	699b      	ldr	r3, [r3, #24]
   d51f4:	9906      	ldr	r1, [sp, #24]
   d51f6:	461f      	mov	r7, r3
   d51f8:	9b04      	ldr	r3, [sp, #16]
   d51fa:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d51fc:	b212      	sxth	r2, r2
   d51fe:	4651      	mov	r1, sl
   d5200:	4658      	mov	r0, fp
   d5202:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5204:	f109 0301 	add.w	r3, r9, #1
   d5208:	fa4f f983 	sxtb.w	r9, r3
   d520c:	9b07      	ldr	r3, [sp, #28]
   d520e:	085b      	lsrs	r3, r3, #1
   d5210:	9307      	str	r3, [sp, #28]
   d5212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5214:	3b01      	subs	r3, #1
   d5216:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d521a:	930a      	str	r3, [sp, #40]	; 0x28
   d521c:	d1de      	bne.n	d51dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d521e:	9f05      	ldr	r7, [sp, #20]
   d5220:	3701      	adds	r7, #1
   d5222:	b27b      	sxtb	r3, r7
   d5224:	9305      	str	r3, [sp, #20]
   d5226:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5228:	3b01      	subs	r3, #1
   d522a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d522e:	9309      	str	r3, [sp, #36]	; 0x24
   d5230:	d1b9      	bne.n	d51a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d5232:	9b04      	ldr	r3, [sp, #16]
   d5234:	4543      	cmp	r3, r8
   d5236:	d00f      	beq.n	d5258 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d5238:	2d01      	cmp	r5, #1
   d523a:	f8db 3000 	ldr.w	r3, [fp]
   d523e:	d13b      	bne.n	d52b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5240:	2c01      	cmp	r4, #1
   d5242:	d139      	bne.n	d52b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5244:	9908      	ldr	r1, [sp, #32]
   d5246:	f8cd 8000 	str.w	r8, [sp]
   d524a:	3105      	adds	r1, #5
   d524c:	6a1c      	ldr	r4, [r3, #32]
   d524e:	4632      	mov	r2, r6
   d5250:	2308      	movs	r3, #8
   d5252:	b209      	sxth	r1, r1
   d5254:	4658      	mov	r0, fp
   d5256:	47a0      	blx	r4
        endWrite();
   d5258:	f8db 3000 	ldr.w	r3, [fp]
   d525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d525e:	4658      	mov	r0, fp
}
   d5260:	b011      	add	sp, #68	; 0x44
   d5262:	ecbd 8b02 	vpop	{d8}
   d5266:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d526a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d526c:	9906      	ldr	r1, [sp, #24]
   d526e:	fb14 f202 	smulbb	r2, r4, r2
   d5272:	440a      	add	r2, r1
   d5274:	9904      	ldr	r1, [sp, #16]
   d5276:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d5278:	9400      	str	r4, [sp, #0]
   d527a:	69db      	ldr	r3, [r3, #28]
   d527c:	ee18 1a10 	vmov	r1, s16
   d5280:	461f      	mov	r7, r3
   d5282:	b212      	sxth	r2, r2
   d5284:	462b      	mov	r3, r5
   d5286:	4658      	mov	r0, fp
   d5288:	47b8      	blx	r7
   d528a:	e7bb      	b.n	d5204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d528c:	9a04      	ldr	r2, [sp, #16]
   d528e:	4542      	cmp	r2, r8
   d5290:	d0b8      	beq.n	d5204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d5292:	2d01      	cmp	r5, #1
   d5294:	fa1f f289 	uxth.w	r2, r9
   d5298:	d107      	bne.n	d52aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d529a:	2c01      	cmp	r4, #1
   d529c:	d105      	bne.n	d52aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d529e:	699b      	ldr	r3, [r3, #24]
   d52a0:	9906      	ldr	r1, [sp, #24]
   d52a2:	461f      	mov	r7, r3
   d52a4:	440a      	add	r2, r1
   d52a6:	4643      	mov	r3, r8
   d52a8:	e7a8      	b.n	d51fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d52aa:	9906      	ldr	r1, [sp, #24]
   d52ac:	f8cd 8004 	str.w	r8, [sp, #4]
   d52b0:	fb14 f202 	smulbb	r2, r4, r2
   d52b4:	440a      	add	r2, r1
   d52b6:	e7df      	b.n	d5278 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d52b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d52ba:	f8cd 8004 	str.w	r8, [sp, #4]
   d52be:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d52c2:	9a08      	ldr	r2, [sp, #32]
   d52c4:	00e4      	lsls	r4, r4, #3
   d52c6:	440a      	add	r2, r1
   d52c8:	4611      	mov	r1, r2
   d52ca:	9400      	str	r4, [sp, #0]
   d52cc:	69dc      	ldr	r4, [r3, #28]
   d52ce:	4632      	mov	r2, r6
   d52d0:	462b      	mov	r3, r5
   d52d2:	b209      	sxth	r1, r1
   d52d4:	4658      	mov	r0, fp
   d52d6:	47a0      	blx	r4
        endWrite();
   d52d8:	e7be      	b.n	d5258 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d52da:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d52dc:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d52de:	6812      	ldr	r2, [r2, #0]
   d52e0:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d52e2:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d52e4:	b2ff      	uxtb	r7, r7
   d52e6:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d52ea:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d52ee:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d52f0:	789a      	ldrb	r2, [r3, #2]
   d52f2:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d52f4:	78da      	ldrb	r2, [r3, #3]
   d52f6:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d52f8:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d52fa:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d52fe:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d5302:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d5304:	d801      	bhi.n	d530a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d5306:	2c01      	cmp	r4, #1
   d5308:	d957      	bls.n	d53ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d530a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d530e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d5310:	fa0f f38a 	sxth.w	r3, sl
   d5314:	9307      	str	r3, [sp, #28]
        startWrite();
   d5316:	f8db 3000 	ldr.w	r3, [fp]
   d531a:	4658      	mov	r0, fp
   d531c:	695b      	ldr	r3, [r3, #20]
   d531e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5320:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5322:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5326:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5328:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d532c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d532e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5330:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d5332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5334:	429f      	cmp	r7, r3
   d5336:	d28f      	bcs.n	d5258 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5338:	9b07      	ldr	r3, [sp, #28]
   d533a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d533c:	443b      	add	r3, r7
   d533e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d5342:	2200      	movs	r2, #0
   d5344:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5348:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d534a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d534e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5352:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5356:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d5358:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d535a:	9905      	ldr	r1, [sp, #20]
   d535c:	4291      	cmp	r1, r2
   d535e:	d241      	bcs.n	d53e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d5360:	1c5a      	adds	r2, r3, #1
   d5362:	b2d2      	uxtb	r2, r2
   d5364:	075b      	lsls	r3, r3, #29
   d5366:	920c      	str	r2, [sp, #48]	; 0x30
   d5368:	d107      	bne.n	d537a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d536a:	9b06      	ldr	r3, [sp, #24]
   d536c:	9906      	ldr	r1, [sp, #24]
   d536e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d5370:	3301      	adds	r3, #1
   d5372:	b29b      	uxth	r3, r3
   d5374:	f812 9001 	ldrb.w	r9, [r2, r1]
   d5378:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d537a:	f019 0f80 	tst.w	r9, #128	; 0x80
   d537e:	d012      	beq.n	d53a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d5380:	2d01      	cmp	r5, #1
   d5382:	f8db 3000 	ldr.w	r3, [fp]
   d5386:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d538a:	d11a      	bne.n	d53c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d538c:	2c01      	cmp	r4, #1
   d538e:	d118      	bne.n	d53c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d5392:	699b      	ldr	r3, [r3, #24]
   d5394:	4411      	add	r1, r2
   d5396:	9a05      	ldr	r2, [sp, #20]
   d5398:	4411      	add	r1, r2
   d539a:	461e      	mov	r6, r3
   d539c:	4652      	mov	r2, sl
   d539e:	9b04      	ldr	r3, [sp, #16]
   d53a0:	b209      	sxth	r1, r1
   d53a2:	4658      	mov	r0, fp
   d53a4:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d53a6:	9e05      	ldr	r6, [sp, #20]
   d53a8:	3601      	adds	r6, #1
   d53aa:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d53ac:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d53b0:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d53b2:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d53b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d53b8:	e7ce      	b.n	d5358 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d53ba:	2300      	movs	r3, #0
   d53bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d53c0:	e7a9      	b.n	d5316 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53c2:	9805      	ldr	r0, [sp, #20]
   d53c4:	9a08      	ldr	r2, [sp, #32]
   d53c6:	4402      	add	r2, r0
   d53c8:	fb02 1105 	mla	r1, r2, r5, r1
   d53cc:	9a04      	ldr	r2, [sp, #16]
   d53ce:	e9cd 4200 	strd	r4, r2, [sp]
   d53d2:	69db      	ldr	r3, [r3, #28]
   d53d4:	ee18 2a10 	vmov	r2, s16
   d53d8:	461e      	mov	r6, r3
   d53da:	b209      	sxth	r1, r1
   d53dc:	462b      	mov	r3, r5
   d53de:	4658      	mov	r0, fp
   d53e0:	47b0      	blx	r6
   d53e2:	e7e0      	b.n	d53a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d53e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d53e6:	3701      	adds	r7, #1
   d53e8:	4498      	add	r8, r3
   d53ea:	fa5f f888 	uxtb.w	r8, r8
   d53ee:	b2ff      	uxtb	r7, r7
   d53f0:	e79f      	b.n	d5332 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d53f2:	b011      	add	sp, #68	; 0x44
   d53f4:	ecbd 8b02 	vpop	{d8}
   d53f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d53fc:	000d9064 	.word	0x000d9064

000d5400 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d5400:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d5402:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d5404:	b085      	sub	sp, #20
   d5406:	4604      	mov	r4, r0
   d5408:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d540a:	2a00      	cmp	r2, #0
   d540c:	d134      	bne.n	d5478 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d540e:	290a      	cmp	r1, #10
   d5410:	d108      	bne.n	d5424 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d5412:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d5414:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d5416:	7e42      	ldrb	r2, [r0, #25]
   d5418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d541c:	8263      	strh	r3, [r4, #18]
}
   d541e:	2001      	movs	r0, #1
   d5420:	b005      	add	sp, #20
   d5422:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d5424:	290d      	cmp	r1, #13
   d5426:	d0fa      	beq.n	d541e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d5428:	7ee1      	ldrb	r1, [r4, #27]
   d542a:	7e00      	ldrb	r0, [r0, #24]
   d542c:	7e65      	ldrb	r5, [r4, #25]
   d542e:	b171      	cbz	r1, d544e <_ZN12Adafruit_GFX5writeEh+0x4e>
   d5430:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d5434:	2106      	movs	r1, #6
   d5436:	fb11 6100 	smlabb	r1, r1, r0, r6
   d543a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d543e:	42b1      	cmp	r1, r6
   d5440:	bfc1      	itttt	gt
   d5442:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d5446:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d5448:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d544c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d544e:	8ae2      	ldrh	r2, [r4, #22]
   d5450:	9201      	str	r2, [sp, #4]
   d5452:	8aa2      	ldrh	r2, [r4, #20]
   d5454:	9200      	str	r2, [sp, #0]
   d5456:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d545a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d545e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5462:	4620      	mov	r0, r4
   d5464:	f7ff fe5e 	bl	d5124 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d5468:	7e23      	ldrb	r3, [r4, #24]
   d546a:	8a22      	ldrh	r2, [r4, #16]
   d546c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5470:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d5474:	8223      	strh	r3, [r4, #16]
   d5476:	e7d2      	b.n	d541e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d5478:	290a      	cmp	r1, #10
   d547a:	d107      	bne.n	d548c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d547c:	2300      	movs	r3, #0
   d547e:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5480:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d5482:	7e41      	ldrb	r1, [r0, #25]
   d5484:	8a42      	ldrh	r2, [r0, #18]
   d5486:	fb01 2303 	mla	r3, r1, r3, r2
   d548a:	e7c7      	b.n	d541c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d548c:	290d      	cmp	r1, #13
   d548e:	d0c6      	beq.n	d541e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d5490:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d5492:	42a9      	cmp	r1, r5
   d5494:	d3c3      	bcc.n	d541e <_ZN12Adafruit_GFX5writeEh+0x1e>
   d5496:	7a51      	ldrb	r1, [r2, #9]
   d5498:	4299      	cmp	r1, r3
   d549a:	d3c0      	bcc.n	d541e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d549c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d549e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d54a0:	b2ed      	uxtb	r5, r5
   d54a2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d54a6:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d54a8:	b32f      	cbz	r7, d54f6 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d54aa:	78e9      	ldrb	r1, [r5, #3]
   d54ac:	b319      	cbz	r1, d54f6 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d54ae:	7ee1      	ldrb	r1, [r4, #27]
   d54b0:	7e00      	ldrb	r0, [r0, #24]
   d54b2:	7e66      	ldrb	r6, [r4, #25]
   d54b4:	b191      	cbz	r1, d54dc <_ZN12Adafruit_GFX5writeEh+0xdc>
   d54b6:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d54ba:	4439      	add	r1, r7
   d54bc:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d54c0:	fb00 7101 	mla	r1, r0, r1, r7
   d54c4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d54c8:	42b9      	cmp	r1, r7
   d54ca:	dd07      	ble.n	d54dc <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d54cc:	2700      	movs	r7, #0
   d54ce:	8227      	strh	r7, [r4, #16]
   d54d0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d54d4:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d54d6:	fb02 1206 	mla	r2, r2, r6, r1
   d54da:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d54dc:	8ae2      	ldrh	r2, [r4, #22]
   d54de:	9201      	str	r2, [sp, #4]
   d54e0:	8aa2      	ldrh	r2, [r4, #20]
   d54e2:	9200      	str	r2, [sp, #0]
   d54e4:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d54e8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d54ec:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d54f0:	4620      	mov	r0, r4
   d54f2:	f7ff fe17 	bl	d5124 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d54f6:	7929      	ldrb	r1, [r5, #4]
   d54f8:	7e23      	ldrb	r3, [r4, #24]
   d54fa:	8a22      	ldrh	r2, [r4, #16]
   d54fc:	fb01 2303 	mla	r3, r1, r3, r2
   d5500:	e7b8      	b.n	d5474 <_ZN12Adafruit_GFX5writeEh+0x74>

000d5502 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d5502:	2901      	cmp	r1, #1
   d5504:	bf38      	it	cc
   d5506:	2101      	movcc	r1, #1
   d5508:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d550a:	7641      	strb	r1, [r0, #25]
}
   d550c:	4770      	bx	lr
	...

000d5510 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d5510:	b510      	push	{r4, lr}
   d5512:	4b06      	ldr	r3, [pc, #24]	; (d552c <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d5514:	6003      	str	r3, [r0, #0]
   d5516:	4604      	mov	r4, r0
	if (mutex) {
   d5518:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d551a:	b108      	cbz	r0, d5520 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d551c:	f000 fddc 	bl	d60d8 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d5520:	4620      	mov	r0, r4
   d5522:	f000 f8e3 	bl	d56ec <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d5526:	4620      	mov	r0, r4
   d5528:	bd10      	pop	{r4, pc}
   d552a:	bf00      	nop
   d552c:	000d95c4 	.word	0x000d95c4

000d5530 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d5530:	b510      	push	{r4, lr}
   d5532:	4604      	mov	r4, r0
}
   d5534:	f7ff ffec 	bl	d5510 <_ZN16OledWingAdafruitD1Ev>
   d5538:	4620      	mov	r0, r4
   d553a:	2170      	movs	r1, #112	; 0x70
   d553c:	f002 fae9 	bl	d7b12 <_ZdlPvj>
   d5540:	4620      	mov	r0, r4
   d5542:	bd10      	pop	{r4, pc}

000d5544 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d5544:	b530      	push	{r4, r5, lr}
   d5546:	b085      	sub	sp, #20
   d5548:	4604      	mov	r4, r0
   d554a:	460d      	mov	r5, r1
   d554c:	f002 fab4 	bl	d7ab8 <_Z19__fetch_global_Wirev>
   d5550:	4a10      	ldr	r2, [pc, #64]	; (d5594 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d5552:	4911      	ldr	r1, [pc, #68]	; (d5598 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d5554:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d5558:	f04f 32ff 	mov.w	r2, #4294967295
   d555c:	2180      	movs	r1, #128	; 0x80
   d555e:	4603      	mov	r3, r0
   d5560:	9200      	str	r2, [sp, #0]
   d5562:	4620      	mov	r0, r4
   d5564:	2220      	movs	r2, #32
   d5566:	f000 f947 	bl	d57f8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d556a:	4b0c      	ldr	r3, [pc, #48]	; (d559c <_ZN16OledWingAdafruitC1Ei+0x58>)
   d556c:	6023      	str	r3, [r4, #0]
   d556e:	2300      	movs	r3, #0
   d5570:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d5574:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5578:	f000 f85e 	bl	d5638 <_ZN8DebounceC1Ev>
   d557c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5580:	f000 f85a 	bl	d5638 <_ZN8DebounceC1Ev>
   d5584:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d5588:	f000 f856 	bl	d5638 <_ZN8DebounceC1Ev>
}
   d558c:	4620      	mov	r0, r4
   d558e:	b005      	add	sp, #20
   d5590:	bd30      	pop	{r4, r5, pc}
   d5592:	bf00      	nop
   d5594:	00061a80 	.word	0x00061a80
   d5598:	000186a0 	.word	0x000186a0
   d559c:	000d95c4 	.word	0x000d95c4

000d55a0 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d55a0:	b513      	push	{r0, r1, r4, lr}
   d55a2:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d55a4:	3050      	adds	r0, #80	; 0x50
   d55a6:	f000 fd8f 	bl	d60c8 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d55aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d55ac:	07d9      	lsls	r1, r3, #31
   d55ae:	d505      	bpl.n	d55bc <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d55b0:	2202      	movs	r2, #2
   d55b2:	2104      	movs	r1, #4
   d55b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d55b8:	f000 f852 	bl	d5660 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d55bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d55be:	079a      	lsls	r2, r3, #30
   d55c0:	d505      	bpl.n	d55ce <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d55c2:	2200      	movs	r2, #0
   d55c4:	2103      	movs	r1, #3
   d55c6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d55ca:	f000 f849 	bl	d5660 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d55ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d55d0:	075b      	lsls	r3, r3, #29
   d55d2:	d505      	bpl.n	d55e0 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d55d4:	2202      	movs	r2, #2
   d55d6:	4611      	mov	r1, r2
   d55d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d55dc:	f000 f840 	bl	d5660 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d55e0:	2301      	movs	r3, #1
   d55e2:	9300      	str	r3, [sp, #0]
   d55e4:	223c      	movs	r2, #60	; 0x3c
   d55e6:	2102      	movs	r1, #2
   d55e8:	4620      	mov	r0, r4
   d55ea:	f000 fa05 	bl	d59f8 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d55ee:	b002      	add	sp, #8
   d55f0:	bd10      	pop	{r4, pc}

000d55f2 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d55f2:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d55f4:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d55f6:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d55f8:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d55fa:	d502      	bpl.n	d5602 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d55fc:	3058      	adds	r0, #88	; 0x58
   d55fe:	f000 f83c 	bl	d567a <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d5602:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5604:	079a      	lsls	r2, r3, #30
   d5606:	d503      	bpl.n	d5610 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d5608:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d560c:	f000 f835 	bl	d567a <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d5610:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5612:	075b      	lsls	r3, r3, #29
   d5614:	d505      	bpl.n	d5622 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d5616:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d561a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d561e:	f000 b82c 	b.w	d567a <_ZN8Debounce6updateEv>
}
   d5622:	bd10      	pop	{r4, pc}

000d5624 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d5624:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   d5626:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d5628:	f013 0001 	ands.w	r0, r3, #1
   d562c:	d003      	beq.n	d5636 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   d562e:	f102 0058 	add.w	r0, r2, #88	; 0x58
   d5632:	f000 b852 	b.w	d56da <_ZN8Debounce4fellEv>
}
   d5636:	4770      	bx	lr

000d5638 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d5638:	2100      	movs	r1, #0
   d563a:	220a      	movs	r2, #10
   d563c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d5640:	4770      	bx	lr

000d5642 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d5642:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d5644:	b510      	push	{r4, lr}
   d5646:	4604      	mov	r4, r0
    this->pin = pin;
   d5648:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d564a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d564c:	b288      	uxth	r0, r1
   d564e:	f002 f9cb 	bl	d79e8 <digitalRead>
   d5652:	b108      	cbz	r0, d5658 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d5654:	2303      	movs	r3, #3
   d5656:	71a3      	strb	r3, [r4, #6]
   d5658:	f000 fd2e 	bl	d60b8 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d565c:	6020      	str	r0, [r4, #0]
#endif
}
   d565e:	bd10      	pop	{r4, pc}

000d5660 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d5660:	b538      	push	{r3, r4, r5, lr}
   d5662:	460c      	mov	r4, r1
   d5664:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d5666:	4611      	mov	r1, r2
   d5668:	b2a0      	uxth	r0, r4
   d566a:	f002 f993 	bl	d7994 <pinMode>
  
  this->attach(pin);
   d566e:	4621      	mov	r1, r4
   d5670:	4628      	mov	r0, r5
}
   d5672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d5676:	f7ff bfe4 	b.w	d5642 <_ZN8Debounce6attachEi>

000d567a <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d567a:	b538      	push	{r3, r4, r5, lr}
   d567c:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d567e:	79c0      	ldrb	r0, [r0, #7]
   d5680:	f002 f9b2 	bl	d79e8 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d5684:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d5686:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d5688:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d568c:	bf18      	it	ne
   d568e:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d5690:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d5694:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d5696:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d5698:	d00a      	beq.n	d56b0 <_ZN8Debounce6updateEv+0x36>
   d569a:	f000 fd0d 	bl	d60b8 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d569e:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d56a0:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d56a2:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d56a6:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d56a8:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d56aa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d56ae:	bd38      	pop	{r3, r4, r5, pc}
   d56b0:	f000 fd02 	bl	d60b8 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d56b4:	6823      	ldr	r3, [r4, #0]
   d56b6:	1ac0      	subs	r0, r0, r3
   d56b8:	88a3      	ldrh	r3, [r4, #4]
   d56ba:	4298      	cmp	r0, r3
   d56bc:	d3f4      	bcc.n	d56a8 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d56be:	79a3      	ldrb	r3, [r4, #6]
   d56c0:	f003 0301 	and.w	r3, r3, #1
   d56c4:	42ab      	cmp	r3, r5
   d56c6:	d0ef      	beq.n	d56a8 <_ZN8Debounce6updateEv+0x2e>
   d56c8:	f000 fcf6 	bl	d60b8 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d56cc:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d56ce:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d56d0:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d56d4:	f043 0308 	orr.w	r3, r3, #8
   d56d8:	e7e5      	b.n	d56a6 <_ZN8Debounce6updateEv+0x2c>

000d56da <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   d56da:	7980      	ldrb	r0, [r0, #6]
   d56dc:	f000 0009 	and.w	r0, r0, #9
   d56e0:	f1a0 0308 	sub.w	r3, r0, #8
   d56e4:	4258      	negs	r0, r3
   d56e6:	4158      	adcs	r0, r3
   d56e8:	4770      	bx	lr
	...

000d56ec <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d56ec:	b510      	push	{r4, lr}
   d56ee:	4b04      	ldr	r3, [pc, #16]	; (d5700 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d56f0:	6003      	str	r3, [r0, #0]
   d56f2:	4604      	mov	r4, r0
  if(buffer) {
   d56f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d56f6:	b108      	cbz	r0, d56fc <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d56f8:	f000 ff0a 	bl	d6510 <free>
    buffer = NULL;
  }
}
   d56fc:	4620      	mov	r0, r4
   d56fe:	bd10      	pop	{r4, pc}
   d5700:	000d9ad0 	.word	0x000d9ad0

000d5704 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d5704:	b510      	push	{r4, lr}
   d5706:	4604      	mov	r4, r0
}
   d5708:	f7ff fff0 	bl	d56ec <_ZN16Adafruit_SSD1306D1Ev>
   d570c:	4620      	mov	r0, r4
   d570e:	2150      	movs	r1, #80	; 0x50
   d5710:	f002 f9ff 	bl	d7b12 <_ZdlPvj>
   d5714:	4620      	mov	r0, r4
   d5716:	bd10      	pop	{r4, pc}

000d5718 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5718:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d571a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d571c:	db4b      	blt.n	d57b6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d571e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d5722:	428c      	cmp	r4, r1
   d5724:	dd47      	ble.n	d57b6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5726:	2a00      	cmp	r2, #0
   d5728:	db45      	blt.n	d57b6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d572a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d572e:	4294      	cmp	r4, r2
   d5730:	dd41      	ble.n	d57b6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d5732:	7e84      	ldrb	r4, [r0, #26]
   d5734:	2c02      	cmp	r4, #2
   d5736:	d01f      	beq.n	d5778 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d5738:	2c03      	cmp	r4, #3
   d573a:	d026      	beq.n	d578a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d573c:	2c01      	cmp	r4, #1
   d573e:	d104      	bne.n	d574a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d5740:	8904      	ldrh	r4, [r0, #8]
   d5742:	43d2      	mvns	r2, r2
   d5744:	4414      	add	r4, r2
      break;
   d5746:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d5748:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d574a:	2b01      	cmp	r3, #1
   d574c:	d023      	beq.n	d5796 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d574e:	2b02      	cmp	r3, #2
   d5750:	d032      	beq.n	d57b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d5752:	bb83      	cbnz	r3, d57b6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d5754:	2a00      	cmp	r2, #0
   d5756:	4613      	mov	r3, r2
   d5758:	8904      	ldrh	r4, [r0, #8]
   d575a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d575c:	bfb8      	it	lt
   d575e:	1dd3      	addlt	r3, r2, #7
   d5760:	10db      	asrs	r3, r3, #3
   d5762:	fb13 1104 	smlabb	r1, r3, r4, r1
   d5766:	f002 0207 	and.w	r2, r2, #7
   d576a:	2301      	movs	r3, #1
   d576c:	4093      	lsls	r3, r2
   d576e:	5c42      	ldrb	r2, [r0, r1]
   d5770:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d5774:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d5776:	e01e      	b.n	d57b6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d5778:	8904      	ldrh	r4, [r0, #8]
   d577a:	43c9      	mvns	r1, r1
   d577c:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d577e:	8944      	ldrh	r4, [r0, #10]
   d5780:	43d2      	mvns	r2, r2
   d5782:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d5784:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d5786:	b212      	sxth	r2, r2
      break;
   d5788:	e7df      	b.n	d574a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d578a:	8944      	ldrh	r4, [r0, #10]
   d578c:	43c9      	mvns	r1, r1
   d578e:	440c      	add	r4, r1
      break;
   d5790:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d5792:	b222      	sxth	r2, r4
      break;
   d5794:	e7d9      	b.n	d574a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d5796:	2a00      	cmp	r2, #0
   d5798:	8904      	ldrh	r4, [r0, #8]
   d579a:	4613      	mov	r3, r2
   d579c:	bfb8      	it	lt
   d579e:	1dd3      	addlt	r3, r2, #7
   d57a0:	10db      	asrs	r3, r3, #3
   d57a2:	fb13 1104 	smlabb	r1, r3, r4, r1
   d57a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d57a8:	f002 0007 	and.w	r0, r2, #7
   d57ac:	2201      	movs	r2, #1
   d57ae:	4082      	lsls	r2, r0
   d57b0:	5c58      	ldrb	r0, [r3, r1]
   d57b2:	4302      	orrs	r2, r0
   d57b4:	545a      	strb	r2, [r3, r1]
}
   d57b6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d57b8:	2a00      	cmp	r2, #0
   d57ba:	4613      	mov	r3, r2
   d57bc:	8904      	ldrh	r4, [r0, #8]
   d57be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d57c0:	bfb8      	it	lt
   d57c2:	1dd3      	addlt	r3, r2, #7
   d57c4:	10db      	asrs	r3, r3, #3
   d57c6:	fb13 1104 	smlabb	r1, r3, r4, r1
   d57ca:	f002 0207 	and.w	r2, r2, #7
   d57ce:	2301      	movs	r3, #1
   d57d0:	fa03 f202 	lsl.w	r2, r3, r2
   d57d4:	5c43      	ldrb	r3, [r0, r1]
   d57d6:	405a      	eors	r2, r3
   d57d8:	e7cc      	b.n	d5774 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d57da <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d57da:	b510      	push	{r4, lr}
   d57dc:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d57de:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d57e2:	2101      	movs	r1, #1
   d57e4:	b280      	uxth	r0, r0
   d57e6:	f002 f8e6 	bl	d79b6 <digitalWrite>
   d57ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d57ec:	b118      	cbz	r0, d57f6 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d57ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d57f2:	f000 bf1c 	b.w	d662e <_ZN8SPIClass14endTransactionEv>
}
   d57f6:	bd10      	pop	{r4, pc}

000d57f8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d57f8:	b570      	push	{r4, r5, r6, lr}
   d57fa:	4604      	mov	r4, r0
   d57fc:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d57fe:	2600      	movs	r6, #0
   d5800:	f7ff fc26 	bl	d5050 <_ZN12Adafruit_GFXC1Ess>
   d5804:	4b11      	ldr	r3, [pc, #68]	; (d584c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d5806:	6023      	str	r3, [r4, #0]
   d5808:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d580a:	b915      	cbnz	r5, d5812 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d580c:	f002 f954 	bl	d7ab8 <_Z19__fetch_global_Wirev>
   d5810:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d5812:	23ff      	movs	r3, #255	; 0xff
   d5814:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d5818:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d581c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d5820:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d5824:	4b0a      	ldr	r3, [pc, #40]	; (d5850 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d5826:	63a3      	str	r3, [r4, #56]	; 0x38
   d5828:	2301      	movs	r3, #1
   d582a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d582e:	9b05      	ldr	r3, [sp, #20]
   d5830:	64a3      	str	r3, [r4, #72]	; 0x48
   d5832:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5836:	9b06      	ldr	r3, [sp, #24]
   d5838:	86a2      	strh	r2, [r4, #52]	; 0x34
   d583a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d583e:	6426      	str	r6, [r4, #64]	; 0x40
   d5840:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d5844:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d5846:	4620      	mov	r0, r4
   d5848:	bd70      	pop	{r4, r5, r6, pc}
   d584a:	bf00      	nop
   d584c:	000d9ad0 	.word	0x000d9ad0
   d5850:	000d961c 	.word	0x000d961c

000d5854 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d5854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5856:	4604      	mov	r4, r0
  if(wire) { // I2C
   d5858:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d585a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d585c:	b190      	cbz	r0, d5884 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d585e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5862:	f001 fc81 	bl	d7168 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5866:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5868:	6803      	ldr	r3, [r0, #0]
   d586a:	2100      	movs	r1, #0
   d586c:	689b      	ldr	r3, [r3, #8]
   d586e:	4798      	blx	r3
    WIRE_WRITE(c);
   d5870:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5872:	6803      	ldr	r3, [r0, #0]
   d5874:	4629      	mov	r1, r5
   d5876:	689b      	ldr	r3, [r3, #8]
   d5878:	4798      	blx	r3
    wire->endTransmission();
   d587a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d587c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d5880:	f001 bc79 	b.w	d7176 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5884:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d5888:	4601      	mov	r1, r0
   d588a:	b298      	uxth	r0, r3
   d588c:	f002 f893 	bl	d79b6 <digitalWrite>
  if(spi) {
   d5890:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5892:	b120      	cbz	r0, d589e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d5894:	4629      	mov	r1, r5
}
   d5896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d589a:	f000 bf4f 	b.w	d673c <_ZN8SPIClass8transferEh>
   d589e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d58a0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d58a2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d58a6:	ea05 0107 	and.w	r1, r5, r7
   d58aa:	b280      	uxth	r0, r0
   d58ac:	f002 f883 	bl	d79b6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d58b0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d58b4:	2101      	movs	r1, #1
   d58b6:	b280      	uxth	r0, r0
   d58b8:	f002 f87d 	bl	d79b6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d58bc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d58c0:	2100      	movs	r1, #0
   d58c2:	b280      	uxth	r0, r0
   d58c4:	f002 f877 	bl	d79b6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d58c8:	3e01      	subs	r6, #1
   d58ca:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d58ce:	d1e8      	bne.n	d58a2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d58d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58d2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d58d2:	b538      	push	{r3, r4, r5, lr}
   d58d4:	4604      	mov	r4, r0
  TRANSACTION_START
   d58d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d58d8:	460d      	mov	r5, r1
  TRANSACTION_START
   d58da:	b180      	cbz	r0, d58fe <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d58dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d58de:	f001 fc35 	bl	d714c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d58e2:	2d00      	cmp	r5, #0
   d58e4:	4620      	mov	r0, r4
   d58e6:	bf14      	ite	ne
   d58e8:	21a7      	movne	r1, #167	; 0xa7
   d58ea:	21a6      	moveq	r1, #166	; 0xa6
   d58ec:	f7ff ffb2 	bl	d5854 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d58f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d58f2:	b188      	cbz	r0, d5918 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d58f4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d58f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d58fa:	f001 bc27 	b.w	d714c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d58fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5900:	b118      	cbz	r0, d590a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d5902:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5906:	f000 feab 	bl	d6660 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d590a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d590e:	2100      	movs	r1, #0
   d5910:	b280      	uxth	r0, r0
   d5912:	f002 f850 	bl	d79b6 <digitalWrite>
   d5916:	e7e4      	b.n	d58e2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d5918:	4620      	mov	r0, r4
}
   d591a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d591e:	f7ff bf5c 	b.w	d57da <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d5922 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d5922:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5926:	4604      	mov	r4, r0
  if(wire) { // I2C
   d5928:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d592a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d592c:	188f      	adds	r7, r1, r2
   d592e:	b340      	cbz	r0, d5982 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d5930:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5934:	f001 fc18 	bl	d7168 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5938:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d593a:	6803      	ldr	r3, [r0, #0]
   d593c:	2100      	movs	r1, #0
   d593e:	689b      	ldr	r3, [r3, #8]
   d5940:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5942:	2601      	movs	r6, #1
    while(n--) {
   d5944:	42bd      	cmp	r5, r7
   d5946:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5948:	d017      	beq.n	d597a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d594a:	2e1f      	cmp	r6, #31
   d594c:	d90c      	bls.n	d5968 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d594e:	f001 fc12 	bl	d7176 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5952:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5956:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5958:	f001 fc06 	bl	d7168 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d595c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d595e:	6803      	ldr	r3, [r0, #0]
   d5960:	2100      	movs	r1, #0
   d5962:	689b      	ldr	r3, [r3, #8]
   d5964:	4798      	blx	r3
        bytesOut = 1;
   d5966:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5968:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d596a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d596e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5970:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5972:	689b      	ldr	r3, [r3, #8]
   d5974:	4798      	blx	r3
      bytesOut++;
   d5976:	b2f6      	uxtb	r6, r6
    while(n--) {
   d5978:	e7e4      	b.n	d5944 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d597a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d597e:	f001 bbfa 	b.w	d7176 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5982:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d5986:	4601      	mov	r1, r0
   d5988:	b298      	uxth	r0, r3
   d598a:	f002 f814 	bl	d79b6 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d598e:	42af      	cmp	r7, r5
   d5990:	d022      	beq.n	d59d8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d5992:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5994:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5998:	b118      	cbz	r0, d59a2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d599a:	4649      	mov	r1, r9
   d599c:	f000 fece 	bl	d673c <_ZN8SPIClass8transferEh>
   d59a0:	e7f5      	b.n	d598e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d59a2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d59a4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d59a8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d59ac:	ea09 0108 	and.w	r1, r9, r8
   d59b0:	b280      	uxth	r0, r0
   d59b2:	f002 f800 	bl	d79b6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d59b6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d59ba:	2101      	movs	r1, #1
   d59bc:	b280      	uxth	r0, r0
   d59be:	f001 fffa 	bl	d79b6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d59c2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d59c6:	2100      	movs	r1, #0
   d59c8:	b280      	uxth	r0, r0
   d59ca:	f001 fff4 	bl	d79b6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d59ce:	3e01      	subs	r6, #1
   d59d0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d59d4:	d1e8      	bne.n	d59a8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d59d6:	e7da      	b.n	d598e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d59d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d59dc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d59dc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d59e0:	1dda      	adds	r2, r3, #7
   d59e2:	bf48      	it	mi
   d59e4:	f103 020e 	addmi.w	r2, r3, #14
   d59e8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d59ec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d59ee:	10d2      	asrs	r2, r2, #3
   d59f0:	435a      	muls	r2, r3
   d59f2:	2100      	movs	r1, #0
   d59f4:	f002 bfd8 	b.w	d89a8 <memset>

000d59f8 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d59f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d59fc:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d59fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d5a00:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5a04:	4604      	mov	r4, r0
   d5a06:	460f      	mov	r7, r1
   d5a08:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5a0a:	b1b3      	cbz	r3, d5a3a <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	f7ff ffe5 	bl	d59dc <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d5a12:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d5a16:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d5a1a:	2820      	cmp	r0, #32
   d5a1c:	dc1f      	bgt.n	d5a5e <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5a1e:	2320      	movs	r3, #32
   d5a20:	2201      	movs	r2, #1
   d5a22:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d5a26:	3820      	subs	r0, #32
   d5a28:	2373      	movs	r3, #115	; 0x73
   d5a2a:	3973      	subs	r1, #115	; 0x73
   d5a2c:	9300      	str	r3, [sp, #0]
   d5a2e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5a32:	4b89      	ldr	r3, [pc, #548]	; (d5c58 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d5a34:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d5a38:	e01f      	b.n	d5a7a <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5a3a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5a3e:	1dd8      	adds	r0, r3, #7
   d5a40:	bf48      	it	mi
   d5a42:	f103 000e 	addmi.w	r0, r3, #14
   d5a46:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d5a4a:	10c0      	asrs	r0, r0, #3
   d5a4c:	4358      	muls	r0, r3
   d5a4e:	f000 fd57 	bl	d6500 <malloc>
   d5a52:	62e0      	str	r0, [r4, #44]	; 0x2c
   d5a54:	2800      	cmp	r0, #0
   d5a56:	d1d9      	bne.n	d5a0c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d5a58:	b004      	add	sp, #16
   d5a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d5a5e:	2340      	movs	r3, #64	; 0x40
   d5a60:	f04f 0c01 	mov.w	ip, #1
   d5a64:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d5a68:	2352      	movs	r3, #82	; 0x52
   d5a6a:	3840      	subs	r0, #64	; 0x40
   d5a6c:	3952      	subs	r1, #82	; 0x52
   d5a6e:	9300      	str	r3, [sp, #0]
   d5a70:	4b7a      	ldr	r3, [pc, #488]	; (d5c5c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d5a72:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5a76:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5a7a:	f340 024f 	sbfx	r2, r0, #1, #16
   d5a7e:	f341 014f 	sbfx	r1, r1, #1, #16
   d5a82:	4620      	mov	r0, r4
   d5a84:	f7ff fafa 	bl	d507c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d5a88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d5a8a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d5a8e:	2800      	cmp	r0, #0
   d5a90:	d078      	beq.n	d5b84 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5a92:	2d00      	cmp	r5, #0
   d5a94:	d174      	bne.n	d5b80 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d5a96:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5a9a:	2b20      	cmp	r3, #32
   d5a9c:	bf0c      	ite	eq
   d5a9e:	253c      	moveq	r5, #60	; 0x3c
   d5aa0:	253d      	movne	r5, #61	; 0x3d
   d5aa2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d5aa6:	f1b8 0f00 	cmp.w	r8, #0
   d5aaa:	d001      	beq.n	d5ab0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5aac:	f001 fb52 	bl	d7154 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5ab0:	b1fe      	cbz	r6, d5af2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d5ab2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5ab6:	2800      	cmp	r0, #0
   d5ab8:	db1b      	blt.n	d5af2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d5aba:	2101      	movs	r1, #1
   d5abc:	b280      	uxth	r0, r0
   d5abe:	f001 ff69 	bl	d7994 <pinMode>
    digitalWrite(rstPin, HIGH);
   d5ac2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5ac6:	2101      	movs	r1, #1
   d5ac8:	b280      	uxth	r0, r0
   d5aca:	f001 ff74 	bl	d79b6 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d5ace:	2001      	movs	r0, #1
   d5ad0:	f001 f8ba 	bl	d6c48 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5ad4:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5ad8:	2100      	movs	r1, #0
   d5ada:	b280      	uxth	r0, r0
   d5adc:	f001 ff6b 	bl	d79b6 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5ae0:	200a      	movs	r0, #10
   d5ae2:	f001 f8b1 	bl	d6c48 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d5ae6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5aea:	2101      	movs	r1, #1
   d5aec:	b280      	uxth	r0, r0
   d5aee:	f001 ff62 	bl	d79b6 <digitalWrite>
  TRANSACTION_START
   d5af2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5af4:	2800      	cmp	r0, #0
   d5af6:	d074      	beq.n	d5be2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d5af8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5afa:	f001 fb27 	bl	d714c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d5afe:	2204      	movs	r2, #4
   d5b00:	4957      	ldr	r1, [pc, #348]	; (d5c60 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d5b02:	4620      	mov	r0, r4
   d5b04:	f7ff ff0d 	bl	d5922 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d5b08:	7aa1      	ldrb	r1, [r4, #10]
   d5b0a:	3901      	subs	r1, #1
   d5b0c:	b2c9      	uxtb	r1, r1
   d5b0e:	4620      	mov	r0, r4
   d5b10:	f7ff fea0 	bl	d5854 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d5b14:	4953      	ldr	r1, [pc, #332]	; (d5c64 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d5b16:	2204      	movs	r2, #4
   d5b18:	4620      	mov	r0, r4
   d5b1a:	f7ff ff02 	bl	d5922 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d5b1e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5b22:	2b01      	cmp	r3, #1
   d5b24:	bf0c      	ite	eq
   d5b26:	2110      	moveq	r1, #16
   d5b28:	2114      	movne	r1, #20
   d5b2a:	4620      	mov	r0, r4
   d5b2c:	f7ff fe92 	bl	d5854 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d5b30:	2204      	movs	r2, #4
   d5b32:	494d      	ldr	r1, [pc, #308]	; (d5c68 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5b34:	4620      	mov	r0, r4
   d5b36:	f7ff fef4 	bl	d5922 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d5b3a:	68a3      	ldr	r3, [r4, #8]
   d5b3c:	4a4b      	ldr	r2, [pc, #300]	; (d5c6c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d5b3e:	4293      	cmp	r3, r2
   d5b40:	d15c      	bne.n	d5bfc <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d5b42:	494b      	ldr	r1, [pc, #300]	; (d5c70 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d5b44:	2204      	movs	r2, #4
   d5b46:	4620      	mov	r0, r4
   d5b48:	f7ff feeb 	bl	d5922 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d5b4c:	21d9      	movs	r1, #217	; 0xd9
   d5b4e:	4620      	mov	r0, r4
   d5b50:	f7ff fe80 	bl	d5854 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d5b54:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5b58:	2b01      	cmp	r3, #1
   d5b5a:	bf0c      	ite	eq
   d5b5c:	2122      	moveq	r1, #34	; 0x22
   d5b5e:	21f1      	movne	r1, #241	; 0xf1
   d5b60:	4620      	mov	r0, r4
   d5b62:	f7ff fe77 	bl	d5854 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d5b66:	4620      	mov	r0, r4
   d5b68:	4942      	ldr	r1, [pc, #264]	; (d5c74 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d5b6a:	2206      	movs	r2, #6
   d5b6c:	f7ff fed9 	bl	d5922 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d5b70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5b72:	2800      	cmp	r0, #0
   d5b74:	d063      	beq.n	d5c3e <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d5b76:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5b78:	f001 fae8 	bl	d714c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d5b7c:	2001      	movs	r0, #1
   d5b7e:	e76b      	b.n	d5a58 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5b80:	b26d      	sxtb	r5, r5
   d5b82:	e78e      	b.n	d5aa2 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5b84:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5b88:	2101      	movs	r1, #1
   d5b8a:	b280      	uxth	r0, r0
   d5b8c:	f001 ff02 	bl	d7994 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d5b90:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5b94:	2101      	movs	r1, #1
   d5b96:	b280      	uxth	r0, r0
   d5b98:	f001 fefc 	bl	d7994 <pinMode>
    SSD1306_DESELECT
   d5b9c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5ba0:	2101      	movs	r1, #1
   d5ba2:	b280      	uxth	r0, r0
   d5ba4:	f001 ff07 	bl	d79b6 <digitalWrite>
    if(spi) { // Hardware SPI
   d5ba8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d5baa:	b13d      	cbz	r5, d5bbc <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5bac:	f1b8 0f00 	cmp.w	r8, #0
   d5bb0:	f43f af7e 	beq.w	d5ab0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5bb4:	4628      	mov	r0, r5
   d5bb6:	f000 fd29 	bl	d660c <_ZN8SPIClass5beginEv>
   d5bba:	e779      	b.n	d5ab0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5bbc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5bc0:	2101      	movs	r1, #1
   d5bc2:	b280      	uxth	r0, r0
   d5bc4:	f001 fee6 	bl	d7994 <pinMode>
      pinMode(clkPin , OUTPUT);
   d5bc8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5bcc:	2101      	movs	r1, #1
   d5bce:	b280      	uxth	r0, r0
   d5bd0:	f001 fee0 	bl	d7994 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5bd4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5bd8:	4629      	mov	r1, r5
   d5bda:	b280      	uxth	r0, r0
   d5bdc:	f001 feeb 	bl	d79b6 <digitalWrite>
   d5be0:	e766      	b.n	d5ab0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d5be2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5be4:	b118      	cbz	r0, d5bee <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d5be6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5bea:	f000 fd39 	bl	d6660 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5bee:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5bf2:	2100      	movs	r1, #0
   d5bf4:	b280      	uxth	r0, r0
   d5bf6:	f001 fede 	bl	d79b6 <digitalWrite>
   d5bfa:	e780      	b.n	d5afe <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d5bfc:	4a1e      	ldr	r2, [pc, #120]	; (d5c78 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d5bfe:	4293      	cmp	r3, r2
   d5c00:	d10e      	bne.n	d5c20 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d5c02:	491e      	ldr	r1, [pc, #120]	; (d5c7c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d5c04:	2203      	movs	r2, #3
   d5c06:	4620      	mov	r0, r4
   d5c08:	f7ff fe8b 	bl	d5922 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d5c0c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5c10:	2b01      	cmp	r3, #1
   d5c12:	bf0c      	ite	eq
   d5c14:	219f      	moveq	r1, #159	; 0x9f
   d5c16:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5c18:	4620      	mov	r0, r4
   d5c1a:	f7ff fe1b 	bl	d5854 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d5c1e:	e795      	b.n	d5b4c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d5c20:	4a17      	ldr	r2, [pc, #92]	; (d5c80 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d5c22:	4293      	cmp	r3, r2
   d5c24:	d192      	bne.n	d5b4c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d5c26:	4917      	ldr	r1, [pc, #92]	; (d5c84 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d5c28:	2203      	movs	r2, #3
   d5c2a:	4620      	mov	r0, r4
   d5c2c:	f7ff fe79 	bl	d5922 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5c30:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5c34:	2b01      	cmp	r3, #1
   d5c36:	bf0c      	ite	eq
   d5c38:	2110      	moveq	r1, #16
   d5c3a:	21af      	movne	r1, #175	; 0xaf
   d5c3c:	e7ec      	b.n	d5c18 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d5c3e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5c42:	2101      	movs	r1, #1
   d5c44:	b280      	uxth	r0, r0
   d5c46:	f001 feb6 	bl	d79b6 <digitalWrite>
   d5c4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5c4c:	2800      	cmp	r0, #0
   d5c4e:	d095      	beq.n	d5b7c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5c50:	f000 fced 	bl	d662e <_ZN8SPIClass14endTransactionEv>
   d5c54:	e792      	b.n	d5b7c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5c56:	bf00      	nop
   d5c58:	000d98e8 	.word	0x000d98e8
   d5c5c:	000d9628 	.word	0x000d9628
   d5c60:	000d9b30 	.word	0x000d9b30
   d5c64:	000d9b34 	.word	0x000d9b34
   d5c68:	000d9b38 	.word	0x000d9b38
   d5c6c:	00200080 	.word	0x00200080
   d5c70:	000d9b42 	.word	0x000d9b42
   d5c74:	000d9b3c 	.word	0x000d9b3c
   d5c78:	00400080 	.word	0x00400080
   d5c7c:	000d9b46 	.word	0x000d9b46
   d5c80:	00100060 	.word	0x00100060
   d5c84:	000d9b49 	.word	0x000d9b49

000d5c88 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5c88:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5c8a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5c8c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5c90:	db3d      	blt.n	d5d0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5c92:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5c96:	4294      	cmp	r4, r2
   d5c98:	dd39      	ble.n	d5d0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d5c9a:	2900      	cmp	r1, #0
      w += x;
   d5c9c:	bfbe      	ittt	lt
   d5c9e:	185b      	addlt	r3, r3, r1
   d5ca0:	b21b      	sxthlt	r3, r3
      x  = 0;
   d5ca2:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5ca4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5ca8:	18ce      	adds	r6, r1, r3
   d5caa:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5cac:	bfc4      	itt	gt
   d5cae:	1a63      	subgt	r3, r4, r1
   d5cb0:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d5cb2:	2b00      	cmp	r3, #0
   d5cb4:	dd2b      	ble.n	d5d0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d5cb6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5cb8:	10d6      	asrs	r6, r2, #3
   d5cba:	fb14 1106 	smlabb	r1, r4, r6, r1
   d5cbe:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d5cc0:	f002 0007 	and.w	r0, r2, #7
   d5cc4:	2201      	movs	r2, #1
   d5cc6:	4082      	lsls	r2, r0
      switch(color) {
   d5cc8:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d5cca:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5ccc:	d016      	beq.n	d5cfc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d5cce:	2d02      	cmp	r5, #2
   d5cd0:	d00b      	beq.n	d5cea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d5cd2:	b9e5      	cbnz	r5, d5d0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5cd4:	43d2      	mvns	r2, r2
   d5cd6:	b2d2      	uxtb	r2, r2
   d5cd8:	440b      	add	r3, r1
   d5cda:	4299      	cmp	r1, r3
   d5cdc:	d017      	beq.n	d5d0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5cde:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5ce2:	4010      	ands	r0, r2
   d5ce4:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5ce8:	e7f7      	b.n	d5cda <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d5cea:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5cec:	4299      	cmp	r1, r3
   d5cee:	d00e      	beq.n	d5d0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5cf0:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5cf4:	4050      	eors	r0, r2
   d5cf6:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5cfa:	e7f7      	b.n	d5cec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5cfc:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d5cfe:	4299      	cmp	r1, r3
   d5d00:	d005      	beq.n	d5d0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5d02:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5d06:	4310      	orrs	r0, r2
   d5d08:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5d0c:	e7f7      	b.n	d5cfe <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d5d0e:	bd70      	pop	{r4, r5, r6, pc}

000d5d10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5d10:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5d12:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5d14:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5d18:	db76      	blt.n	d5e08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d5d1a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d5d1e:	42a9      	cmp	r1, r5
   d5d20:	da72      	bge.n	d5e08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d5d22:	2a00      	cmp	r2, #0
      __h += __y;
   d5d24:	bfbc      	itt	lt
   d5d26:	18d2      	addlt	r2, r2, r3
   d5d28:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5d2a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d5d2e:	bfb8      	it	lt
   d5d30:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5d32:	18d7      	adds	r7, r2, r3
   d5d34:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5d36:	bfc4      	itt	gt
   d5d38:	1aa3      	subgt	r3, r4, r2
   d5d3a:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5d3c:	2b00      	cmp	r3, #0
   d5d3e:	dd63      	ble.n	d5e08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5d40:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5d44:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5d46:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d5d4a:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d5d4e:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5d50:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5d54:	d023      	beq.n	d5d9e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5d56:	f1c2 0208 	rsb	r2, r2, #8
   d5d5a:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5d5c:	4d2c      	ldr	r5, [pc, #176]	; (d5e10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5d5e:	4293      	cmp	r3, r2
   d5d60:	bf3c      	itt	cc
   d5d62:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5d66:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5d6a:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5d6c:	bf3c      	itt	cc
   d5d6e:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d5d72:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d5d76:	2e01      	cmp	r6, #1
   d5d78:	d007      	beq.n	d5d8a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d5d7a:	2e02      	cmp	r6, #2
   d5d7c:	d02e      	beq.n	d5ddc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d5d7e:	b94e      	cbnz	r6, d5d94 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d5d80:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5d84:	ea2c 0505 	bic.w	r5, ip, r5
   d5d88:	e003      	b.n	d5d92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d5d8a:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5d8e:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d5d92:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d5d94:	4293      	cmp	r3, r2
   d5d96:	d337      	bcc.n	d5e08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d5d98:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5d9c:	440c      	add	r4, r1
        h -= mod;
   d5d9e:	1a9a      	subs	r2, r3, r2
   d5da0:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d5da2:	2a07      	cmp	r2, #7
   d5da4:	d90e      	bls.n	d5dc4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d5da6:	2e02      	cmp	r6, #2
   d5da8:	d11d      	bne.n	d5de6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d5daa:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5dac:	7821      	ldrb	r1, [r4, #0]
   d5dae:	43c9      	mvns	r1, r1
   d5db0:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d5db2:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5db4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d5db8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5dba:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5dbc:	440c      	add	r4, r1
            } while(h >= 8);
   d5dbe:	d8f5      	bhi.n	d5dac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d5dc0:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5dc4:	b302      	cbz	r2, d5e08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5dc6:	4b13      	ldr	r3, [pc, #76]	; (d5e14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5dc8:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5dca:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5dcc:	d019      	beq.n	d5e02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d5dce:	2e02      	cmp	r6, #2
   d5dd0:	d01b      	beq.n	d5e0a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d5dd2:	b9ce      	cbnz	r6, d5e08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5dd4:	7822      	ldrb	r2, [r4, #0]
   d5dd6:	ea22 0303 	bic.w	r3, r2, r3
   d5dda:	e014      	b.n	d5e06 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5ddc:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5de0:	ea85 050c 	eor.w	r5, r5, ip
   d5de4:	e7d5      	b.n	d5d92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d5de6:	2e00      	cmp	r6, #0
   d5de8:	bf14      	ite	ne
   d5dea:	25ff      	movne	r5, #255	; 0xff
   d5dec:	2500      	moveq	r5, #0
   d5dee:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5df0:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d5df2:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5df4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5df8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5dfa:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5dfc:	440c      	add	r4, r1
            } while(h >= 8);
   d5dfe:	d8f7      	bhi.n	d5df0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5e00:	e7de      	b.n	d5dc0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d5e02:	7822      	ldrb	r2, [r4, #0]
   d5e04:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d5e06:	7023      	strb	r3, [r4, #0]
}
   d5e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d5e0a:	7822      	ldrb	r2, [r4, #0]
   d5e0c:	4053      	eors	r3, r2
   d5e0e:	e7fa      	b.n	d5e06 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5e10:	000d9b20 	.word	0x000d9b20
   d5e14:	000d9b28 	.word	0x000d9b28

000d5e18 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5e18:	b470      	push	{r4, r5, r6}
   d5e1a:	4614      	mov	r4, r2
  switch(rotation) {
   d5e1c:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5e1e:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5e22:	2a02      	cmp	r2, #2
   d5e24:	d00d      	beq.n	d5e42 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5e26:	2a03      	cmp	r2, #3
   d5e28:	d018      	beq.n	d5e5c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d5e2a:	2a01      	cmp	r2, #1
   d5e2c:	d111      	bne.n	d5e52 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d5e2e:	8902      	ldrh	r2, [r0, #8]
   d5e30:	43e4      	mvns	r4, r4
   d5e32:	4414      	add	r4, r2
   d5e34:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5e36:	9603      	str	r6, [sp, #12]
   d5e38:	460a      	mov	r2, r1
   d5e3a:	4621      	mov	r1, r4
}
   d5e3c:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5e3e:	f7ff bf67 	b.w	d5d10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d5e42:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5e44:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5e46:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5e48:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d5e4a:	4414      	add	r4, r2
    x -= (w-1);
   d5e4c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d5e4e:	b224      	sxth	r4, r4
    x -= (w-1);
   d5e50:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d5e52:	9603      	str	r6, [sp, #12]
   d5e54:	4622      	mov	r2, r4
}
   d5e56:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5e58:	f7ff bf16 	b.w	d5c88 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d5e5c:	8945      	ldrh	r5, [r0, #10]
   d5e5e:	4419      	add	r1, r3
   d5e60:	1a69      	subs	r1, r5, r1
   d5e62:	b209      	sxth	r1, r1
    break;
   d5e64:	e7e7      	b.n	d5e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5e66 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5e66:	b430      	push	{r4, r5}
   d5e68:	4614      	mov	r4, r2
  switch(rotation) {
   d5e6a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5e6c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d5e70:	2a02      	cmp	r2, #2
   d5e72:	d00d      	beq.n	d5e90 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d5e74:	2a03      	cmp	r2, #3
   d5e76:	d018      	beq.n	d5eaa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d5e78:	2a01      	cmp	r2, #1
   d5e7a:	d111      	bne.n	d5ea0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d5e7c:	18e2      	adds	r2, r4, r3
   d5e7e:	8904      	ldrh	r4, [r0, #8]
   d5e80:	1aa4      	subs	r4, r4, r2
   d5e82:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5e84:	9502      	str	r5, [sp, #8]
   d5e86:	460a      	mov	r2, r1
   d5e88:	4621      	mov	r1, r4
}
   d5e8a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5e8c:	f7ff befc 	b.w	d5c88 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d5e90:	8902      	ldrh	r2, [r0, #8]
   d5e92:	43c9      	mvns	r1, r1
   d5e94:	4411      	add	r1, r2
    y -= (h-1);
   d5e96:	18e2      	adds	r2, r4, r3
   d5e98:	8944      	ldrh	r4, [r0, #10]
   d5e9a:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5e9c:	b209      	sxth	r1, r1
    y -= (h-1);
   d5e9e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d5ea0:	9502      	str	r5, [sp, #8]
   d5ea2:	4622      	mov	r2, r4
}
   d5ea4:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d5ea6:	f7ff bf33 	b.w	d5d10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d5eaa:	8942      	ldrh	r2, [r0, #10]
   d5eac:	43c9      	mvns	r1, r1
   d5eae:	4411      	add	r1, r2
   d5eb0:	b209      	sxth	r1, r1
    break;
   d5eb2:	e7e7      	b.n	d5e84 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5eb4 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5eb8:	4604      	mov	r4, r0
  TRANSACTION_START
   d5eba:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5ebc:	2800      	cmp	r0, #0
   d5ebe:	d042      	beq.n	d5f46 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d5ec0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5ec2:	f001 f943 	bl	d714c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d5ec6:	4947      	ldr	r1, [pc, #284]	; (d5fe4 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5ec8:	2205      	movs	r2, #5
   d5eca:	4620      	mov	r0, r4
   d5ecc:	f7ff fd29 	bl	d5922 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5ed0:	7a21      	ldrb	r1, [r4, #8]
   d5ed2:	3901      	subs	r1, #1
   d5ed4:	4620      	mov	r0, r4
   d5ed6:	b2c9      	uxtb	r1, r1
   d5ed8:	f7ff fcbc 	bl	d5854 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5edc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5ee0:	1dde      	adds	r6, r3, #7
   d5ee2:	bf48      	it	mi
   d5ee4:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5ee8:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5eec:	8923      	ldrh	r3, [r4, #8]
   d5eee:	10f6      	asrs	r6, r6, #3
   d5ef0:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5ef4:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5ef8:	2800      	cmp	r0, #0
   d5efa:	d03a      	beq.n	d5f72 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5efc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5f00:	f001 f932 	bl	d7168 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5f04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5f06:	6803      	ldr	r3, [r0, #0]
   d5f08:	2140      	movs	r1, #64	; 0x40
   d5f0a:	689b      	ldr	r3, [r3, #8]
   d5f0c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5f0e:	2701      	movs	r7, #1
    while(count--) {
   d5f10:	42b5      	cmp	r5, r6
   d5f12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5f14:	d024      	beq.n	d5f60 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d5f16:	2f1f      	cmp	r7, #31
   d5f18:	d90c      	bls.n	d5f34 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d5f1a:	f001 f92c 	bl	d7176 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5f1e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5f22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5f24:	f001 f920 	bl	d7168 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5f28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5f2a:	6803      	ldr	r3, [r0, #0]
   d5f2c:	2140      	movs	r1, #64	; 0x40
   d5f2e:	689b      	ldr	r3, [r3, #8]
   d5f30:	4798      	blx	r3
        bytesOut = 1;
   d5f32:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5f34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5f36:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5f3a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5f3c:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d5f3e:	689b      	ldr	r3, [r3, #8]
   d5f40:	4798      	blx	r3
      bytesOut++;
   d5f42:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5f44:	e7e4      	b.n	d5f10 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5f46:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5f48:	b118      	cbz	r0, d5f52 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d5f4a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5f4e:	f000 fb87 	bl	d6660 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5f52:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5f56:	2100      	movs	r1, #0
   d5f58:	b280      	uxth	r0, r0
   d5f5a:	f001 fd2c 	bl	d79b6 <digitalWrite>
   d5f5e:	e7b2      	b.n	d5ec6 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5f60:	f001 f909 	bl	d7176 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5f64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5f66:	b378      	cbz	r0, d5fc8 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5f68:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5f6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5f6e:	f001 b8ed 	b.w	d714c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d5f72:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5f76:	2101      	movs	r1, #1
   d5f78:	b280      	uxth	r0, r0
   d5f7a:	f001 fd1c 	bl	d79b6 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d5f7e:	42b5      	cmp	r5, r6
   d5f80:	d0f0      	beq.n	d5f64 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d5f82:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d5f84:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5f88:	b118      	cbz	r0, d5f92 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d5f8a:	4649      	mov	r1, r9
   d5f8c:	f000 fbd6 	bl	d673c <_ZN8SPIClass8transferEh>
   d5f90:	e7f5      	b.n	d5f7e <_ZN16Adafruit_SSD13067displayEv+0xca>
   d5f92:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5f94:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5f98:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5f9c:	ea09 0108 	and.w	r1, r9, r8
   d5fa0:	b280      	uxth	r0, r0
   d5fa2:	f001 fd08 	bl	d79b6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5fa6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5faa:	2101      	movs	r1, #1
   d5fac:	b280      	uxth	r0, r0
   d5fae:	f001 fd02 	bl	d79b6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5fb2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5fb6:	2100      	movs	r1, #0
   d5fb8:	b280      	uxth	r0, r0
   d5fba:	f001 fcfc 	bl	d79b6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5fbe:	3f01      	subs	r7, #1
   d5fc0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5fc4:	d1e8      	bne.n	d5f98 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d5fc6:	e7da      	b.n	d5f7e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5fc8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5fcc:	2101      	movs	r1, #1
   d5fce:	b280      	uxth	r0, r0
   d5fd0:	f001 fcf1 	bl	d79b6 <digitalWrite>
   d5fd4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5fd6:	b118      	cbz	r0, d5fe0 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5fd8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5fdc:	f000 bb27 	b.w	d662e <_ZN8SPIClass14endTransactionEv>
}
   d5fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5fe4:	000d9b4c 	.word	0x000d9b4c

000d5fe8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5fe8:	b508      	push	{r3, lr}
   d5fea:	4b02      	ldr	r3, [pc, #8]	; (d5ff4 <netdb_freeaddrinfo+0xc>)
   d5fec:	681b      	ldr	r3, [r3, #0]
   d5fee:	689b      	ldr	r3, [r3, #8]
   d5ff0:	9301      	str	r3, [sp, #4]
   d5ff2:	bd08      	pop	{r3, pc}
   d5ff4:	00030268 	.word	0x00030268

000d5ff8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5ff8:	b508      	push	{r3, lr}
   d5ffa:	4b02      	ldr	r3, [pc, #8]	; (d6004 <netdb_getaddrinfo+0xc>)
   d5ffc:	681b      	ldr	r3, [r3, #0]
   d5ffe:	68db      	ldr	r3, [r3, #12]
   d6000:	9301      	str	r3, [sp, #4]
   d6002:	bd08      	pop	{r3, pc}
   d6004:	00030268 	.word	0x00030268

000d6008 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6008:	b508      	push	{r3, lr}
   d600a:	4b02      	ldr	r3, [pc, #8]	; (d6014 <HAL_Validate_Pin_Function+0xc>)
   d600c:	681b      	ldr	r3, [r3, #0]
   d600e:	685b      	ldr	r3, [r3, #4]
   d6010:	9301      	str	r3, [sp, #4]
   d6012:	bd08      	pop	{r3, pc}
   d6014:	0003022c 	.word	0x0003022c

000d6018 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6018:	b508      	push	{r3, lr}
   d601a:	4b02      	ldr	r3, [pc, #8]	; (d6024 <HAL_Pin_Mode+0xc>)
   d601c:	681b      	ldr	r3, [r3, #0]
   d601e:	689b      	ldr	r3, [r3, #8]
   d6020:	9301      	str	r3, [sp, #4]
   d6022:	bd08      	pop	{r3, pc}
   d6024:	0003022c 	.word	0x0003022c

000d6028 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6028:	b508      	push	{r3, lr}
   d602a:	4b02      	ldr	r3, [pc, #8]	; (d6034 <HAL_Get_Pin_Mode+0xc>)
   d602c:	681b      	ldr	r3, [r3, #0]
   d602e:	68db      	ldr	r3, [r3, #12]
   d6030:	9301      	str	r3, [sp, #4]
   d6032:	bd08      	pop	{r3, pc}
   d6034:	0003022c 	.word	0x0003022c

000d6038 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6038:	b508      	push	{r3, lr}
   d603a:	4b02      	ldr	r3, [pc, #8]	; (d6044 <HAL_GPIO_Write+0xc>)
   d603c:	681b      	ldr	r3, [r3, #0]
   d603e:	691b      	ldr	r3, [r3, #16]
   d6040:	9301      	str	r3, [sp, #4]
   d6042:	bd08      	pop	{r3, pc}
   d6044:	0003022c 	.word	0x0003022c

000d6048 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6048:	b508      	push	{r3, lr}
   d604a:	4b02      	ldr	r3, [pc, #8]	; (d6054 <HAL_GPIO_Read+0xc>)
   d604c:	681b      	ldr	r3, [r3, #0]
   d604e:	695b      	ldr	r3, [r3, #20]
   d6050:	9301      	str	r3, [sp, #4]
   d6052:	bd08      	pop	{r3, pc}
   d6054:	0003022c 	.word	0x0003022c

000d6058 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d6058:	b508      	push	{r3, lr}
   d605a:	4b02      	ldr	r3, [pc, #8]	; (d6064 <HAL_DAC_Write+0xc>)
   d605c:	681b      	ldr	r3, [r3, #0]
   d605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6060:	9301      	str	r3, [sp, #4]
   d6062:	bd08      	pop	{r3, pc}
   d6064:	0003022c 	.word	0x0003022c

000d6068 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6068:	b508      	push	{r3, lr}
   d606a:	4b02      	ldr	r3, [pc, #8]	; (d6074 <hal_adc_read+0xc>)
   d606c:	681b      	ldr	r3, [r3, #0]
   d606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6070:	9301      	str	r3, [sp, #4]
   d6072:	bd08      	pop	{r3, pc}
   d6074:	0003022c 	.word	0x0003022c

000d6078 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d6078:	b508      	push	{r3, lr}
   d607a:	4b02      	ldr	r3, [pc, #8]	; (d6084 <hal_pwm_write_ext+0xc>)
   d607c:	681b      	ldr	r3, [r3, #0]
   d607e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6080:	9301      	str	r3, [sp, #4]
   d6082:	bd08      	pop	{r3, pc}
   d6084:	0003022c 	.word	0x0003022c

000d6088 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6088:	b508      	push	{r3, lr}
   d608a:	4b02      	ldr	r3, [pc, #8]	; (d6094 <if_index_to_name+0xc>)
   d608c:	681b      	ldr	r3, [r3, #0]
   d608e:	695b      	ldr	r3, [r3, #20]
   d6090:	9301      	str	r3, [sp, #4]
   d6092:	bd08      	pop	{r3, pc}
   d6094:	0003026c 	.word	0x0003026c

000d6098 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6098:	b508      	push	{r3, lr}
   d609a:	4b02      	ldr	r3, [pc, #8]	; (d60a4 <HAL_RNG_GetRandomNumber+0xc>)
   d609c:	681b      	ldr	r3, [r3, #0]
   d609e:	685b      	ldr	r3, [r3, #4]
   d60a0:	9301      	str	r3, [sp, #4]
   d60a2:	bd08      	pop	{r3, pc}
   d60a4:	00030218 	.word	0x00030218

000d60a8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d60a8:	b508      	push	{r3, lr}
   d60aa:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <HAL_Delay_Microseconds+0xc>)
   d60ac:	681b      	ldr	r3, [r3, #0]
   d60ae:	68db      	ldr	r3, [r3, #12]
   d60b0:	9301      	str	r3, [sp, #4]
   d60b2:	bd08      	pop	{r3, pc}
   d60b4:	00030218 	.word	0x00030218

000d60b8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	695b      	ldr	r3, [r3, #20]
   d60c0:	9301      	str	r3, [sp, #4]
   d60c2:	bd08      	pop	{r3, pc}
   d60c4:	00030218 	.word	0x00030218

000d60c8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <os_mutex_create+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	00030248 	.word	0x00030248

000d60d8 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <os_mutex_destroy+0xc>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d60e0:	9301      	str	r3, [sp, #4]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	00030248 	.word	0x00030248

000d60e8 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d60e8:	b508      	push	{r3, lr}
   d60ea:	4b02      	ldr	r3, [pc, #8]	; (d60f4 <os_mutex_recursive_create+0xc>)
   d60ec:	681b      	ldr	r3, [r3, #0]
   d60ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d60f0:	9301      	str	r3, [sp, #4]
   d60f2:	bd08      	pop	{r3, pc}
   d60f4:	00030248 	.word	0x00030248

000d60f8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d60f8:	b508      	push	{r3, lr}
   d60fa:	4b02      	ldr	r3, [pc, #8]	; (d6104 <os_mutex_recursive_destroy+0xc>)
   d60fc:	681b      	ldr	r3, [r3, #0]
   d60fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6100:	9301      	str	r3, [sp, #4]
   d6102:	bd08      	pop	{r3, pc}
   d6104:	00030248 	.word	0x00030248

000d6108 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b02      	ldr	r3, [pc, #8]	; (d6114 <inet_inet_ntop+0xc>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	695b      	ldr	r3, [r3, #20]
   d6110:	9301      	str	r3, [sp, #4]
   d6112:	bd08      	pop	{r3, pc}
   d6114:	00030264 	.word	0x00030264

000d6118 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <inet_htonl+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	6a1b      	ldr	r3, [r3, #32]
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	00030264 	.word	0x00030264

000d6128 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <inet_htons+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	00030264 	.word	0x00030264

000d6138 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <hal_usart_init+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	681b      	ldr	r3, [r3, #0]
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	0003023c 	.word	0x0003023c

000d6148 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <hal_usart_write+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	68db      	ldr	r3, [r3, #12]
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	0003023c 	.word	0x0003023c

000d6158 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <hal_usart_available+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	691b      	ldr	r3, [r3, #16]
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	0003023c 	.word	0x0003023c

000d6168 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <hal_usart_read+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	695b      	ldr	r3, [r3, #20]
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	0003023c 	.word	0x0003023c

000d6178 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <hal_usart_peek+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	699b      	ldr	r3, [r3, #24]
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	0003023c 	.word	0x0003023c

000d6188 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <hal_usart_flush+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	69db      	ldr	r3, [r3, #28]
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	0003023c 	.word	0x0003023c

000d6198 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b02      	ldr	r3, [pc, #8]	; (d61a4 <hal_usart_is_enabled+0xc>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	6a1b      	ldr	r3, [r3, #32]
   d61a0:	9301      	str	r3, [sp, #4]
   d61a2:	bd08      	pop	{r3, pc}
   d61a4:	0003023c 	.word	0x0003023c

000d61a8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d61a8:	b508      	push	{r3, lr}
   d61aa:	4b02      	ldr	r3, [pc, #8]	; (d61b4 <hal_usart_available_data_for_write+0xc>)
   d61ac:	681b      	ldr	r3, [r3, #0]
   d61ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d61b0:	9301      	str	r3, [sp, #4]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	0003023c 	.word	0x0003023c

000d61b8 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d61b8:	b508      	push	{r3, lr}
   d61ba:	4b02      	ldr	r3, [pc, #8]	; (d61c4 <hal_i2c_set_speed+0xc>)
   d61bc:	681b      	ldr	r3, [r3, #0]
   d61be:	681b      	ldr	r3, [r3, #0]
   d61c0:	9301      	str	r3, [sp, #4]
   d61c2:	bd08      	pop	{r3, pc}
   d61c4:	00030228 	.word	0x00030228

000d61c8 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d61c8:	b508      	push	{r3, lr}
   d61ca:	4b02      	ldr	r3, [pc, #8]	; (d61d4 <hal_i2c_begin+0xc>)
   d61cc:	681b      	ldr	r3, [r3, #0]
   d61ce:	68db      	ldr	r3, [r3, #12]
   d61d0:	9301      	str	r3, [sp, #4]
   d61d2:	bd08      	pop	{r3, pc}
   d61d4:	00030228 	.word	0x00030228

000d61d8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d61d8:	b508      	push	{r3, lr}
   d61da:	4b02      	ldr	r3, [pc, #8]	; (d61e4 <hal_i2c_begin_transmission+0xc>)
   d61dc:	681b      	ldr	r3, [r3, #0]
   d61de:	699b      	ldr	r3, [r3, #24]
   d61e0:	9301      	str	r3, [sp, #4]
   d61e2:	bd08      	pop	{r3, pc}
   d61e4:	00030228 	.word	0x00030228

000d61e8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4b02      	ldr	r3, [pc, #8]	; (d61f4 <hal_i2c_end_transmission+0xc>)
   d61ec:	681b      	ldr	r3, [r3, #0]
   d61ee:	69db      	ldr	r3, [r3, #28]
   d61f0:	9301      	str	r3, [sp, #4]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	00030228 	.word	0x00030228

000d61f8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d61f8:	b508      	push	{r3, lr}
   d61fa:	4b02      	ldr	r3, [pc, #8]	; (d6204 <hal_i2c_write+0xc>)
   d61fc:	681b      	ldr	r3, [r3, #0]
   d61fe:	6a1b      	ldr	r3, [r3, #32]
   d6200:	9301      	str	r3, [sp, #4]
   d6202:	bd08      	pop	{r3, pc}
   d6204:	00030228 	.word	0x00030228

000d6208 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6208:	b508      	push	{r3, lr}
   d620a:	4b02      	ldr	r3, [pc, #8]	; (d6214 <hal_i2c_available+0xc>)
   d620c:	681b      	ldr	r3, [r3, #0]
   d620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	bd08      	pop	{r3, pc}
   d6214:	00030228 	.word	0x00030228

000d6218 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6218:	b508      	push	{r3, lr}
   d621a:	4b02      	ldr	r3, [pc, #8]	; (d6224 <hal_i2c_read+0xc>)
   d621c:	681b      	ldr	r3, [r3, #0]
   d621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6220:	9301      	str	r3, [sp, #4]
   d6222:	bd08      	pop	{r3, pc}
   d6224:	00030228 	.word	0x00030228

000d6228 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6228:	b508      	push	{r3, lr}
   d622a:	4b02      	ldr	r3, [pc, #8]	; (d6234 <hal_i2c_peek+0xc>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6230:	9301      	str	r3, [sp, #4]
   d6232:	bd08      	pop	{r3, pc}
   d6234:	00030228 	.word	0x00030228

000d6238 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6238:	b508      	push	{r3, lr}
   d623a:	4b02      	ldr	r3, [pc, #8]	; (d6244 <hal_i2c_flush+0xc>)
   d623c:	681b      	ldr	r3, [r3, #0]
   d623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	bd08      	pop	{r3, pc}
   d6244:	00030228 	.word	0x00030228

000d6248 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6248:	b508      	push	{r3, lr}
   d624a:	4b02      	ldr	r3, [pc, #8]	; (d6254 <hal_i2c_is_enabled+0xc>)
   d624c:	681b      	ldr	r3, [r3, #0]
   d624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	bd08      	pop	{r3, pc}
   d6254:	00030228 	.word	0x00030228

000d6258 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6258:	b508      	push	{r3, lr}
   d625a:	4b02      	ldr	r3, [pc, #8]	; (d6264 <hal_i2c_init+0xc>)
   d625c:	681b      	ldr	r3, [r3, #0]
   d625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6260:	9301      	str	r3, [sp, #4]
   d6262:	bd08      	pop	{r3, pc}
   d6264:	00030228 	.word	0x00030228

000d6268 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6268:	b508      	push	{r3, lr}
   d626a:	4b02      	ldr	r3, [pc, #8]	; (d6274 <sock_setsockopt+0xc>)
   d626c:	681b      	ldr	r3, [r3, #0]
   d626e:	699b      	ldr	r3, [r3, #24]
   d6270:	9301      	str	r3, [sp, #4]
   d6272:	bd08      	pop	{r3, pc}
   d6274:	00030238 	.word	0x00030238

000d6278 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6278:	b508      	push	{r3, lr}
   d627a:	4b02      	ldr	r3, [pc, #8]	; (d6284 <sock_close+0xc>)
   d627c:	681b      	ldr	r3, [r3, #0]
   d627e:	69db      	ldr	r3, [r3, #28]
   d6280:	9301      	str	r3, [sp, #4]
   d6282:	bd08      	pop	{r3, pc}
   d6284:	00030238 	.word	0x00030238

000d6288 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6288:	b508      	push	{r3, lr}
   d628a:	4b02      	ldr	r3, [pc, #8]	; (d6294 <sock_connect+0xc>)
   d628c:	681b      	ldr	r3, [r3, #0]
   d628e:	6a1b      	ldr	r3, [r3, #32]
   d6290:	9301      	str	r3, [sp, #4]
   d6292:	bd08      	pop	{r3, pc}
   d6294:	00030238 	.word	0x00030238

000d6298 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6298:	b508      	push	{r3, lr}
   d629a:	4b02      	ldr	r3, [pc, #8]	; (d62a4 <sock_recv+0xc>)
   d629c:	681b      	ldr	r3, [r3, #0]
   d629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d62a0:	9301      	str	r3, [sp, #4]
   d62a2:	bd08      	pop	{r3, pc}
   d62a4:	00030238 	.word	0x00030238

000d62a8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d62a8:	b508      	push	{r3, lr}
   d62aa:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <sock_send+0xc>)
   d62ac:	681b      	ldr	r3, [r3, #0]
   d62ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62b0:	9301      	str	r3, [sp, #4]
   d62b2:	bd08      	pop	{r3, pc}
   d62b4:	00030238 	.word	0x00030238

000d62b8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d62b8:	b508      	push	{r3, lr}
   d62ba:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <sock_socket+0xc>)
   d62bc:	681b      	ldr	r3, [r3, #0]
   d62be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d62c0:	9301      	str	r3, [sp, #4]
   d62c2:	bd08      	pop	{r3, pc}
   d62c4:	00030238 	.word	0x00030238

000d62c8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <hal_spi_begin+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	681b      	ldr	r3, [r3, #0]
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	00030230 	.word	0x00030230

000d62d8 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d62d8:	b508      	push	{r3, lr}
   d62da:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <hal_spi_transfer+0xc>)
   d62dc:	681b      	ldr	r3, [r3, #0]
   d62de:	695b      	ldr	r3, [r3, #20]
   d62e0:	9301      	str	r3, [sp, #4]
   d62e2:	bd08      	pop	{r3, pc}
   d62e4:	00030230 	.word	0x00030230

000d62e8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d62e8:	b508      	push	{r3, lr}
   d62ea:	4b02      	ldr	r3, [pc, #8]	; (d62f4 <hal_spi_init+0xc>)
   d62ec:	681b      	ldr	r3, [r3, #0]
   d62ee:	69db      	ldr	r3, [r3, #28]
   d62f0:	9301      	str	r3, [sp, #4]
   d62f2:	bd08      	pop	{r3, pc}
   d62f4:	00030230 	.word	0x00030230

000d62f8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d62f8:	b508      	push	{r3, lr}
   d62fa:	4b02      	ldr	r3, [pc, #8]	; (d6304 <hal_spi_is_enabled+0xc>)
   d62fc:	681b      	ldr	r3, [r3, #0]
   d62fe:	6a1b      	ldr	r3, [r3, #32]
   d6300:	9301      	str	r3, [sp, #4]
   d6302:	bd08      	pop	{r3, pc}
   d6304:	00030230 	.word	0x00030230

000d6308 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d6308:	b508      	push	{r3, lr}
   d630a:	4b02      	ldr	r3, [pc, #8]	; (d6314 <hal_spi_info+0xc>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6310:	9301      	str	r3, [sp, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	00030230 	.word	0x00030230

000d6318 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6318:	b508      	push	{r3, lr}
   d631a:	4b02      	ldr	r3, [pc, #8]	; (d6324 <hal_spi_set_settings+0xc>)
   d631c:	681b      	ldr	r3, [r3, #0]
   d631e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6320:	9301      	str	r3, [sp, #4]
   d6322:	bd08      	pop	{r3, pc}
   d6324:	00030230 	.word	0x00030230

000d6328 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d6328:	b508      	push	{r3, lr}
   d632a:	4b02      	ldr	r3, [pc, #8]	; (d6334 <hal_spi_acquire+0xc>)
   d632c:	681b      	ldr	r3, [r3, #0]
   d632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6330:	9301      	str	r3, [sp, #4]
   d6332:	bd08      	pop	{r3, pc}
   d6334:	00030230 	.word	0x00030230

000d6338 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6338:	b508      	push	{r3, lr}
   d633a:	4b02      	ldr	r3, [pc, #8]	; (d6344 <hal_spi_release+0xc>)
   d633c:	681b      	ldr	r3, [r3, #0]
   d633e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6340:	9301      	str	r3, [sp, #4]
   d6342:	bd08      	pop	{r3, pc}
   d6344:	00030230 	.word	0x00030230

000d6348 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6348:	b508      	push	{r3, lr}
   d634a:	4b02      	ldr	r3, [pc, #8]	; (d6354 <HAL_USB_USART_Init+0xc>)
   d634c:	681b      	ldr	r3, [r3, #0]
   d634e:	681b      	ldr	r3, [r3, #0]
   d6350:	9301      	str	r3, [sp, #4]
   d6352:	bd08      	pop	{r3, pc}
   d6354:	0003024c 	.word	0x0003024c

000d6358 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6358:	b508      	push	{r3, lr}
   d635a:	4b02      	ldr	r3, [pc, #8]	; (d6364 <HAL_USB_USART_Available_Data+0xc>)
   d635c:	681b      	ldr	r3, [r3, #0]
   d635e:	691b      	ldr	r3, [r3, #16]
   d6360:	9301      	str	r3, [sp, #4]
   d6362:	bd08      	pop	{r3, pc}
   d6364:	0003024c 	.word	0x0003024c

000d6368 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6368:	b508      	push	{r3, lr}
   d636a:	4b02      	ldr	r3, [pc, #8]	; (d6374 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d636c:	681b      	ldr	r3, [r3, #0]
   d636e:	695b      	ldr	r3, [r3, #20]
   d6370:	9301      	str	r3, [sp, #4]
   d6372:	bd08      	pop	{r3, pc}
   d6374:	0003024c 	.word	0x0003024c

000d6378 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6378:	b508      	push	{r3, lr}
   d637a:	4b02      	ldr	r3, [pc, #8]	; (d6384 <HAL_USB_USART_Receive_Data+0xc>)
   d637c:	681b      	ldr	r3, [r3, #0]
   d637e:	699b      	ldr	r3, [r3, #24]
   d6380:	9301      	str	r3, [sp, #4]
   d6382:	bd08      	pop	{r3, pc}
   d6384:	0003024c 	.word	0x0003024c

000d6388 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6388:	b508      	push	{r3, lr}
   d638a:	4b02      	ldr	r3, [pc, #8]	; (d6394 <HAL_USB_USART_Send_Data+0xc>)
   d638c:	681b      	ldr	r3, [r3, #0]
   d638e:	69db      	ldr	r3, [r3, #28]
   d6390:	9301      	str	r3, [sp, #4]
   d6392:	bd08      	pop	{r3, pc}
   d6394:	0003024c 	.word	0x0003024c

000d6398 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6398:	b508      	push	{r3, lr}
   d639a:	4b02      	ldr	r3, [pc, #8]	; (d63a4 <HAL_USB_USART_Flush_Data+0xc>)
   d639c:	681b      	ldr	r3, [r3, #0]
   d639e:	6a1b      	ldr	r3, [r3, #32]
   d63a0:	9301      	str	r3, [sp, #4]
   d63a2:	bd08      	pop	{r3, pc}
   d63a4:	0003024c 	.word	0x0003024c

000d63a8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d63a8:	b508      	push	{r3, lr}
   d63aa:	4b02      	ldr	r3, [pc, #8]	; (d63b4 <panic_+0xc>)
   d63ac:	681b      	ldr	r3, [r3, #0]
   d63ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d63b0:	9301      	str	r3, [sp, #4]
   d63b2:	bd08      	pop	{r3, pc}
   d63b4:	00030260 	.word	0x00030260

000d63b8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d63b8:	b508      	push	{r3, lr}
   d63ba:	4b02      	ldr	r3, [pc, #8]	; (d63c4 <log_message+0xc>)
   d63bc:	681b      	ldr	r3, [r3, #0]
   d63be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d63c0:	9301      	str	r3, [sp, #4]
   d63c2:	bd08      	pop	{r3, pc}
   d63c4:	00030260 	.word	0x00030260

000d63c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d63c8:	b508      	push	{r3, lr}
   d63ca:	4b02      	ldr	r3, [pc, #8]	; (d63d4 <set_system_mode+0xc>)
   d63cc:	681b      	ldr	r3, [r3, #0]
   d63ce:	685b      	ldr	r3, [r3, #4]
   d63d0:	9301      	str	r3, [sp, #4]
   d63d2:	bd08      	pop	{r3, pc}
   d63d4:	00030220 	.word	0x00030220

000d63d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d63d8:	b508      	push	{r3, lr}
   d63da:	4b02      	ldr	r3, [pc, #8]	; (d63e4 <system_delay_ms+0xc>)
   d63dc:	681b      	ldr	r3, [r3, #0]
   d63de:	695b      	ldr	r3, [r3, #20]
   d63e0:	9301      	str	r3, [sp, #4]
   d63e2:	bd08      	pop	{r3, pc}
   d63e4:	00030220 	.word	0x00030220

000d63e8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d63e8:	b508      	push	{r3, lr}
   d63ea:	4b02      	ldr	r3, [pc, #8]	; (d63f4 <system_thread_set_state+0xc>)
   d63ec:	681b      	ldr	r3, [r3, #0]
   d63ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63f0:	9301      	str	r3, [sp, #4]
   d63f2:	bd08      	pop	{r3, pc}
   d63f4:	00030220 	.word	0x00030220

000d63f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d63f8:	b508      	push	{r3, lr}
   d63fa:	4b03      	ldr	r3, [pc, #12]	; (d6408 <system_ctrl_set_app_request_handler+0x10>)
   d63fc:	681b      	ldr	r3, [r3, #0]
   d63fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6402:	9301      	str	r3, [sp, #4]
   d6404:	bd08      	pop	{r3, pc}
   d6406:	0000      	.short	0x0000
   d6408:	00030220 	.word	0x00030220

000d640c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d640c:	b508      	push	{r3, lr}
   d640e:	4b03      	ldr	r3, [pc, #12]	; (d641c <system_ctrl_set_result+0x10>)
   d6410:	681b      	ldr	r3, [r3, #0]
   d6412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6416:	9301      	str	r3, [sp, #4]
   d6418:	bd08      	pop	{r3, pc}
   d641a:	0000      	.short	0x0000
   d641c:	00030220 	.word	0x00030220

000d6420 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6420:	b508      	push	{r3, lr}
   d6422:	4b02      	ldr	r3, [pc, #8]	; (d642c <network_connect+0xc>)
   d6424:	681b      	ldr	r3, [r3, #0]
   d6426:	685b      	ldr	r3, [r3, #4]
   d6428:	9301      	str	r3, [sp, #4]
   d642a:	bd08      	pop	{r3, pc}
   d642c:	00030240 	.word	0x00030240

000d6430 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6430:	b508      	push	{r3, lr}
   d6432:	4b02      	ldr	r3, [pc, #8]	; (d643c <network_connecting+0xc>)
   d6434:	681b      	ldr	r3, [r3, #0]
   d6436:	689b      	ldr	r3, [r3, #8]
   d6438:	9301      	str	r3, [sp, #4]
   d643a:	bd08      	pop	{r3, pc}
   d643c:	00030240 	.word	0x00030240

000d6440 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6440:	b508      	push	{r3, lr}
   d6442:	4b02      	ldr	r3, [pc, #8]	; (d644c <network_disconnect+0xc>)
   d6444:	681b      	ldr	r3, [r3, #0]
   d6446:	68db      	ldr	r3, [r3, #12]
   d6448:	9301      	str	r3, [sp, #4]
   d644a:	bd08      	pop	{r3, pc}
   d644c:	00030240 	.word	0x00030240

000d6450 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6450:	b508      	push	{r3, lr}
   d6452:	4b02      	ldr	r3, [pc, #8]	; (d645c <network_ready+0xc>)
   d6454:	681b      	ldr	r3, [r3, #0]
   d6456:	691b      	ldr	r3, [r3, #16]
   d6458:	9301      	str	r3, [sp, #4]
   d645a:	bd08      	pop	{r3, pc}
   d645c:	00030240 	.word	0x00030240

000d6460 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6460:	b508      	push	{r3, lr}
   d6462:	4b02      	ldr	r3, [pc, #8]	; (d646c <network_on+0xc>)
   d6464:	681b      	ldr	r3, [r3, #0]
   d6466:	695b      	ldr	r3, [r3, #20]
   d6468:	9301      	str	r3, [sp, #4]
   d646a:	bd08      	pop	{r3, pc}
   d646c:	00030240 	.word	0x00030240

000d6470 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6470:	b508      	push	{r3, lr}
   d6472:	4b02      	ldr	r3, [pc, #8]	; (d647c <network_off+0xc>)
   d6474:	681b      	ldr	r3, [r3, #0]
   d6476:	699b      	ldr	r3, [r3, #24]
   d6478:	9301      	str	r3, [sp, #4]
   d647a:	bd08      	pop	{r3, pc}
   d647c:	00030240 	.word	0x00030240

000d6480 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6480:	b508      	push	{r3, lr}
   d6482:	4b02      	ldr	r3, [pc, #8]	; (d648c <network_listen+0xc>)
   d6484:	681b      	ldr	r3, [r3, #0]
   d6486:	69db      	ldr	r3, [r3, #28]
   d6488:	9301      	str	r3, [sp, #4]
   d648a:	bd08      	pop	{r3, pc}
   d648c:	00030240 	.word	0x00030240

000d6490 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6490:	b508      	push	{r3, lr}
   d6492:	4b02      	ldr	r3, [pc, #8]	; (d649c <network_listening+0xc>)
   d6494:	681b      	ldr	r3, [r3, #0]
   d6496:	6a1b      	ldr	r3, [r3, #32]
   d6498:	9301      	str	r3, [sp, #4]
   d649a:	bd08      	pop	{r3, pc}
   d649c:	00030240 	.word	0x00030240

000d64a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d64a0:	b508      	push	{r3, lr}
   d64a2:	4b02      	ldr	r3, [pc, #8]	; (d64ac <network_set_listen_timeout+0xc>)
   d64a4:	681b      	ldr	r3, [r3, #0]
   d64a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d64a8:	9301      	str	r3, [sp, #4]
   d64aa:	bd08      	pop	{r3, pc}
   d64ac:	00030240 	.word	0x00030240

000d64b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d64b0:	b508      	push	{r3, lr}
   d64b2:	4b02      	ldr	r3, [pc, #8]	; (d64bc <network_get_listen_timeout+0xc>)
   d64b4:	681b      	ldr	r3, [r3, #0]
   d64b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d64b8:	9301      	str	r3, [sp, #4]
   d64ba:	bd08      	pop	{r3, pc}
   d64bc:	00030240 	.word	0x00030240

000d64c0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d64c0:	b508      	push	{r3, lr}
   d64c2:	4b02      	ldr	r3, [pc, #8]	; (d64cc <network_is_on+0xc>)
   d64c4:	681b      	ldr	r3, [r3, #0]
   d64c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d64c8:	9301      	str	r3, [sp, #4]
   d64ca:	bd08      	pop	{r3, pc}
   d64cc:	00030240 	.word	0x00030240

000d64d0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d64d0:	b508      	push	{r3, lr}
   d64d2:	4b02      	ldr	r3, [pc, #8]	; (d64dc <network_is_off+0xc>)
   d64d4:	681b      	ldr	r3, [r3, #0]
   d64d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d64d8:	9301      	str	r3, [sp, #4]
   d64da:	bd08      	pop	{r3, pc}
   d64dc:	00030240 	.word	0x00030240

000d64e0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d64e0:	b508      	push	{r3, lr}
   d64e2:	4b02      	ldr	r3, [pc, #8]	; (d64ec <spark_process+0xc>)
   d64e4:	681b      	ldr	r3, [r3, #0]
   d64e6:	689b      	ldr	r3, [r3, #8]
   d64e8:	9301      	str	r3, [sp, #4]
   d64ea:	bd08      	pop	{r3, pc}
   d64ec:	00030244 	.word	0x00030244

000d64f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d64f0:	b508      	push	{r3, lr}
   d64f2:	4b02      	ldr	r3, [pc, #8]	; (d64fc <spark_set_random_seed_from_cloud_handler+0xc>)
   d64f4:	681b      	ldr	r3, [r3, #0]
   d64f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d64f8:	9301      	str	r3, [sp, #4]
   d64fa:	bd08      	pop	{r3, pc}
   d64fc:	00030244 	.word	0x00030244

000d6500 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6500:	b508      	push	{r3, lr}
   d6502:	4b02      	ldr	r3, [pc, #8]	; (d650c <malloc+0xc>)
   d6504:	681b      	ldr	r3, [r3, #0]
   d6506:	681b      	ldr	r3, [r3, #0]
   d6508:	9301      	str	r3, [sp, #4]
   d650a:	bd08      	pop	{r3, pc}
   d650c:	0003021c 	.word	0x0003021c

000d6510 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6510:	b508      	push	{r3, lr}
   d6512:	4b02      	ldr	r3, [pc, #8]	; (d651c <free+0xc>)
   d6514:	681b      	ldr	r3, [r3, #0]
   d6516:	685b      	ldr	r3, [r3, #4]
   d6518:	9301      	str	r3, [sp, #4]
   d651a:	bd08      	pop	{r3, pc}
   d651c:	0003021c 	.word	0x0003021c

000d6520 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6520:	b508      	push	{r3, lr}
   d6522:	4b02      	ldr	r3, [pc, #8]	; (d652c <realloc+0xc>)
   d6524:	681b      	ldr	r3, [r3, #0]
   d6526:	689b      	ldr	r3, [r3, #8]
   d6528:	9301      	str	r3, [sp, #4]
   d652a:	bd08      	pop	{r3, pc}
   d652c:	0003021c 	.word	0x0003021c

000d6530 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6530:	b508      	push	{r3, lr}
   d6532:	4b02      	ldr	r3, [pc, #8]	; (d653c <snprintf+0xc>)
   d6534:	681b      	ldr	r3, [r3, #0]
   d6536:	69db      	ldr	r3, [r3, #28]
   d6538:	9301      	str	r3, [sp, #4]
   d653a:	bd08      	pop	{r3, pc}
   d653c:	0003021c 	.word	0x0003021c

000d6540 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6540:	b508      	push	{r3, lr}
   d6542:	4b02      	ldr	r3, [pc, #8]	; (d654c <vsnprintf+0xc>)
   d6544:	681b      	ldr	r3, [r3, #0]
   d6546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6548:	9301      	str	r3, [sp, #4]
   d654a:	bd08      	pop	{r3, pc}
   d654c:	0003021c 	.word	0x0003021c

000d6550 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6550:	b508      	push	{r3, lr}
   d6552:	4b02      	ldr	r3, [pc, #8]	; (d655c <__errno+0xc>)
   d6554:	681b      	ldr	r3, [r3, #0]
   d6556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6558:	9301      	str	r3, [sp, #4]
   d655a:	bd08      	pop	{r3, pc}
   d655c:	0003021c 	.word	0x0003021c

000d6560 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6560:	b508      	push	{r3, lr}
   d6562:	4b02      	ldr	r3, [pc, #8]	; (d656c <newlib_impure_ptr_callback+0xc>)
   d6564:	681b      	ldr	r3, [r3, #0]
   d6566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6568:	9301      	str	r3, [sp, #4]
   d656a:	bd08      	pop	{r3, pc}
   d656c:	0003021c 	.word	0x0003021c

000d6570 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6570:	2200      	movs	r2, #0
   d6572:	6840      	ldr	r0, [r0, #4]
   d6574:	4611      	mov	r1, r2
   d6576:	f7ff bf8b 	b.w	d6490 <network_listening>

000d657a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d657a:	2200      	movs	r2, #0
   d657c:	6840      	ldr	r0, [r0, #4]
   d657e:	4611      	mov	r1, r2
   d6580:	f7ff bf96 	b.w	d64b0 <network_get_listen_timeout>

000d6584 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6584:	6840      	ldr	r0, [r0, #4]
   d6586:	2200      	movs	r2, #0
   d6588:	f7ff bf8a 	b.w	d64a0 <network_set_listen_timeout>

000d658c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d658c:	6840      	ldr	r0, [r0, #4]
   d658e:	2200      	movs	r2, #0
   d6590:	f081 0101 	eor.w	r1, r1, #1
   d6594:	f7ff bf74 	b.w	d6480 <network_listen>

000d6598 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6598:	2300      	movs	r3, #0
   d659a:	6840      	ldr	r0, [r0, #4]
   d659c:	461a      	mov	r2, r3
   d659e:	4619      	mov	r1, r3
   d65a0:	f7ff bf66 	b.w	d6470 <network_off>

000d65a4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d65a4:	2300      	movs	r3, #0
   d65a6:	6840      	ldr	r0, [r0, #4]
   d65a8:	461a      	mov	r2, r3
   d65aa:	4619      	mov	r1, r3
   d65ac:	f7ff bf58 	b.w	d6460 <network_on>

000d65b0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d65b0:	2200      	movs	r2, #0
   d65b2:	6840      	ldr	r0, [r0, #4]
   d65b4:	4611      	mov	r1, r2
   d65b6:	f7ff bf4b 	b.w	d6450 <network_ready>

000d65ba <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d65ba:	2200      	movs	r2, #0
   d65bc:	6840      	ldr	r0, [r0, #4]
   d65be:	4611      	mov	r1, r2
   d65c0:	f7ff bf36 	b.w	d6430 <network_connecting>

000d65c4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d65c4:	6840      	ldr	r0, [r0, #4]
   d65c6:	2200      	movs	r2, #0
   d65c8:	2102      	movs	r1, #2
   d65ca:	f7ff bf39 	b.w	d6440 <network_disconnect>

000d65ce <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d65ce:	2300      	movs	r3, #0
   d65d0:	6840      	ldr	r0, [r0, #4]
   d65d2:	461a      	mov	r2, r3
   d65d4:	f7ff bf24 	b.w	d6420 <network_connect>

000d65d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d65d8:	4b02      	ldr	r3, [pc, #8]	; (d65e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d65da:	2203      	movs	r2, #3
   d65dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d65de:	4a02      	ldr	r2, [pc, #8]	; (d65e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d65e0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d65e2:	4770      	bx	lr
   d65e4:	2003e654 	.word	0x2003e654
   d65e8:	000d9b5c 	.word	0x000d9b5c

000d65ec <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d65ec:	2100      	movs	r1, #0
   d65ee:	f7ff be9b 	b.w	d6328 <hal_spi_acquire>

000d65f2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d65f2:	2100      	movs	r1, #0
   d65f4:	f7ff bea0 	b.w	d6338 <hal_spi_release>

000d65f8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d65f8:	b510      	push	{r4, lr}
   d65fa:	4604      	mov	r4, r0
   d65fc:	4608      	mov	r0, r1
{
    _spi = spi;
   d65fe:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6600:	f7ff fe72 	bl	d62e8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6604:	2300      	movs	r3, #0
   d6606:	6063      	str	r3, [r4, #4]
}
   d6608:	4620      	mov	r0, r4
   d660a:	bd10      	pop	{r4, pc}

000d660c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d660c:	b510      	push	{r4, lr}
   d660e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6610:	7800      	ldrb	r0, [r0, #0]
   d6612:	f7ff ffeb 	bl	d65ec <_ZN8SPIClass4lockEv.isra.0>
   d6616:	b948      	cbnz	r0, d662c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6618:	7820      	ldrb	r0, [r4, #0]
   d661a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d661e:	f7ff fe53 	bl	d62c8 <hal_spi_begin>
        unlock();
   d6622:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6628:	f7ff bfe3 	b.w	d65f2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d662c:	bd10      	pop	{r4, pc}

000d662e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d662e:	7800      	ldrb	r0, [r0, #0]
   d6630:	f7ff bfdf 	b.w	d65f2 <_ZN8SPIClass6unlockEv.isra.0>

000d6634 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6634:	0840      	lsrs	r0, r0, #1
{
   d6636:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d6638:	6018      	str	r0, [r3, #0]
   d663a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d663c:	6818      	ldr	r0, [r3, #0]
   d663e:	4288      	cmp	r0, r1
   d6640:	b2e5      	uxtb	r5, r4
   d6642:	d906      	bls.n	d6652 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6644:	3401      	adds	r4, #1
   d6646:	2c08      	cmp	r4, #8
   d6648:	d002      	beq.n	d6650 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d664a:	0840      	lsrs	r0, r0, #1
   d664c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d664e:	e7f5      	b.n	d663c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6650:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6652:	4b02      	ldr	r3, [pc, #8]	; (d665c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6654:	5d5b      	ldrb	r3, [r3, r5]
   d6656:	7013      	strb	r3, [r2, #0]
}
   d6658:	bd30      	pop	{r4, r5, pc}
   d665a:	bf00      	nop
   d665c:	000d9b90 	.word	0x000d9b90

000d6660 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6664:	4606      	mov	r6, r0
   d6666:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d6668:	7800      	ldrb	r0, [r0, #0]
{
   d666a:	460c      	mov	r4, r1
    CHECK(lock());
   d666c:	f7ff ffbe 	bl	d65ec <_ZN8SPIClass4lockEv.isra.0>
   d6670:	2800      	cmp	r0, #0
   d6672:	db1b      	blt.n	d66ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6674:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6676:	2214      	movs	r2, #20
   d6678:	2100      	movs	r1, #0
   d667a:	a809      	add	r0, sp, #36	; 0x24
   d667c:	f002 f994 	bl	d89a8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6680:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6682:	2200      	movs	r2, #0
   d6684:	a909      	add	r1, sp, #36	; 0x24
   d6686:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d6688:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d668c:	f7ff fe3c 	bl	d6308 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d6690:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d6694:	b113      	cbz	r3, d669c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d6696:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d669a:	b155      	cbz	r5, d66b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d669c:	2700      	movs	r7, #0
   d669e:	46b9      	mov	r9, r7
   d66a0:	46b8      	mov	r8, r7
   d66a2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d66a4:	7923      	ldrb	r3, [r4, #4]
   d66a6:	b15d      	cbz	r5, d66c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d66a8:	b1c3      	cbz	r3, d66dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d66aa:	2000      	movs	r0, #0
}
   d66ac:	b00f      	add	sp, #60	; 0x3c
   d66ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d66b2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d66b6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d66ba:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d66be:	e7f1      	b.n	d66a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d66c0:	2b00      	cmp	r3, #0
   d66c2:	d135      	bne.n	d6730 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d66c4:	68a3      	ldr	r3, [r4, #8]
   d66c6:	4543      	cmp	r3, r8
   d66c8:	d108      	bne.n	d66dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d66ca:	f88d 9020 	strb.w	r9, [sp, #32]
   d66ce:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d66d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d66d6:	89a3      	ldrh	r3, [r4, #12]
   d66d8:	429a      	cmp	r2, r3
   d66da:	d0e6      	beq.n	d66aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d66dc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d66de:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d66e0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d66e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d66e6:	ab04      	add	r3, sp, #16
   d66e8:	f10d 020f 	add.w	r2, sp, #15
   d66ec:	f7ff ffa2 	bl	d6634 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d66f0:	7921      	ldrb	r1, [r4, #4]
   d66f2:	b985      	cbnz	r5, d6716 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d66f4:	b989      	cbnz	r1, d671a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d66f6:	68a3      	ldr	r3, [r4, #8]
   d66f8:	4543      	cmp	r3, r8
   d66fa:	d30e      	bcc.n	d671a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d66fc:	f88d 9020 	strb.w	r9, [sp, #32]
   d6700:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6704:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6708:	89a3      	ldrh	r3, [r4, #12]
   d670a:	429a      	cmp	r2, r3
   d670c:	d105      	bne.n	d671a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d670e:	9b04      	ldr	r3, [sp, #16]
   d6710:	4543      	cmp	r3, r8
   d6712:	d102      	bne.n	d671a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6714:	e7c9      	b.n	d66aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d6716:	2900      	cmp	r1, #0
   d6718:	d1f9      	bne.n	d670e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d671a:	2300      	movs	r3, #0
   d671c:	9301      	str	r3, [sp, #4]
   d671e:	7b63      	ldrb	r3, [r4, #13]
   d6720:	9300      	str	r3, [sp, #0]
   d6722:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6726:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6728:	7830      	ldrb	r0, [r6, #0]
   d672a:	f7ff fdf5 	bl	d6318 <hal_spi_set_settings>
   d672e:	e7bc      	b.n	d66aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d6730:	e9cd 5500 	strd	r5, r5, [sp]
   d6734:	462b      	mov	r3, r5
   d6736:	462a      	mov	r2, r5
   d6738:	2101      	movs	r1, #1
   d673a:	e7f5      	b.n	d6728 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d673c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d673c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d673e:	7800      	ldrb	r0, [r0, #0]
   d6740:	f7ff fdca 	bl	d62d8 <hal_spi_transfer>
}
   d6744:	b2c0      	uxtb	r0, r0
   d6746:	bd08      	pop	{r3, pc}

000d6748 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6748:	b510      	push	{r4, lr}
   d674a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d674c:	6800      	ldr	r0, [r0, #0]
   d674e:	b118      	cbz	r0, d6758 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6750:	f7ff fede 	bl	d6510 <free>
            wakeupSource_ = nullptr;
   d6754:	2300      	movs	r3, #0
   d6756:	6023      	str	r3, [r4, #0]
        }
    }
   d6758:	bd10      	pop	{r4, pc}

000d675a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d675a:	b510      	push	{r4, lr}
   d675c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d675e:	f7ff fff3 	bl	d6748 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6762:	4620      	mov	r0, r4
   d6764:	bd10      	pop	{r4, pc}
	...

000d6768 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6768:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d676a:	4b09      	ldr	r3, [pc, #36]	; (d6790 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d676c:	4c09      	ldr	r4, [pc, #36]	; (d6794 <_GLOBAL__sub_I_System+0x2c>)
   d676e:	2202      	movs	r2, #2
   d6770:	2000      	movs	r0, #0
   d6772:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6774:	4b08      	ldr	r3, [pc, #32]	; (d6798 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6776:	6020      	str	r0, [r4, #0]
   d6778:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d677a:	71a0      	strb	r0, [r4, #6]
   d677c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d677e:	f7ff fe23 	bl	d63c8 <set_system_mode>
SystemClass System;
   d6782:	4620      	mov	r0, r4
   d6784:	4a05      	ldr	r2, [pc, #20]	; (d679c <_GLOBAL__sub_I_System+0x34>)
   d6786:	4906      	ldr	r1, [pc, #24]	; (d67a0 <_GLOBAL__sub_I_System+0x38>)
   d6788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d678c:	f001 b9bc 	b.w	d7b08 <__aeabi_atexit>
   d6790:	2003e668 	.word	0x2003e668
   d6794:	2003e65c 	.word	0x2003e65c
   d6798:	ffff0000 	.word	0xffff0000
   d679c:	2003e560 	.word	0x2003e560
   d67a0:	000d675b 	.word	0x000d675b

000d67a4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d67a4:	b510      	push	{r4, lr}
   d67a6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d67a8:	f002 f93c 	bl	d8a24 <strlen>
   d67ac:	3801      	subs	r0, #1
   d67ae:	1823      	adds	r3, r4, r0
   d67b0:	4620      	mov	r0, r4
	while(i<j){
   d67b2:	4283      	cmp	r3, r0
   d67b4:	d906      	bls.n	d67c4 <_Z11str_reversePc+0x20>
		c = *i;
   d67b6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d67b8:	7819      	ldrb	r1, [r3, #0]
   d67ba:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d67be:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d67c2:	e7f6      	b.n	d67b2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d67c4:	bd10      	pop	{r4, pc}

000d67c6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d67c6:	b570      	push	{r4, r5, r6, lr}
   d67c8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d67ca:	1e91      	subs	r1, r2, #2
   d67cc:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d67ce:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d67d0:	d822      	bhi.n	d6818 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d67d2:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d67d4:	b16d      	cbz	r5, d67f2 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d67d6:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d67da:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d67de:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d67e0:	2d09      	cmp	r5, #9
                *ptr += '0';
   d67e2:	bf94      	ite	ls
   d67e4:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d67e6:	3157      	addhi	r1, #87	; 0x57
   d67e8:	b2c9      	uxtb	r1, r1
   d67ea:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d67ee:	4635      	mov	r5, r6
	while(a){
   d67f0:	e7f0      	b.n	d67d4 <ultoa+0xe>
   d67f2:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d67f4:	4423      	add	r3, r4
            *ptr++ = '0';
   d67f6:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d67f8:	4293      	cmp	r3, r2
   d67fa:	d902      	bls.n	d6802 <ultoa+0x3c>
            *ptr++ = '0';
   d67fc:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6800:	e7fa      	b.n	d67f8 <ultoa+0x32>
   d6802:	1a1a      	subs	r2, r3, r0
   d6804:	4283      	cmp	r3, r0
   d6806:	bf38      	it	cc
   d6808:	2200      	movcc	r2, #0

	*ptr = '\0';
   d680a:	2300      	movs	r3, #0
   d680c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d680e:	4620      	mov	r0, r4
   d6810:	f7ff ffc8 	bl	d67a4 <_Z11str_reversePc>
	return buffer;
   d6814:	4620      	mov	r0, r4
}
   d6816:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6818:	2000      	movs	r0, #0
   d681a:	e7fc      	b.n	d6816 <ultoa+0x50>

000d681c <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d681c:	b570      	push	{r4, r5, r6, lr}
   d681e:	b086      	sub	sp, #24
   d6820:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d6822:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d6824:	4668      	mov	r0, sp
   d6826:	f000 fb43 	bl	d6eb0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d682a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d682c:	1d34      	adds	r4, r6, #4
   d682e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6830:	682b      	ldr	r3, [r5, #0]
   d6832:	7023      	strb	r3, [r4, #0]
    }
   d6834:	4630      	mov	r0, r6
   d6836:	b006      	add	sp, #24
   d6838:	bd70      	pop	{r4, r5, r6, pc}
	...

000d683c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6840:	ec57 6b10 	vmov	r6, r7, d0
   d6844:	4680      	mov	r8, r0
   d6846:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d6848:	ee10 0a10 	vmov	r0, s0
   d684c:	2200      	movs	r2, #0
   d684e:	2300      	movs	r3, #0
   d6850:	4639      	mov	r1, r7
   d6852:	f001 fea3 	bl	d859c <__aeabi_dcmplt>
   d6856:	b128      	cbz	r0, d6864 <_Z4dtoadhPc+0x28>
        val = -val;
   d6858:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d685c:	461f      	mov	r7, r3
        *sout++ = '-';
   d685e:	232d      	movs	r3, #45	; 0x2d
   d6860:	f804 3b01 	strb.w	r3, [r4], #1
   d6864:	2300      	movs	r3, #0
    }
    long scale = 1;
   d6866:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d686a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d686c:	b2d9      	uxtb	r1, r3
   d686e:	4588      	cmp	r8, r1
   d6870:	d903      	bls.n	d687a <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d6872:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d6876:	3301      	adds	r3, #1
   d6878:	e7f8      	b.n	d686c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d687a:	4648      	mov	r0, r9
   d687c:	f001 fbb2 	bl	d7fe4 <__aeabi_i2d>
   d6880:	4632      	mov	r2, r6
   d6882:	463b      	mov	r3, r7
   d6884:	f001 fc18 	bl	d80b8 <__aeabi_dmul>
   d6888:	4606      	mov	r6, r0
   d688a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d688c:	f001 fee6 	bl	d865c <__aeabi_d2ulz>
   d6890:	4605      	mov	r5, r0
   d6892:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d6894:	f001 fbda 	bl	d804c <__aeabi_ul2d>
   d6898:	4602      	mov	r2, r0
   d689a:	460b      	mov	r3, r1
   d689c:	4630      	mov	r0, r6
   d689e:	4639      	mov	r1, r7
   d68a0:	f001 fa52 	bl	d7d48 <__aeabi_dsub>
   d68a4:	4b13      	ldr	r3, [pc, #76]	; (d68f4 <_Z4dtoadhPc+0xb8>)
   d68a6:	2200      	movs	r2, #0
   d68a8:	f001 fe8c 	bl	d85c4 <__aeabi_dcmpge>
   d68ac:	b110      	cbz	r0, d68b4 <_Z4dtoadhPc+0x78>
        fixed++;
   d68ae:	3501      	adds	r5, #1
   d68b0:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d68b4:	464a      	mov	r2, r9
   d68b6:	4628      	mov	r0, r5
   d68b8:	17d3      	asrs	r3, r2, #31
   d68ba:	4651      	mov	r1, sl
   d68bc:	f001 feb6 	bl	d862c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d68c0:	2301      	movs	r3, #1
   d68c2:	4615      	mov	r5, r2
   d68c4:	4621      	mov	r1, r4
   d68c6:	220a      	movs	r2, #10
   d68c8:	f7ff ff7d 	bl	d67c6 <ultoa>
    if (prec) {
   d68cc:	f1b8 0f00 	cmp.w	r8, #0
   d68d0:	d00d      	beq.n	d68ee <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d68d2:	4620      	mov	r0, r4
   d68d4:	f002 f8a6 	bl	d8a24 <strlen>
        *sout++ = '.';
   d68d8:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d68da:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d68dc:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d68de:	220a      	movs	r2, #10
   d68e0:	4643      	mov	r3, r8
   d68e2:	4628      	mov	r0, r5
   d68e4:	3101      	adds	r1, #1
    }
}
   d68e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d68ea:	f7ff bf6c 	b.w	d67c6 <ultoa>
}
   d68ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68f2:	bf00      	nop
   d68f4:	3fe00000 	.word	0x3fe00000

000d68f8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d68f8:	b510      	push	{r4, lr}
   d68fa:	4604      	mov	r4, r0
{
	free(buffer);
   d68fc:	6800      	ldr	r0, [r0, #0]
   d68fe:	f7ff fe07 	bl	d6510 <free>
}
   d6902:	4620      	mov	r0, r4
   d6904:	bd10      	pop	{r4, pc}

000d6906 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6906:	b510      	push	{r4, lr}
   d6908:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d690a:	6800      	ldr	r0, [r0, #0]
   d690c:	b108      	cbz	r0, d6912 <_ZN6String10invalidateEv+0xc>
   d690e:	f7ff fdff 	bl	d6510 <free>
	buffer = NULL;
   d6912:	2300      	movs	r3, #0
	capacity = len = 0;
   d6914:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6918:	6023      	str	r3, [r4, #0]
}
   d691a:	bd10      	pop	{r4, pc}

000d691c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d691c:	b538      	push	{r3, r4, r5, lr}
   d691e:	4604      	mov	r4, r0
   d6920:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6922:	6800      	ldr	r0, [r0, #0]
   d6924:	3101      	adds	r1, #1
   d6926:	f7ff fdfb 	bl	d6520 <realloc>
	if (newbuffer) {
   d692a:	b110      	cbz	r0, d6932 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d692c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6930:	2001      	movs	r0, #1
	}
	return 0;
}
   d6932:	bd38      	pop	{r3, r4, r5, pc}

000d6934 <_ZN6String7reserveEj>:
{
   d6934:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6936:	6803      	ldr	r3, [r0, #0]
{
   d6938:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d693a:	b123      	cbz	r3, d6946 <_ZN6String7reserveEj+0x12>
   d693c:	6843      	ldr	r3, [r0, #4]
   d693e:	428b      	cmp	r3, r1
   d6940:	d301      	bcc.n	d6946 <_ZN6String7reserveEj+0x12>
   d6942:	2001      	movs	r0, #1
}
   d6944:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6946:	4620      	mov	r0, r4
   d6948:	f7ff ffe8 	bl	d691c <_ZN6String12changeBufferEj>
   d694c:	2800      	cmp	r0, #0
   d694e:	d0f9      	beq.n	d6944 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6950:	68a3      	ldr	r3, [r4, #8]
   d6952:	2b00      	cmp	r3, #0
   d6954:	d1f5      	bne.n	d6942 <_ZN6String7reserveEj+0xe>
   d6956:	6822      	ldr	r2, [r4, #0]
   d6958:	7013      	strb	r3, [r2, #0]
   d695a:	e7f2      	b.n	d6942 <_ZN6String7reserveEj+0xe>

000d695c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d695c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d695e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6960:	4611      	mov	r1, r2
   d6962:	9201      	str	r2, [sp, #4]
{
   d6964:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6966:	f7ff ffe5 	bl	d6934 <_ZN6String7reserveEj>
   d696a:	9a01      	ldr	r2, [sp, #4]
   d696c:	b928      	cbnz	r0, d697a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d696e:	4620      	mov	r0, r4
   d6970:	f7ff ffc9 	bl	d6906 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6974:	4620      	mov	r0, r4
   d6976:	b003      	add	sp, #12
   d6978:	bd30      	pop	{r4, r5, pc}
	len = length;
   d697a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d697c:	4629      	mov	r1, r5
   d697e:	6820      	ldr	r0, [r4, #0]
   d6980:	f002 f804 	bl	d898c <memcpy>
	buffer[len] = 0;
   d6984:	6822      	ldr	r2, [r4, #0]
   d6986:	68a3      	ldr	r3, [r4, #8]
   d6988:	2100      	movs	r1, #0
   d698a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d698c:	e7f2      	b.n	d6974 <_ZN6String4copyEPKcj+0x18>

000d698e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d698e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6990:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6992:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6996:	4604      	mov	r4, r0
	len = 0;
   d6998:	6083      	str	r3, [r0, #8]
	flags = 0;
   d699a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d699c:	b141      	cbz	r1, d69b0 <_ZN6StringC1EPKc+0x22>
   d699e:	4608      	mov	r0, r1
   d69a0:	9101      	str	r1, [sp, #4]
   d69a2:	f002 f83f 	bl	d8a24 <strlen>
   d69a6:	9901      	ldr	r1, [sp, #4]
   d69a8:	4602      	mov	r2, r0
   d69aa:	4620      	mov	r0, r4
   d69ac:	f7ff ffd6 	bl	d695c <_ZN6String4copyEPKcj>
}
   d69b0:	4620      	mov	r0, r4
   d69b2:	b002      	add	sp, #8
   d69b4:	bd10      	pop	{r4, pc}

000d69b6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d69b6:	b513      	push	{r0, r1, r4, lr}
   d69b8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d69ba:	b159      	cbz	r1, d69d4 <_ZN6StringaSEPKc+0x1e>
   d69bc:	4608      	mov	r0, r1
   d69be:	9101      	str	r1, [sp, #4]
   d69c0:	f002 f830 	bl	d8a24 <strlen>
   d69c4:	9901      	ldr	r1, [sp, #4]
   d69c6:	4602      	mov	r2, r0
   d69c8:	4620      	mov	r0, r4
   d69ca:	f7ff ffc7 	bl	d695c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d69ce:	4620      	mov	r0, r4
   d69d0:	b002      	add	sp, #8
   d69d2:	bd10      	pop	{r4, pc}
	else invalidate();
   d69d4:	f7ff ff97 	bl	d6906 <_ZN6String10invalidateEv>
   d69d8:	e7f9      	b.n	d69ce <_ZN6StringaSEPKc+0x18>

000d69da <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d69da:	b510      	push	{r4, lr}
   d69dc:	4604      	mov	r4, r0
   d69de:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d69e0:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d69e2:	4608      	mov	r0, r1
	capacity = 0;
   d69e4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d69e8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d69ea:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d69ec:	a901      	add	r1, sp, #4
   d69ee:	b2c0      	uxtb	r0, r0
   d69f0:	f7ff ff24 	bl	d683c <_Z4dtoadhPc>
        *this = buf;
   d69f4:	a901      	add	r1, sp, #4
   d69f6:	4620      	mov	r0, r4
   d69f8:	f7ff ffdd 	bl	d69b6 <_ZN6StringaSEPKc>
}
   d69fc:	4620      	mov	r0, r4
   d69fe:	b00a      	add	sp, #40	; 0x28
   d6a00:	bd10      	pop	{r4, pc}

000d6a02 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6a02:	b570      	push	{r4, r5, r6, lr}
   d6a04:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6a06:	460e      	mov	r6, r1
   d6a08:	b909      	cbnz	r1, d6a0e <_ZN6String6concatEPKcj+0xc>
   d6a0a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6a0c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6a0e:	b16a      	cbz	r2, d6a2c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6a10:	6884      	ldr	r4, [r0, #8]
   d6a12:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6a14:	4621      	mov	r1, r4
   d6a16:	f7ff ff8d 	bl	d6934 <_ZN6String7reserveEj>
   d6a1a:	2800      	cmp	r0, #0
   d6a1c:	d0f5      	beq.n	d6a0a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6a1e:	6828      	ldr	r0, [r5, #0]
   d6a20:	68ab      	ldr	r3, [r5, #8]
   d6a22:	4631      	mov	r1, r6
   d6a24:	4418      	add	r0, r3
   d6a26:	f001 fff5 	bl	d8a14 <strcpy>
	len = newlen;
   d6a2a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d6a2c:	2001      	movs	r0, #1
   d6a2e:	e7ed      	b.n	d6a0c <_ZN6String6concatEPKcj+0xa>

000d6a30 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d6a30:	688a      	ldr	r2, [r1, #8]
   d6a32:	6809      	ldr	r1, [r1, #0]
   d6a34:	f7ff bfe5 	b.w	d6a02 <_ZN6String6concatEPKcj>

000d6a38 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   d6a38:	b513      	push	{r0, r1, r4, lr}
   d6a3a:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   d6a3c:	4608      	mov	r0, r1
	if (!cstr) return 0;
   d6a3e:	b151      	cbz	r1, d6a56 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   d6a40:	9101      	str	r1, [sp, #4]
   d6a42:	f001 ffef 	bl	d8a24 <strlen>
   d6a46:	9901      	ldr	r1, [sp, #4]
   d6a48:	4602      	mov	r2, r0
   d6a4a:	4620      	mov	r0, r4
}
   d6a4c:	b002      	add	sp, #8
   d6a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   d6a52:	f7ff bfd6 	b.w	d6a02 <_ZN6String6concatEPKcj>
}
   d6a56:	b002      	add	sp, #8
   d6a58:	bd10      	pop	{r4, pc}

000d6a5a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6a5a:	b510      	push	{r4, lr}
   d6a5c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6a5e:	6800      	ldr	r0, [r0, #0]
   d6a60:	b108      	cbz	r0, d6a66 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6a62:	f7ff fb49 	bl	d60f8 <os_mutex_recursive_destroy>
    }
   d6a66:	4620      	mov	r0, r4
   d6a68:	bd10      	pop	{r4, pc}

000d6a6a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a6a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6a6c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6a6e:	4604      	mov	r4, r0
      if (_M_manager)
   d6a70:	b113      	cbz	r3, d6a78 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a72:	2203      	movs	r2, #3
   d6a74:	4601      	mov	r1, r0
   d6a76:	4798      	blx	r3
    }
   d6a78:	4620      	mov	r0, r4
   d6a7a:	bd10      	pop	{r4, pc}

000d6a7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d6a7c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6a7e:	4c06      	ldr	r4, [pc, #24]	; (d6a98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6a80:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6a82:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6a84:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6a86:	f7ff fb2f 	bl	d60e8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6a8a:	4620      	mov	r0, r4
   d6a8c:	4a03      	ldr	r2, [pc, #12]	; (d6a9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6a8e:	4904      	ldr	r1, [pc, #16]	; (d6aa0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6a94:	f001 b838 	b.w	d7b08 <__aeabi_atexit>
   d6a98:	2003e66c 	.word	0x2003e66c
   d6a9c:	2003e560 	.word	0x2003e560
   d6aa0:	000d6a5b 	.word	0x000d6a5b

000d6aa4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6aa6:	4606      	mov	r6, r0
   d6aa8:	460d      	mov	r5, r1
  size_t n = 0;
   d6aaa:	188f      	adds	r7, r1, r2
   d6aac:	2400      	movs	r4, #0
  while (size--) {
   d6aae:	42bd      	cmp	r5, r7
   d6ab0:	d00c      	beq.n	d6acc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6ab2:	6833      	ldr	r3, [r6, #0]
   d6ab4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6ab8:	689b      	ldr	r3, [r3, #8]
   d6aba:	4630      	mov	r0, r6
   d6abc:	4798      	blx	r3
     if (chunk>=0)
   d6abe:	1e03      	subs	r3, r0, #0
   d6ac0:	db01      	blt.n	d6ac6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6ac2:	441c      	add	r4, r3
  while (size--) {
   d6ac4:	e7f3      	b.n	d6aae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6ac6:	2c00      	cmp	r4, #0
   d6ac8:	bf08      	it	eq
   d6aca:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6acc:	4620      	mov	r0, r4
   d6ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ad0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6ad0:	b513      	push	{r0, r1, r4, lr}
   d6ad2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6ad4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6ad6:	b159      	cbz	r1, d6af0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6ad8:	9101      	str	r1, [sp, #4]
   d6ada:	f001 ffa3 	bl	d8a24 <strlen>
   d6ade:	6823      	ldr	r3, [r4, #0]
   d6ae0:	9901      	ldr	r1, [sp, #4]
   d6ae2:	68db      	ldr	r3, [r3, #12]
   d6ae4:	4602      	mov	r2, r0
   d6ae6:	4620      	mov	r0, r4
    }
   d6ae8:	b002      	add	sp, #8
   d6aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6aee:	4718      	bx	r3
    }
   d6af0:	b002      	add	sp, #8
   d6af2:	bd10      	pop	{r4, pc}

000d6af4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6af4:	b508      	push	{r3, lr}
  return write(str);
   d6af6:	f7ff ffeb 	bl	d6ad0 <_ZN5Print5writeEPKc>
}
   d6afa:	bd08      	pop	{r3, pc}

000d6afc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6afc:	6803      	ldr	r3, [r0, #0]
   d6afe:	689b      	ldr	r3, [r3, #8]
   d6b00:	4718      	bx	r3

000d6b02 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b02:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6b04:	210d      	movs	r1, #13
{
   d6b06:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6b08:	f7ff fff8 	bl	d6afc <_ZN5Print5printEc>
  n += print('\n');
   d6b0c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6b0e:	4604      	mov	r4, r0
  n += print('\n');
   d6b10:	4628      	mov	r0, r5
   d6b12:	f7ff fff3 	bl	d6afc <_ZN5Print5printEc>
  return n;
}
   d6b16:	4420      	add	r0, r4
   d6b18:	bd38      	pop	{r3, r4, r5, pc}

000d6b1a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6b1a:	b538      	push	{r3, r4, r5, lr}
   d6b1c:	4605      	mov	r5, r0
  return write(str);
   d6b1e:	f7ff ffd7 	bl	d6ad0 <_ZN5Print5writeEPKc>
   d6b22:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6b24:	4628      	mov	r0, r5
   d6b26:	f7ff ffec 	bl	d6b02 <_ZN5Print7printlnEv>
  return n;
}
   d6b2a:	4420      	add	r0, r4
   d6b2c:	bd38      	pop	{r3, r4, r5, pc}

000d6b2e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6b2e:	b530      	push	{r4, r5, lr}
   d6b30:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6b32:	2300      	movs	r3, #0
   d6b34:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6b38:	2a01      	cmp	r2, #1
   d6b3a:	bf98      	it	ls
   d6b3c:	220a      	movls	r2, #10
   d6b3e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6b40:	460d      	mov	r5, r1
   d6b42:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6b46:	fb01 5312 	mls	r3, r1, r2, r5
   d6b4a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6b4e:	2b09      	cmp	r3, #9
   d6b50:	bf94      	ite	ls
   d6b52:	3330      	addls	r3, #48	; 0x30
   d6b54:	3337      	addhi	r3, #55	; 0x37
   d6b56:	b2db      	uxtb	r3, r3
  } while(n);
   d6b58:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6b5a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6b5e:	d9ef      	bls.n	d6b40 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6b60:	4621      	mov	r1, r4
   d6b62:	f7ff ffb5 	bl	d6ad0 <_ZN5Print5writeEPKc>
}
   d6b66:	b00b      	add	sp, #44	; 0x2c
   d6b68:	bd30      	pop	{r4, r5, pc}

000d6b6a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d6b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b6e:	b086      	sub	sp, #24
   d6b70:	af00      	add	r7, sp, #0
   d6b72:	4605      	mov	r5, r0
   d6b74:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d6b76:	1d38      	adds	r0, r7, #4
   d6b78:	2114      	movs	r1, #20
{
   d6b7a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d6b7c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d6b7e:	f7ff fcdf 	bl	d6540 <vsnprintf>

    if (n<bufsize)
   d6b82:	2813      	cmp	r0, #19
   d6b84:	d80e      	bhi.n	d6ba4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d6b86:	1d39      	adds	r1, r7, #4
   d6b88:	4628      	mov	r0, r5
   d6b8a:	f7ff ffa1 	bl	d6ad0 <_ZN5Print5writeEPKc>
   d6b8e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d6b90:	b11e      	cbz	r6, d6b9a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d6b92:	4628      	mov	r0, r5
   d6b94:	f7ff ffb5 	bl	d6b02 <_ZN5Print7printlnEv>
   d6b98:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6b9a:	4620      	mov	r0, r4
   d6b9c:	3718      	adds	r7, #24
   d6b9e:	46bd      	mov	sp, r7
   d6ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6ba4:	f100 0308 	add.w	r3, r0, #8
   d6ba8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6bac:	46e8      	mov	r8, sp
        char bigger[n+1];
   d6bae:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d6bb2:	4622      	mov	r2, r4
   d6bb4:	1c41      	adds	r1, r0, #1
   d6bb6:	683b      	ldr	r3, [r7, #0]
   d6bb8:	4668      	mov	r0, sp
   d6bba:	f7ff fcc1 	bl	d6540 <vsnprintf>
  return write(str);
   d6bbe:	4669      	mov	r1, sp
   d6bc0:	4628      	mov	r0, r5
   d6bc2:	f7ff ff85 	bl	d6ad0 <_ZN5Print5writeEPKc>
   d6bc6:	4604      	mov	r4, r0
   d6bc8:	46c5      	mov	sp, r8
   d6bca:	e7e1      	b.n	d6b90 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6bcc <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6bcc:	b510      	push	{r4, lr}
   d6bce:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6bd0:	f7ff fa72 	bl	d60b8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6bd4:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6bd6:	6823      	ldr	r3, [r4, #0]
   d6bd8:	4620      	mov	r0, r4
   d6bda:	695b      	ldr	r3, [r3, #20]
   d6bdc:	4798      	blx	r3
    if (c >= 0) return c;
   d6bde:	2800      	cmp	r0, #0
   d6be0:	da08      	bge.n	d6bf4 <_ZN6Stream9timedReadEv+0x28>
   d6be2:	f7ff fa69 	bl	d60b8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d6be6:	68e3      	ldr	r3, [r4, #12]
   d6be8:	1ac0      	subs	r0, r0, r3
   d6bea:	68a3      	ldr	r3, [r4, #8]
   d6bec:	4298      	cmp	r0, r3
   d6bee:	d3f2      	bcc.n	d6bd6 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d6bf0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6bf4:	bd10      	pop	{r4, pc}

000d6bf6 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d6bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6bf8:	4606      	mov	r6, r0
   d6bfa:	460d      	mov	r5, r1
   d6bfc:	4617      	mov	r7, r2
  size_t count = 0;
   d6bfe:	2400      	movs	r4, #0
  while (count < length) {
   d6c00:	42bc      	cmp	r4, r7
   d6c02:	d007      	beq.n	d6c14 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d6c04:	4630      	mov	r0, r6
   d6c06:	f7ff ffe1 	bl	d6bcc <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d6c0a:	1e03      	subs	r3, r0, #0
   d6c0c:	db02      	blt.n	d6c14 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d6c0e:	552b      	strb	r3, [r5, r4]
    count++;
   d6c10:	3401      	adds	r4, #1
  while (count < length) {
   d6c12:	e7f5      	b.n	d6c00 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d6c14:	4620      	mov	r0, r4
   d6c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c18 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6c18:	2300      	movs	r3, #0
   d6c1a:	6840      	ldr	r0, [r0, #4]
   d6c1c:	461a      	mov	r2, r3
   d6c1e:	4619      	mov	r1, r3
   d6c20:	f7ff bc1e 	b.w	d6460 <network_on>

000d6c24 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6c24:	4b01      	ldr	r3, [pc, #4]	; (d6c2c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6c26:	4a02      	ldr	r2, [pc, #8]	; (d6c30 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6c28:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6c2a:	4770      	bx	lr
   d6c2c:	2003e670 	.word	0x2003e670
   d6c30:	000d9ba0 	.word	0x000d9ba0

000d6c34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6c34:	4b02      	ldr	r3, [pc, #8]	; (d6c40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6c36:	681a      	ldr	r2, [r3, #0]
   d6c38:	4b02      	ldr	r3, [pc, #8]	; (d6c44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6c3a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6c3c:	4770      	bx	lr
   d6c3e:	bf00      	nop
   d6c40:	2003e4f4 	.word	0x2003e4f4
   d6c44:	2003e674 	.word	0x2003e674

000d6c48 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6c48:	2100      	movs	r1, #0
   d6c4a:	f7ff bbc5 	b.w	d63d8 <system_delay_ms>

000d6c4e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6c4e:	b510      	push	{r4, lr}
   d6c50:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6c52:	f7ff ff0a 	bl	d6a6a <_ZNSt14_Function_baseD1Ev>
   d6c56:	4620      	mov	r0, r4
   d6c58:	bd10      	pop	{r4, pc}
	...

000d6c5c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6c5c:	4803      	ldr	r0, [pc, #12]	; (d6c6c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6c5e:	4a04      	ldr	r2, [pc, #16]	; (d6c70 <_GLOBAL__sub_I_RGB+0x14>)
   d6c60:	4904      	ldr	r1, [pc, #16]	; (d6c74 <_GLOBAL__sub_I_RGB+0x18>)
   d6c62:	2300      	movs	r3, #0
   d6c64:	6083      	str	r3, [r0, #8]
   d6c66:	f000 bf4f 	b.w	d7b08 <__aeabi_atexit>
   d6c6a:	bf00      	nop
   d6c6c:	2003e678 	.word	0x2003e678
   d6c70:	2003e560 	.word	0x2003e560
   d6c74:	000d6c4f 	.word	0x000d6c4f

000d6c78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6c78:	4b01      	ldr	r3, [pc, #4]	; (d6c80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6c7a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6c7c:	4770      	bx	lr
   d6c7e:	bf00      	nop
   d6c80:	2003e4f8 	.word	0x2003e4f8

000d6c84 <serialEventRun>:
{
   d6c84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6c86:	4b0b      	ldr	r3, [pc, #44]	; (d6cb4 <serialEventRun+0x30>)
   d6c88:	b143      	cbz	r3, d6c9c <serialEventRun+0x18>
   d6c8a:	f000 f979 	bl	d6f80 <_Z16_fetch_usbserialv>
   d6c8e:	6803      	ldr	r3, [r0, #0]
   d6c90:	691b      	ldr	r3, [r3, #16]
   d6c92:	4798      	blx	r3
   d6c94:	2800      	cmp	r0, #0
   d6c96:	dd01      	ble.n	d6c9c <serialEventRun+0x18>
        serialEvent();
   d6c98:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6c9c:	4b06      	ldr	r3, [pc, #24]	; (d6cb8 <serialEventRun+0x34>)
   d6c9e:	b143      	cbz	r3, d6cb2 <serialEventRun+0x2e>
   d6ca0:	f000 f9ec 	bl	d707c <_Z22__fetch_global_Serial1v>
   d6ca4:	6803      	ldr	r3, [r0, #0]
   d6ca6:	691b      	ldr	r3, [r3, #16]
   d6ca8:	4798      	blx	r3
   d6caa:	2800      	cmp	r0, #0
   d6cac:	dd01      	ble.n	d6cb2 <serialEventRun+0x2e>
        serialEvent1();
   d6cae:	f3af 8000 	nop.w
}
   d6cb2:	bd08      	pop	{r3, pc}
	...

000d6cbc <_post_loop>:
{
   d6cbc:	b508      	push	{r3, lr}
	serialEventRun();
   d6cbe:	f7ff ffe1 	bl	d6c84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6cc2:	f7ff f9f9 	bl	d60b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6cc6:	4b01      	ldr	r3, [pc, #4]	; (d6ccc <_post_loop+0x10>)
   d6cc8:	6018      	str	r0, [r3, #0]
}
   d6cca:	bd08      	pop	{r3, pc}
   d6ccc:	2003e7d8 	.word	0x2003e7d8

000d6cd0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6cd0:	4802      	ldr	r0, [pc, #8]	; (d6cdc <_Z33system_initialize_user_backup_ramv+0xc>)
   d6cd2:	4a03      	ldr	r2, [pc, #12]	; (d6ce0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6cd4:	4903      	ldr	r1, [pc, #12]	; (d6ce4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6cd6:	1a12      	subs	r2, r2, r0
   d6cd8:	f001 be58 	b.w	d898c <memcpy>
   d6cdc:	2003f400 	.word	0x2003f400
   d6ce0:	2003f404 	.word	0x2003f404
   d6ce4:	000d9f78 	.word	0x000d9f78

000d6ce8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6ce8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6cea:	2300      	movs	r3, #0
   d6cec:	9300      	str	r3, [sp, #0]
   d6cee:	461a      	mov	r2, r3
   d6cf0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6cf4:	f7ff fb8a 	bl	d640c <system_ctrl_set_result>
}
   d6cf8:	b003      	add	sp, #12
   d6cfa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6d00 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6d00:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6d02:	8843      	ldrh	r3, [r0, #2]
   d6d04:	2b0a      	cmp	r3, #10
   d6d06:	d008      	beq.n	d6d1a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6d08:	2b50      	cmp	r3, #80	; 0x50
   d6d0a:	d10b      	bne.n	d6d24 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6d0c:	4b09      	ldr	r3, [pc, #36]	; (d6d34 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6d0e:	681b      	ldr	r3, [r3, #0]
   d6d10:	b14b      	cbz	r3, d6d26 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6d12:	b003      	add	sp, #12
   d6d14:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6d18:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6d1a:	f7ff ffe5 	bl	d6ce8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6d1e:	b003      	add	sp, #12
   d6d20:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6d24:	2300      	movs	r3, #0
   d6d26:	9300      	str	r3, [sp, #0]
   d6d28:	461a      	mov	r2, r3
   d6d2a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6d2e:	f7ff fb6d 	bl	d640c <system_ctrl_set_result>
}
   d6d32:	e7f4      	b.n	d6d1e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6d34:	2003e68c 	.word	0x2003e68c

000d6d38 <module_user_init_hook>:
{
   d6d38:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6d3a:	4c12      	ldr	r4, [pc, #72]	; (d6d84 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6d3c:	4812      	ldr	r0, [pc, #72]	; (d6d88 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6d3e:	4d13      	ldr	r5, [pc, #76]	; (d6d8c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6d40:	2100      	movs	r1, #0
   d6d42:	f7ff fc0d 	bl	d6560 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6d46:	6823      	ldr	r3, [r4, #0]
   d6d48:	42ab      	cmp	r3, r5
   d6d4a:	4b11      	ldr	r3, [pc, #68]	; (d6d90 <module_user_init_hook+0x58>)
   d6d4c:	bf0c      	ite	eq
   d6d4e:	2201      	moveq	r2, #1
   d6d50:	2200      	movne	r2, #0
   d6d52:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6d54:	d002      	beq.n	d6d5c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6d56:	f7ff ffbb 	bl	d6cd0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6d5a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6d5c:	f7ff f99c 	bl	d6098 <HAL_RNG_GetRandomNumber>
   d6d60:	4604      	mov	r4, r0
    srand(seed);
   d6d62:	f001 fe29 	bl	d89b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6d66:	4b0b      	ldr	r3, [pc, #44]	; (d6d94 <module_user_init_hook+0x5c>)
   d6d68:	b113      	cbz	r3, d6d70 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6d6a:	4620      	mov	r0, r4
   d6d6c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6d70:	2100      	movs	r1, #0
   d6d72:	4808      	ldr	r0, [pc, #32]	; (d6d94 <module_user_init_hook+0x5c>)
   d6d74:	f7ff fbbc 	bl	d64f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6d7c:	4806      	ldr	r0, [pc, #24]	; (d6d98 <module_user_init_hook+0x60>)
   d6d7e:	2100      	movs	r1, #0
   d6d80:	f7ff bb3a 	b.w	d63f8 <system_ctrl_set_app_request_handler>
   d6d84:	2003f400 	.word	0x2003f400
   d6d88:	000d6c79 	.word	0x000d6c79
   d6d8c:	9a271c1e 	.word	0x9a271c1e
   d6d90:	2003e688 	.word	0x2003e688
   d6d94:	00000000 	.word	0x00000000
   d6d98:	000d6d01 	.word	0x000d6d01

000d6d9c <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d6d9c:	4770      	bx	lr

000d6d9e <_ZN9IPAddressD0Ev>:
   d6d9e:	b510      	push	{r4, lr}
   d6da0:	2118      	movs	r1, #24
   d6da2:	4604      	mov	r4, r0
   d6da4:	f000 feb5 	bl	d7b12 <_ZdlPvj>
   d6da8:	4620      	mov	r0, r4
   d6daa:	bd10      	pop	{r4, pc}

000d6dac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6dac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6dae:	7d03      	ldrb	r3, [r0, #20]
   d6db0:	2b06      	cmp	r3, #6
{
   d6db2:	b08d      	sub	sp, #52	; 0x34
   d6db4:	460e      	mov	r6, r1
   d6db6:	f100 0704 	add.w	r7, r0, #4
   d6dba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6dbe:	d012      	beq.n	d6de6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d6dc0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6dc4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6dc8:	220a      	movs	r2, #10
   d6dca:	4630      	mov	r0, r6
   d6dcc:	f7ff feaf 	bl	d6b2e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6dd0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6dd2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6dd4:	d019      	beq.n	d6e0a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6dd6:	2c00      	cmp	r4, #0
   d6dd8:	d0f4      	beq.n	d6dc4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6dda:	212e      	movs	r1, #46	; 0x2e
   d6ddc:	4630      	mov	r0, r6
   d6dde:	f7ff fe8d 	bl	d6afc <_ZN5Print5printEc>
   d6de2:	4404      	add	r4, r0
   d6de4:	e7ee      	b.n	d6dc4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6de6:	232f      	movs	r3, #47	; 0x2f
   d6de8:	466a      	mov	r2, sp
   d6dea:	4639      	mov	r1, r7
   d6dec:	200a      	movs	r0, #10
		buf[0] = 0;
   d6dee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6df2:	f7ff f989 	bl	d6108 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6df6:	4668      	mov	r0, sp
   d6df8:	f001 fe14 	bl	d8a24 <strlen>
   d6dfc:	6833      	ldr	r3, [r6, #0]
   d6dfe:	4602      	mov	r2, r0
   d6e00:	68db      	ldr	r3, [r3, #12]
   d6e02:	4669      	mov	r1, sp
   d6e04:	4630      	mov	r0, r6
   d6e06:	4798      	blx	r3
   d6e08:	4604      	mov	r4, r0
    }
    return n;
}
   d6e0a:	4620      	mov	r0, r4
   d6e0c:	b00d      	add	sp, #52	; 0x34
   d6e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6e10 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6e10:	b510      	push	{r4, lr}
   d6e12:	4b05      	ldr	r3, [pc, #20]	; (d6e28 <_ZN9IPAddressC1Ev+0x18>)
   d6e14:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6e16:	2211      	movs	r2, #17
   d6e18:	f840 3b04 	str.w	r3, [r0], #4
   d6e1c:	2100      	movs	r1, #0
   d6e1e:	f001 fdc3 	bl	d89a8 <memset>
}
   d6e22:	4620      	mov	r0, r4
   d6e24:	bd10      	pop	{r4, pc}
   d6e26:	bf00      	nop
   d6e28:	000d9bc8 	.word	0x000d9bc8

000d6e2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6e2c:	4603      	mov	r3, r0
   d6e2e:	4a07      	ldr	r2, [pc, #28]	; (d6e4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6e30:	b510      	push	{r4, lr}
   d6e32:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6e36:	f101 0210 	add.w	r2, r1, #16
   d6e3a:	f851 4b04 	ldr.w	r4, [r1], #4
   d6e3e:	f843 4b04 	str.w	r4, [r3], #4
   d6e42:	4291      	cmp	r1, r2
   d6e44:	d1f9      	bne.n	d6e3a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6e46:	780a      	ldrb	r2, [r1, #0]
   d6e48:	701a      	strb	r2, [r3, #0]
}
   d6e4a:	bd10      	pop	{r4, pc}
   d6e4c:	000d9bc8 	.word	0x000d9bc8

000d6e50 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d6e50:	7d03      	ldrb	r3, [r0, #20]
   d6e52:	2b04      	cmp	r3, #4
   d6e54:	d104      	bne.n	d6e60 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d6e56:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6e58:	3800      	subs	r0, #0
   d6e5a:	bf18      	it	ne
   d6e5c:	2001      	movne	r0, #1
   d6e5e:	4770      	bx	lr
    } else if (version() == 6) {
   d6e60:	2b06      	cmp	r3, #6
   d6e62:	d107      	bne.n	d6e74 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6e64:	6843      	ldr	r3, [r0, #4]
   d6e66:	b93b      	cbnz	r3, d6e78 <_ZNK9IPAddresscvbEv+0x28>
   d6e68:	6883      	ldr	r3, [r0, #8]
   d6e6a:	b92b      	cbnz	r3, d6e78 <_ZNK9IPAddresscvbEv+0x28>
   d6e6c:	68c3      	ldr	r3, [r0, #12]
   d6e6e:	b91b      	cbnz	r3, d6e78 <_ZNK9IPAddresscvbEv+0x28>
   d6e70:	6900      	ldr	r0, [r0, #16]
   d6e72:	e7f1      	b.n	d6e58 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d6e74:	2000      	movs	r0, #0
   d6e76:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6e78:	2001      	movs	r0, #1
}
   d6e7a:	4770      	bx	lr

000d6e7c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6e7c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6e7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6e82:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6e86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6e8a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6e8e:	2304      	movs	r3, #4
   d6e90:	6041      	str	r1, [r0, #4]
   d6e92:	7503      	strb	r3, [r0, #20]
}
   d6e94:	bd10      	pop	{r4, pc}
	...

000d6e98 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d6e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6e9a:	4d04      	ldr	r5, [pc, #16]	; (d6eac <_ZN9IPAddressC1Ehhhh+0x14>)
   d6e9c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d6e9e:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d6ea2:	9500      	str	r5, [sp, #0]
   d6ea4:	f7ff ffea 	bl	d6e7c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6ea8:	b003      	add	sp, #12
   d6eaa:	bd30      	pop	{r4, r5, pc}
   d6eac:	000d9bc8 	.word	0x000d9bc8

000d6eb0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6eb0:	b513      	push	{r0, r1, r4, lr}
   d6eb2:	4b05      	ldr	r3, [pc, #20]	; (d6ec8 <_ZN9IPAddressC1EPKh+0x18>)
   d6eb4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6eb6:	78cb      	ldrb	r3, [r1, #3]
   d6eb8:	9300      	str	r3, [sp, #0]
   d6eba:	788b      	ldrb	r3, [r1, #2]
   d6ebc:	784a      	ldrb	r2, [r1, #1]
   d6ebe:	7809      	ldrb	r1, [r1, #0]
   d6ec0:	f7ff ffdc 	bl	d6e7c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6ec4:	b002      	add	sp, #8
   d6ec6:	bd10      	pop	{r4, pc}
   d6ec8:	000d9bc8 	.word	0x000d9bc8

000d6ecc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ecc:	7441      	strb	r1, [r0, #17]
}
   d6ece:	4770      	bx	lr

000d6ed0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6ed0:	4770      	bx	lr

000d6ed2 <_ZN9USBSerial4readEv>:
{
   d6ed2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6ed4:	2100      	movs	r1, #0
   d6ed6:	7c00      	ldrb	r0, [r0, #16]
   d6ed8:	f7ff fa4e 	bl	d6378 <HAL_USB_USART_Receive_Data>
}
   d6edc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6ee0:	bd08      	pop	{r3, pc}

000d6ee2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6ee2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6ee4:	2101      	movs	r1, #1
   d6ee6:	7c00      	ldrb	r0, [r0, #16]
   d6ee8:	f7ff fa46 	bl	d6378 <HAL_USB_USART_Receive_Data>
}
   d6eec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6ef0:	bd08      	pop	{r3, pc}

000d6ef2 <_ZN9USBSerial17availableForWriteEv>:
{
   d6ef2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6ef4:	7c00      	ldrb	r0, [r0, #16]
   d6ef6:	f7ff fa37 	bl	d6368 <HAL_USB_USART_Available_Data_For_Write>
}
   d6efa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6efe:	bd08      	pop	{r3, pc}

000d6f00 <_ZN9USBSerial9availableEv>:
{
   d6f00:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6f02:	7c00      	ldrb	r0, [r0, #16]
   d6f04:	f7ff fa28 	bl	d6358 <HAL_USB_USART_Available_Data>
}
   d6f08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f0c:	bd08      	pop	{r3, pc}

000d6f0e <_ZN9USBSerial5writeEh>:
{
   d6f0e:	b513      	push	{r0, r1, r4, lr}
   d6f10:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f12:	7c00      	ldrb	r0, [r0, #16]
{
   d6f14:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f16:	f7ff fa27 	bl	d6368 <HAL_USB_USART_Available_Data_For_Write>
   d6f1a:	2800      	cmp	r0, #0
   d6f1c:	9901      	ldr	r1, [sp, #4]
   d6f1e:	dc01      	bgt.n	d6f24 <_ZN9USBSerial5writeEh+0x16>
   d6f20:	7c60      	ldrb	r0, [r4, #17]
   d6f22:	b120      	cbz	r0, d6f2e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6f24:	7c20      	ldrb	r0, [r4, #16]
   d6f26:	f7ff fa2f 	bl	d6388 <HAL_USB_USART_Send_Data>
   d6f2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6f2e:	b002      	add	sp, #8
   d6f30:	bd10      	pop	{r4, pc}

000d6f32 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6f32:	7c00      	ldrb	r0, [r0, #16]
   d6f34:	f7ff ba30 	b.w	d6398 <HAL_USB_USART_Flush_Data>

000d6f38 <_ZN9USBSerialD0Ev>:
   d6f38:	b510      	push	{r4, lr}
   d6f3a:	2114      	movs	r1, #20
   d6f3c:	4604      	mov	r4, r0
   d6f3e:	f000 fde8 	bl	d7b12 <_ZdlPvj>
   d6f42:	4620      	mov	r0, r4
   d6f44:	bd10      	pop	{r4, pc}
	...

000d6f48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6f48:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6f4e:	4604      	mov	r4, r0
   d6f50:	4608      	mov	r0, r1
   d6f52:	2100      	movs	r1, #0
   d6f54:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6f58:	4b04      	ldr	r3, [pc, #16]	; (d6f6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6f5a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6f5c:	2301      	movs	r3, #1
  _serial = serial;
   d6f5e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6f60:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6f62:	4611      	mov	r1, r2
   d6f64:	f7ff f9f0 	bl	d6348 <HAL_USB_USART_Init>
}
   d6f68:	4620      	mov	r0, r4
   d6f6a:	bd10      	pop	{r4, pc}
   d6f6c:	000d9bdc 	.word	0x000d9bdc

000d6f70 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6f70:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6f72:	2214      	movs	r2, #20
{
   d6f74:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6f76:	2100      	movs	r1, #0
   d6f78:	f001 fd16 	bl	d89a8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6f7c:	4620      	mov	r0, r4
   d6f7e:	bd10      	pop	{r4, pc}

000d6f80 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6f80:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6f82:	4c10      	ldr	r4, [pc, #64]	; (d6fc4 <_Z16_fetch_usbserialv+0x44>)
{
   d6f84:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6f86:	a803      	add	r0, sp, #12
   d6f88:	f7ff fff2 	bl	d6f70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6f8c:	7821      	ldrb	r1, [r4, #0]
   d6f8e:	f3bf 8f5b 	dmb	ish
   d6f92:	f011 0101 	ands.w	r1, r1, #1
   d6f96:	d111      	bne.n	d6fbc <_Z16_fetch_usbserialv+0x3c>
   d6f98:	4620      	mov	r0, r4
   d6f9a:	9101      	str	r1, [sp, #4]
   d6f9c:	f7fd f88c 	bl	d40b8 <__cxa_guard_acquire>
   d6fa0:	9901      	ldr	r1, [sp, #4]
   d6fa2:	b158      	cbz	r0, d6fbc <_Z16_fetch_usbserialv+0x3c>
   d6fa4:	aa03      	add	r2, sp, #12
   d6fa6:	4808      	ldr	r0, [pc, #32]	; (d6fc8 <_Z16_fetch_usbserialv+0x48>)
   d6fa8:	f7ff ffce 	bl	d6f48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6fac:	4620      	mov	r0, r4
   d6fae:	f7fd f888 	bl	d40c2 <__cxa_guard_release>
   d6fb2:	4a06      	ldr	r2, [pc, #24]	; (d6fcc <_Z16_fetch_usbserialv+0x4c>)
   d6fb4:	4906      	ldr	r1, [pc, #24]	; (d6fd0 <_Z16_fetch_usbserialv+0x50>)
   d6fb6:	4804      	ldr	r0, [pc, #16]	; (d6fc8 <_Z16_fetch_usbserialv+0x48>)
   d6fb8:	f000 fda6 	bl	d7b08 <__aeabi_atexit>
	return _usbserial;
}
   d6fbc:	4802      	ldr	r0, [pc, #8]	; (d6fc8 <_Z16_fetch_usbserialv+0x48>)
   d6fbe:	b008      	add	sp, #32
   d6fc0:	bd10      	pop	{r4, pc}
   d6fc2:	bf00      	nop
   d6fc4:	2003e690 	.word	0x2003e690
   d6fc8:	2003e694 	.word	0x2003e694
   d6fcc:	2003e560 	.word	0x2003e560
   d6fd0:	000d6ed1 	.word	0x000d6ed1

000d6fd4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6fd4:	4770      	bx	lr

000d6fd6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6fd6:	7441      	strb	r1, [r0, #17]
}
   d6fd8:	4770      	bx	lr

000d6fda <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6fda:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6fdc:	7c00      	ldrb	r0, [r0, #16]
   d6fde:	f7ff f8e3 	bl	d61a8 <hal_usart_available_data_for_write>
}
   d6fe2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6fe6:	bd08      	pop	{r3, pc}

000d6fe8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6fe8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6fea:	7c00      	ldrb	r0, [r0, #16]
   d6fec:	f7ff f8b4 	bl	d6158 <hal_usart_available>
}
   d6ff0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ff4:	bd08      	pop	{r3, pc}

000d6ff6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6ff6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6ff8:	7c00      	ldrb	r0, [r0, #16]
   d6ffa:	f7ff f8bd 	bl	d6178 <hal_usart_peek>
}
   d6ffe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7002:	bd08      	pop	{r3, pc}

000d7004 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7004:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7006:	7c00      	ldrb	r0, [r0, #16]
   d7008:	f7ff f8ae 	bl	d6168 <hal_usart_read>
}
   d700c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7010:	bd08      	pop	{r3, pc}

000d7012 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7012:	7c00      	ldrb	r0, [r0, #16]
   d7014:	f7ff b8b8 	b.w	d6188 <hal_usart_flush>

000d7018 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7018:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d701a:	7c45      	ldrb	r5, [r0, #17]
{
   d701c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d701e:	b12d      	cbz	r5, d702c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7020:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7022:	b003      	add	sp, #12
   d7024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7028:	f7ff b88e 	b.w	d6148 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d702c:	7c00      	ldrb	r0, [r0, #16]
   d702e:	9101      	str	r1, [sp, #4]
   d7030:	f7ff f8ba 	bl	d61a8 <hal_usart_available_data_for_write>
   d7034:	2800      	cmp	r0, #0
   d7036:	9901      	ldr	r1, [sp, #4]
   d7038:	dcf2      	bgt.n	d7020 <_ZN11USARTSerial5writeEh+0x8>
}
   d703a:	4628      	mov	r0, r5
   d703c:	b003      	add	sp, #12
   d703e:	bd30      	pop	{r4, r5, pc}

000d7040 <_ZN11USARTSerialD0Ev>:
   d7040:	b510      	push	{r4, lr}
   d7042:	2114      	movs	r1, #20
   d7044:	4604      	mov	r4, r0
   d7046:	f000 fd64 	bl	d7b12 <_ZdlPvj>
   d704a:	4620      	mov	r0, r4
   d704c:	bd10      	pop	{r4, pc}
	...

000d7050 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7050:	b510      	push	{r4, lr}
   d7052:	f04f 0c00 	mov.w	ip, #0
   d7056:	4604      	mov	r4, r0
   d7058:	4608      	mov	r0, r1
   d705a:	4611      	mov	r1, r2
   d705c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7060:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7064:	4a04      	ldr	r2, [pc, #16]	; (d7078 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7066:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7068:	2201      	movs	r2, #1
  _serial = serial;
   d706a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d706c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d706e:	461a      	mov	r2, r3
   d7070:	f7ff f862 	bl	d6138 <hal_usart_init>
}
   d7074:	4620      	mov	r0, r4
   d7076:	bd10      	pop	{r4, pc}
   d7078:	000d9c0c 	.word	0x000d9c0c

000d707c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d707c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d707e:	4c0e      	ldr	r4, [pc, #56]	; (d70b8 <_Z22__fetch_global_Serial1v+0x3c>)
   d7080:	7821      	ldrb	r1, [r4, #0]
   d7082:	f3bf 8f5b 	dmb	ish
   d7086:	f011 0101 	ands.w	r1, r1, #1
   d708a:	d112      	bne.n	d70b2 <_Z22__fetch_global_Serial1v+0x36>
   d708c:	4620      	mov	r0, r4
   d708e:	9101      	str	r1, [sp, #4]
   d7090:	f7fd f812 	bl	d40b8 <__cxa_guard_acquire>
   d7094:	9901      	ldr	r1, [sp, #4]
   d7096:	b160      	cbz	r0, d70b2 <_Z22__fetch_global_Serial1v+0x36>
   d7098:	4a08      	ldr	r2, [pc, #32]	; (d70bc <_Z22__fetch_global_Serial1v+0x40>)
   d709a:	4b09      	ldr	r3, [pc, #36]	; (d70c0 <_Z22__fetch_global_Serial1v+0x44>)
   d709c:	4809      	ldr	r0, [pc, #36]	; (d70c4 <_Z22__fetch_global_Serial1v+0x48>)
   d709e:	f7ff ffd7 	bl	d7050 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d70a2:	4620      	mov	r0, r4
   d70a4:	f7fd f80d 	bl	d40c2 <__cxa_guard_release>
   d70a8:	4a07      	ldr	r2, [pc, #28]	; (d70c8 <_Z22__fetch_global_Serial1v+0x4c>)
   d70aa:	4908      	ldr	r1, [pc, #32]	; (d70cc <_Z22__fetch_global_Serial1v+0x50>)
   d70ac:	4805      	ldr	r0, [pc, #20]	; (d70c4 <_Z22__fetch_global_Serial1v+0x48>)
   d70ae:	f000 fd2b 	bl	d7b08 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d70b2:	4804      	ldr	r0, [pc, #16]	; (d70c4 <_Z22__fetch_global_Serial1v+0x48>)
   d70b4:	b002      	add	sp, #8
   d70b6:	bd10      	pop	{r4, pc}
   d70b8:	2003e6a8 	.word	0x2003e6a8
   d70bc:	2003e6ac 	.word	0x2003e6ac
   d70c0:	2003e730 	.word	0x2003e730
   d70c4:	2003e7b4 	.word	0x2003e7b4
   d70c8:	2003e560 	.word	0x2003e560
   d70cc:	000d6fd5 	.word	0x000d6fd5

000d70d0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d70d0:	4770      	bx	lr

000d70d2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d70d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70d4:	4606      	mov	r6, r0
   d70d6:	4615      	mov	r5, r2
   d70d8:	460c      	mov	r4, r1
   d70da:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d70dc:	42bc      	cmp	r4, r7
   d70de:	d006      	beq.n	d70ee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d70e0:	6833      	ldr	r3, [r6, #0]
   d70e2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d70e6:	689b      	ldr	r3, [r3, #8]
   d70e8:	4630      	mov	r0, r6
   d70ea:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d70ec:	e7f6      	b.n	d70dc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d70ee:	4628      	mov	r0, r5
   d70f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70f2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d70f2:	7c00      	ldrb	r0, [r0, #16]
   d70f4:	2200      	movs	r2, #0
   d70f6:	f7ff b87f 	b.w	d61f8 <hal_i2c_write>

000d70fa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d70fa:	7c00      	ldrb	r0, [r0, #16]
   d70fc:	2100      	movs	r1, #0
   d70fe:	f7ff b883 	b.w	d6208 <hal_i2c_available>

000d7102 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7102:	7c00      	ldrb	r0, [r0, #16]
   d7104:	2100      	movs	r1, #0
   d7106:	f7ff b887 	b.w	d6218 <hal_i2c_read>

000d710a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d710a:	7c00      	ldrb	r0, [r0, #16]
   d710c:	2100      	movs	r1, #0
   d710e:	f7ff b88b 	b.w	d6228 <hal_i2c_peek>

000d7112 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7112:	7c00      	ldrb	r0, [r0, #16]
   d7114:	2100      	movs	r1, #0
   d7116:	f7ff b88f 	b.w	d6238 <hal_i2c_flush>

000d711a <_ZN7TwoWireD0Ev>:
   d711a:	b510      	push	{r4, lr}
   d711c:	2114      	movs	r1, #20
   d711e:	4604      	mov	r4, r0
   d7120:	f000 fcf7 	bl	d7b12 <_ZdlPvj>
   d7124:	4620      	mov	r0, r4
   d7126:	bd10      	pop	{r4, pc}

000d7128 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7128:	b510      	push	{r4, lr}
   d712a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d712e:	4604      	mov	r4, r0
   d7130:	4608      	mov	r0, r1
   d7132:	2100      	movs	r1, #0
   d7134:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7138:	4b03      	ldr	r3, [pc, #12]	; (d7148 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d713a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d713c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d713e:	4611      	mov	r1, r2
   d7140:	f7ff f88a 	bl	d6258 <hal_i2c_init>
}
   d7144:	4620      	mov	r0, r4
   d7146:	bd10      	pop	{r4, pc}
   d7148:	000d9c3c 	.word	0x000d9c3c

000d714c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d714c:	7c00      	ldrb	r0, [r0, #16]
   d714e:	2200      	movs	r2, #0
   d7150:	f7ff b832 	b.w	d61b8 <hal_i2c_set_speed>

000d7154 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7154:	2300      	movs	r3, #0
   d7156:	7c00      	ldrb	r0, [r0, #16]
   d7158:	461a      	mov	r2, r3
   d715a:	4619      	mov	r1, r3
   d715c:	f7ff b834 	b.w	d61c8 <hal_i2c_begin>

000d7160 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7160:	7c00      	ldrb	r0, [r0, #16]
   d7162:	2200      	movs	r2, #0
   d7164:	f7ff b838 	b.w	d61d8 <hal_i2c_begin_transmission>

000d7168 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7168:	b2c9      	uxtb	r1, r1
   d716a:	f7ff bff9 	b.w	d7160 <_ZN7TwoWire17beginTransmissionEh>

000d716e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d716e:	7c00      	ldrb	r0, [r0, #16]
   d7170:	2200      	movs	r2, #0
   d7172:	f7ff b839 	b.w	d61e8 <hal_i2c_end_transmission>

000d7176 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7176:	2101      	movs	r1, #1
   d7178:	f7ff bff9 	b.w	d716e <_ZN7TwoWire15endTransmissionEh>

000d717c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d717c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d717e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d7180:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7184:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7186:	2201      	movs	r2, #1
   d7188:	f04f 33ff 	mov.w	r3, #4294967295
   d718c:	f10d 0107 	add.w	r1, sp, #7
   d7190:	47a0      	blx	r4
}
   d7192:	b002      	add	sp, #8
   d7194:	bd10      	pop	{r4, pc}

000d7196 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7196:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7198:	6803      	ldr	r3, [r0, #0]
   d719a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d719c:	f04f 33ff 	mov.w	r3, #4294967295
   d71a0:	46a4      	mov	ip, r4
}
   d71a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d71a6:	4760      	bx	ip

000d71a8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d71a8:	b513      	push	{r0, r1, r4, lr}
   d71aa:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d71ac:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d71ae:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d71b2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d71b4:	f10d 0107 	add.w	r1, sp, #7
   d71b8:	2201      	movs	r2, #1
   d71ba:	47a0      	blx	r4
}
   d71bc:	b002      	add	sp, #8
   d71be:	bd10      	pop	{r4, pc}

000d71c0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d71c0:	4770      	bx	lr

000d71c2 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d71c2:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d71c4:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d71c6:	681a      	ldr	r2, [r3, #0]
   d71c8:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d71ca:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d71cc:	da10      	bge.n	d71f0 <_ZN9TCPClient9connectedEv+0x2e>
   d71ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d71d2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d71d6:	429a      	cmp	r2, r3
   d71d8:	d10a      	bne.n	d71f0 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d71da:	6803      	ldr	r3, [r0, #0]
   d71dc:	691b      	ldr	r3, [r3, #16]
   d71de:	4798      	blx	r3
        if (!rv) {
   d71e0:	4604      	mov	r4, r0
   d71e2:	b928      	cbnz	r0, d71f0 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d71e4:	682b      	ldr	r3, [r5, #0]
   d71e6:	4628      	mov	r0, r5
   d71e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d71ea:	4798      	blx	r3
        rv = available();
   d71ec:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d71ee:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d71f0:	2001      	movs	r0, #1
   d71f2:	e7fc      	b.n	d71ee <_ZN9TCPClient9connectedEv+0x2c>

000d71f4 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d71f4:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d71f6:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d71f8:	43c0      	mvns	r0, r0
   d71fa:	0fc0      	lsrs	r0, r0, #31
   d71fc:	4770      	bx	lr

000d71fe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d71fe:	4770      	bx	lr

000d7200 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7200:	4b06      	ldr	r3, [pc, #24]	; (d721c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d7202:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7204:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d7206:	f100 040c 	add.w	r4, r0, #12
	    ||
   d720a:	d005      	beq.n	d7218 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d720c:	4608      	mov	r0, r1
   d720e:	f000 fc85 	bl	d7b1c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d7212:	2800      	cmp	r0, #0
	return nullptr;
   d7214:	bf08      	it	eq
   d7216:	2400      	moveq	r4, #0
      }
   d7218:	4620      	mov	r0, r4
   d721a:	bd10      	pop	{r4, pc}
   d721c:	000d9b98 	.word	0x000d9b98

000d7220 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7220:	b510      	push	{r4, lr}
   d7222:	21ac      	movs	r1, #172	; 0xac
   d7224:	4604      	mov	r4, r0
   d7226:	f000 fc74 	bl	d7b12 <_ZdlPvj>
   d722a:	4620      	mov	r0, r4
   d722c:	bd10      	pop	{r4, pc}

000d722e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d722e:	f7fc bf36 	b.w	d409e <_ZdlPv>

000d7232 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d7236:	f04f 0800 	mov.w	r8, #0
   d723a:	b086      	sub	sp, #24
   d723c:	461d      	mov	r5, r3
   d723e:	f8c0 8004 	str.w	r8, [r0, #4]
   d7242:	4604      	mov	r4, r0
   d7244:	460e      	mov	r6, r1
   d7246:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7248:	4641      	mov	r1, r8
   d724a:	2210      	movs	r2, #16
   d724c:	a802      	add	r0, sp, #8
   d724e:	f001 fbab 	bl	d89a8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7252:	1c6b      	adds	r3, r5, #1
   d7254:	d009      	beq.n	d726a <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d725a:	fbb5 f3f0 	udiv	r3, r5, r0
   d725e:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7262:	fb00 5313 	mls	r3, r0, r3, r5
   d7266:	4358      	muls	r0, r3
   d7268:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d726a:	6960      	ldr	r0, [r4, #20]
   d726c:	2310      	movs	r3, #16
   d726e:	9300      	str	r3, [sp, #0]
   d7270:	6800      	ldr	r0, [r0, #0]
   d7272:	ab02      	add	r3, sp, #8
   d7274:	f241 0205 	movw	r2, #4101	; 0x1005
   d7278:	f640 71ff 	movw	r1, #4095	; 0xfff
   d727c:	f7fe fff4 	bl	d6268 <sock_setsockopt>
    if (ret < 0) {
   d7280:	2800      	cmp	r0, #0
   d7282:	da07      	bge.n	d7294 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7284:	f7ff f964 	bl	d6550 <__errno>
   d7288:	6803      	ldr	r3, [r0, #0]
   d728a:	6063      	str	r3, [r4, #4]
        return 0;
   d728c:	2000      	movs	r0, #0
}
   d728e:	b006      	add	sp, #24
   d7290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7294:	6960      	ldr	r0, [r4, #20]
   d7296:	2300      	movs	r3, #0
   d7298:	6800      	ldr	r0, [r0, #0]
   d729a:	463a      	mov	r2, r7
   d729c:	4631      	mov	r1, r6
   d729e:	f7ff f803 	bl	d62a8 <sock_send>
    if (ret < 0) {
   d72a2:	1e03      	subs	r3, r0, #0
   d72a4:	dbee      	blt.n	d7284 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d72a6:	4618      	mov	r0, r3
   d72a8:	e7f1      	b.n	d728e <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d72ac <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d72ac:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d72ae:	6984      	ldr	r4, [r0, #24]
   d72b0:	4b0a      	ldr	r3, [pc, #40]	; (d72dc <_ZN9TCPClientD1Ev+0x30>)
   d72b2:	6003      	str	r3, [r0, #0]
   d72b4:	4605      	mov	r5, r0
   d72b6:	b17c      	cbz	r4, d72d8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d72b8:	6863      	ldr	r3, [r4, #4]
   d72ba:	3b01      	subs	r3, #1
   d72bc:	6063      	str	r3, [r4, #4]
   d72be:	b95b      	cbnz	r3, d72d8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d72c0:	6823      	ldr	r3, [r4, #0]
   d72c2:	4620      	mov	r0, r4
   d72c4:	689b      	ldr	r3, [r3, #8]
   d72c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d72c8:	68a3      	ldr	r3, [r4, #8]
   d72ca:	3b01      	subs	r3, #1
   d72cc:	60a3      	str	r3, [r4, #8]
   d72ce:	b91b      	cbnz	r3, d72d8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d72d0:	6823      	ldr	r3, [r4, #0]
   d72d2:	4620      	mov	r0, r4
   d72d4:	68db      	ldr	r3, [r3, #12]
   d72d6:	4798      	blx	r3
   d72d8:	4628      	mov	r0, r5
   d72da:	bd38      	pop	{r3, r4, r5, pc}
   d72dc:	000d9c98 	.word	0x000d9c98

000d72e0 <_ZN9TCPClientD0Ev>:
   d72e0:	b510      	push	{r4, lr}
   d72e2:	4604      	mov	r4, r0
   d72e4:	f7ff ffe2 	bl	d72ac <_ZN9TCPClientD1Ev>
   d72e8:	4620      	mov	r0, r4
   d72ea:	211c      	movs	r1, #28
   d72ec:	f000 fc11 	bl	d7b12 <_ZdlPvj>
   d72f0:	4620      	mov	r0, r4
   d72f2:	bd10      	pop	{r4, pc}

000d72f4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d72f4:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d72f6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d72f8:	4b05      	ldr	r3, [pc, #20]	; (d7310 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d72fa:	4604      	mov	r4, r0
   d72fc:	358c      	adds	r5, #140	; 0x8c
   d72fe:	f844 3b04 	str.w	r3, [r4], #4
   d7302:	4606      	mov	r6, r0
   d7304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7308:	682b      	ldr	r3, [r5, #0]
   d730a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d730c:	4630      	mov	r0, r6
   d730e:	bd70      	pop	{r4, r5, r6, pc}
   d7310:	000d9bc8 	.word	0x000d9bc8

000d7314 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d7314:	b510      	push	{r4, lr}
   d7316:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7318:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d731c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7320:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d7322:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7324:	d005      	beq.n	d7332 <_ZN9TCPClient4peekEv+0x1e>
   d7326:	6963      	ldr	r3, [r4, #20]
   d7328:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d732c:	4413      	add	r3, r2
   d732e:	7918      	ldrb	r0, [r3, #4]
}
   d7330:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7332:	6803      	ldr	r3, [r0, #0]
   d7334:	691b      	ldr	r3, [r3, #16]
   d7336:	4798      	blx	r3
   d7338:	2800      	cmp	r0, #0
   d733a:	d1f4      	bne.n	d7326 <_ZN9TCPClient4peekEv+0x12>
   d733c:	f04f 30ff 	mov.w	r0, #4294967295
   d7340:	e7f6      	b.n	d7330 <_ZN9TCPClient4peekEv+0x1c>

000d7342 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7342:	b510      	push	{r4, lr}
   d7344:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7346:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d734a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d734e:	429a      	cmp	r2, r3
int TCPClient::read() {
   d7350:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7352:	d008      	beq.n	d7366 <_ZN9TCPClient4readEv+0x24>
   d7354:	6963      	ldr	r3, [r4, #20]
   d7356:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d735a:	1c51      	adds	r1, r2, #1
   d735c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d7360:	4413      	add	r3, r2
   d7362:	7918      	ldrb	r0, [r3, #4]
}
   d7364:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7366:	6803      	ldr	r3, [r0, #0]
   d7368:	691b      	ldr	r3, [r3, #16]
   d736a:	4798      	blx	r3
   d736c:	2800      	cmp	r0, #0
   d736e:	d1f1      	bne.n	d7354 <_ZN9TCPClient4readEv+0x12>
   d7370:	f04f 30ff 	mov.w	r0, #4294967295
   d7374:	e7f6      	b.n	d7364 <_ZN9TCPClient4readEv+0x22>

000d7376 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7378:	6943      	ldr	r3, [r0, #20]
   d737a:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d737c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7380:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7384:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7386:	4605      	mov	r5, r0
   d7388:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d738a:	d016      	beq.n	d73ba <_ZN9TCPClient4readEPhj+0x44>
   d738c:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d738e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7392:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7396:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7398:	42bc      	cmp	r4, r7
   d739a:	bf28      	it	cs
   d739c:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d739e:	3304      	adds	r3, #4
   d73a0:	4622      	mov	r2, r4
   d73a2:	4419      	add	r1, r3
   d73a4:	4630      	mov	r0, r6
   d73a6:	f001 faf1 	bl	d898c <memcpy>
   d73aa:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d73ac:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d73b0:	4423      	add	r3, r4
   d73b2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d73b6:	4620      	mov	r0, r4
   d73b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d73ba:	6803      	ldr	r3, [r0, #0]
   d73bc:	691b      	ldr	r3, [r3, #16]
   d73be:	4798      	blx	r3
   d73c0:	2800      	cmp	r0, #0
   d73c2:	d1e3      	bne.n	d738c <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d73c4:	f04f 34ff 	mov.w	r4, #4294967295
   d73c8:	e7f5      	b.n	d73b6 <_ZN9TCPClient4readEPhj+0x40>

000d73ca <_ZN9TCPClient12flush_bufferEv>:
   d73ca:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d73cc:	2300      	movs	r3, #0
   d73ce:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d73d2:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d73d4:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d73d8:	4770      	bx	lr

000d73da <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d73da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d73de:	461f      	mov	r7, r3
    stop();
   d73e0:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d73e2:	460c      	mov	r4, r1
    stop();
   d73e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d73e6:	b08a      	sub	sp, #40	; 0x28
   d73e8:	4605      	mov	r5, r0
   d73ea:	4616      	mov	r6, r2
    stop();
   d73ec:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d73ee:	7d23      	ldrb	r3, [r4, #20]
   d73f0:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d73f4:	2b04      	cmp	r3, #4
   d73f6:	bf0c      	ite	eq
   d73f8:	2002      	moveq	r0, #2
   d73fa:	200a      	movne	r0, #10
   d73fc:	2206      	movs	r2, #6
   d73fe:	2101      	movs	r1, #1
   d7400:	f7fe ff5a 	bl	d62b8 <sock_socket>
   d7404:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7408:	696b      	ldr	r3, [r5, #20]
   d740a:	681b      	ldr	r3, [r3, #0]
   d740c:	2b00      	cmp	r3, #0
   d740e:	da08      	bge.n	d7422 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d7410:	682b      	ldr	r3, [r5, #0]
   d7412:	4628      	mov	r0, r5
   d7414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7416:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7418:	4798      	blx	r3
}
   d741a:	4620      	mov	r0, r4
   d741c:	b00a      	add	sp, #40	; 0x28
   d741e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7422:	4628      	mov	r0, r5
   d7424:	f7ff ffd1 	bl	d73ca <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7428:	b1b7      	cbz	r7, d7458 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d742a:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d742c:	a903      	add	r1, sp, #12
   d742e:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d7430:	9303      	str	r3, [sp, #12]
   d7432:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7436:	f7fe fe27 	bl	d6088 <if_index_to_name>
   d743a:	2800      	cmp	r0, #0
   d743c:	d1e8      	bne.n	d7410 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d743e:	6968      	ldr	r0, [r5, #20]
   d7440:	2306      	movs	r3, #6
   d7442:	9300      	str	r3, [sp, #0]
   d7444:	6800      	ldr	r0, [r0, #0]
   d7446:	ab03      	add	r3, sp, #12
   d7448:	f241 020b 	movw	r2, #4107	; 0x100b
   d744c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7450:	f7fe ff0a 	bl	d6268 <sock_setsockopt>
   d7454:	2800      	cmp	r0, #0
   d7456:	d1db      	bne.n	d7410 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7458:	221c      	movs	r2, #28
   d745a:	2100      	movs	r1, #0
   d745c:	a803      	add	r0, sp, #12
   d745e:	f001 faa3 	bl	d89a8 <memset>
    if (ip.version() == 4) {
   d7462:	7d23      	ldrb	r3, [r4, #20]
   d7464:	2b04      	cmp	r3, #4
   d7466:	d11d      	bne.n	d74a4 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7468:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d746c:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d746e:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7472:	f7fe fe59 	bl	d6128 <inet_htons>
   d7476:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d747a:	6860      	ldr	r0, [r4, #4]
   d747c:	f7fe fe4c 	bl	d6118 <inet_htonl>
   d7480:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7482:	696b      	ldr	r3, [r5, #20]
   d7484:	221c      	movs	r2, #28
   d7486:	6818      	ldr	r0, [r3, #0]
   d7488:	a903      	add	r1, sp, #12
   d748a:	f7fe fefd 	bl	d6288 <sock_connect>
   d748e:	2800      	cmp	r0, #0
   d7490:	d1be      	bne.n	d7410 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7492:	3404      	adds	r4, #4
   d7494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7496:	696d      	ldr	r5, [r5, #20]
   d7498:	358c      	adds	r5, #140	; 0x8c
   d749a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d749c:	6823      	ldr	r3, [r4, #0]
   d749e:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d74a0:	2401      	movs	r4, #1
   d74a2:	e7ba      	b.n	d741a <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d74a4:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d74a8:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d74aa:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d74ae:	f7fe fe3b 	bl	d6128 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d74b2:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d74b4:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d74b8:	1d23      	adds	r3, r4, #4
   d74ba:	f104 0714 	add.w	r7, r4, #20
   d74be:	6818      	ldr	r0, [r3, #0]
   d74c0:	6859      	ldr	r1, [r3, #4]
   d74c2:	4632      	mov	r2, r6
   d74c4:	c203      	stmia	r2!, {r0, r1}
   d74c6:	3308      	adds	r3, #8
   d74c8:	42bb      	cmp	r3, r7
   d74ca:	4616      	mov	r6, r2
   d74cc:	d1f7      	bne.n	d74be <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d74ce:	e7d8      	b.n	d7482 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d74d0 <_ZN9TCPClient9availableEv>:
{
   d74d0:	b530      	push	{r4, r5, lr}
   d74d2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d74d4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d74d8:	b08b      	sub	sp, #44	; 0x2c
   d74da:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d74dc:	b12b      	cbz	r3, d74ea <_ZN9TCPClient9availableEv+0x1a>
   d74de:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d74e2:	429a      	cmp	r2, r3
   d74e4:	d101      	bne.n	d74ea <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d74e6:	f7ff ff70 	bl	d73ca <_ZN9TCPClient12flush_bufferEv>
   d74ea:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d74ec:	6808      	ldr	r0, [r1, #0]
   d74ee:	2800      	cmp	r0, #0
   d74f0:	db18      	blt.n	d7524 <_ZN9TCPClient9availableEv+0x54>
   d74f2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d74f6:	2d7f      	cmp	r5, #127	; 0x7f
   d74f8:	d814      	bhi.n	d7524 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d74fa:	3104      	adds	r1, #4
   d74fc:	2308      	movs	r3, #8
   d74fe:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7502:	4429      	add	r1, r5
   d7504:	f7fe fec8 	bl	d6298 <sock_recv>
            if (ret > 0) {
   d7508:	2800      	cmp	r0, #0
   d750a:	dd13      	ble.n	d7534 <_ZN9TCPClient9availableEv+0x64>
   d750c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d750e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7512:	b90a      	cbnz	r2, d7518 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7514:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7518:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d751a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d751e:	4410      	add	r0, r2
   d7520:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7524:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7526:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d752a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d752e:	1ac0      	subs	r0, r0, r3
   d7530:	b00b      	add	sp, #44	; 0x2c
   d7532:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7534:	f7ff f80c 	bl	d6550 <__errno>
   d7538:	6803      	ldr	r3, [r0, #0]
   d753a:	2b0b      	cmp	r3, #11
   d753c:	d0f2      	beq.n	d7524 <_ZN9TCPClient9availableEv+0x54>
   d753e:	f7ff f807 	bl	d6550 <__errno>
   d7542:	6803      	ldr	r3, [r0, #0]
   d7544:	2b0b      	cmp	r3, #11
   d7546:	d0ed      	beq.n	d7524 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7548:	2320      	movs	r3, #32
   d754a:	2500      	movs	r5, #0
   d754c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d7550:	f7fe fffe 	bl	d6550 <__errno>
   d7554:	6803      	ldr	r3, [r0, #0]
   d7556:	9301      	str	r3, [sp, #4]
   d7558:	4b08      	ldr	r3, [pc, #32]	; (d757c <_ZN9TCPClient9availableEv+0xac>)
   d755a:	4909      	ldr	r1, [pc, #36]	; (d7580 <_ZN9TCPClient9availableEv+0xb0>)
   d755c:	9300      	str	r3, [sp, #0]
   d755e:	aa02      	add	r2, sp, #8
   d7560:	462b      	mov	r3, r5
   d7562:	2032      	movs	r0, #50	; 0x32
   d7564:	f7fe ff28 	bl	d63b8 <log_message>
                    sock_close(d_->sock);
   d7568:	6963      	ldr	r3, [r4, #20]
   d756a:	6818      	ldr	r0, [r3, #0]
   d756c:	f7fe fe84 	bl	d6278 <sock_close>
   d7570:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7572:	f04f 32ff 	mov.w	r2, #4294967295
   d7576:	601a      	str	r2, [r3, #0]
   d7578:	e7d4      	b.n	d7524 <_ZN9TCPClient9availableEv+0x54>
   d757a:	bf00      	nop
   d757c:	000d9c63 	.word	0x000d9c63
   d7580:	000d9c5c 	.word	0x000d9c5c

000d7584 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7584:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7586:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d7588:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d758a:	6818      	ldr	r0, [r3, #0]
   d758c:	2800      	cmp	r0, #0
   d758e:	db01      	blt.n	d7594 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7590:	f7fe fe72 	bl	d6278 <sock_close>
   d7594:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d7596:	f04f 32ff 	mov.w	r2, #4294967295
   d759a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d759c:	6960      	ldr	r0, [r4, #20]
   d759e:	2211      	movs	r2, #17
   d75a0:	2100      	movs	r1, #0
   d75a2:	308c      	adds	r0, #140	; 0x8c
   d75a4:	f001 fa00 	bl	d89a8 <memset>
    flush_buffer();
   d75a8:	4620      	mov	r0, r4
}
   d75aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d75ae:	f7ff bf0c 	b.w	d73ca <_ZN9TCPClient12flush_bufferEv>

000d75b2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d75b2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d75b4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d75b6:	4604      	mov	r4, r0
          total(0) {
   d75b8:	6001      	str	r1, [r0, #0]
   d75ba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d75be:	3088      	adds	r0, #136	; 0x88
   d75c0:	f7ff fc26 	bl	d6e10 <_ZN9IPAddressC1Ev>
}
   d75c4:	4620      	mov	r0, r4
   d75c6:	bd10      	pop	{r4, pc}

000d75c8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d75c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d75ca:	2300      	movs	r3, #0
   d75cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d75d0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d75d4:	4a0e      	ldr	r2, [pc, #56]	; (d7610 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d75d6:	6103      	str	r3, [r0, #16]
   d75d8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d75da:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d75dc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d75de:	20ac      	movs	r0, #172	; 0xac
   d75e0:	9101      	str	r1, [sp, #4]
   d75e2:	f7fc fd58 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d75e6:	1e05      	subs	r5, r0, #0
   d75e8:	f105 060c 	add.w	r6, r5, #12
   d75ec:	d008      	beq.n	d7600 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d75ee:	2301      	movs	r3, #1
   d75f0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d75f4:	4b07      	ldr	r3, [pc, #28]	; (d7614 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d75f6:	9901      	ldr	r1, [sp, #4]
   d75f8:	602b      	str	r3, [r5, #0]
   d75fa:	4630      	mov	r0, r6
   d75fc:	f7ff ffd9 	bl	d75b2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7600:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7602:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7606:	f7ff fee0 	bl	d73ca <_ZN9TCPClient12flush_bufferEv>
}
   d760a:	b002      	add	sp, #8
   d760c:	bd70      	pop	{r4, r5, r6, pc}
   d760e:	bf00      	nop
   d7610:	000d9c98 	.word	0x000d9c98
   d7614:	000d9c7c 	.word	0x000d9c7c

000d7618 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7618:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d761a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d761e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7620:	f7ff ffd2 	bl	d75c8 <_ZN9TCPClientC1Ei>
}
   d7624:	4620      	mov	r0, r4
   d7626:	bd10      	pop	{r4, pc}

000d7628 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7628:	b510      	push	{r4, lr}
   d762a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d762c:	6800      	ldr	r0, [r0, #0]
   d762e:	2800      	cmp	r0, #0
   d7630:	db01      	blt.n	d7636 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7632:	f7fe fe21 	bl	d6278 <sock_close>
    }
}
   d7636:	4620      	mov	r0, r4
   d7638:	bd10      	pop	{r4, pc}

000d763a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d763a:	300c      	adds	r0, #12
   d763c:	f7ff bff4 	b.w	d7628 <_ZN9TCPClient4DataD1Ev>

000d7640 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7644:	4698      	mov	r8, r3
    stop();
   d7646:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7648:	b093      	sub	sp, #76	; 0x4c
   d764a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d764c:	2400      	movs	r4, #0
    stop();
   d764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7650:	4606      	mov	r6, r0
   d7652:	4617      	mov	r7, r2
    stop();
   d7654:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7656:	4628      	mov	r0, r5
   d7658:	466b      	mov	r3, sp
   d765a:	4622      	mov	r2, r4
   d765c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d765e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7660:	f7fe fcca 	bl	d5ff8 <netdb_getaddrinfo>
   d7664:	4605      	mov	r5, r0
   d7666:	2800      	cmp	r0, #0
   d7668:	d163      	bne.n	d7732 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d766a:	9b00      	ldr	r3, [sp, #0]
   d766c:	2b00      	cmp	r3, #0
   d766e:	d04b      	beq.n	d7708 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7670:	695b      	ldr	r3, [r3, #20]
   d7672:	2b00      	cmp	r3, #0
   d7674:	d048      	beq.n	d7708 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d7676:	a806      	add	r0, sp, #24
   d7678:	f7ff fbca 	bl	d6e10 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d767c:	9b00      	ldr	r3, [sp, #0]
   d767e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7680:	7863      	ldrb	r3, [r4, #1]
   d7682:	2b02      	cmp	r3, #2
   d7684:	d104      	bne.n	d7690 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7686:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7688:	a806      	add	r0, sp, #24
   d768a:	f7ff f8c7 	bl	d681c <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d768e:	e026      	b.n	d76de <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d7690:	2b0a      	cmp	r3, #10
   d7692:	d124      	bne.n	d76de <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7694:	2211      	movs	r2, #17
   d7696:	4629      	mov	r1, r5
   d7698:	a801      	add	r0, sp, #4
   d769a:	f001 f985 	bl	d89a8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d769e:	68a3      	ldr	r3, [r4, #8]
   d76a0:	2b00      	cmp	r3, #0
   d76a2:	d038      	beq.n	d7716 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d76a4:	f104 0308 	add.w	r3, r4, #8
   d76a8:	f10d 0c04 	add.w	ip, sp, #4
   d76ac:	3418      	adds	r4, #24
   d76ae:	6818      	ldr	r0, [r3, #0]
   d76b0:	6859      	ldr	r1, [r3, #4]
   d76b2:	4662      	mov	r2, ip
   d76b4:	c203      	stmia	r2!, {r0, r1}
   d76b6:	3308      	adds	r3, #8
   d76b8:	42a3      	cmp	r3, r4
   d76ba:	4694      	mov	ip, r2
   d76bc:	d1f7      	bne.n	d76ae <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d76be:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d76c0:	a901      	add	r1, sp, #4
   d76c2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d76c4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d76c8:	f7ff fbb0 	bl	d6e2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d76cc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d76d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d76d4:	ac07      	add	r4, sp, #28
   d76d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d76d8:	f8dc 3000 	ldr.w	r3, [ip]
   d76dc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d76de:	a806      	add	r0, sp, #24
   d76e0:	f7ff fbb6 	bl	d6e50 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d76e4:	b180      	cbz	r0, d7708 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d76e6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d76e8:	ad07      	add	r5, sp, #28
   d76ea:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d76ee:	4b12      	ldr	r3, [pc, #72]	; (d7738 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d76f0:	930c      	str	r3, [sp, #48]	; 0x30
   d76f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d76f4:	ac0d      	add	r4, sp, #52	; 0x34
   d76f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d76f8:	682b      	ldr	r3, [r5, #0]
   d76fa:	7023      	strb	r3, [r4, #0]
   d76fc:	463a      	mov	r2, r7
   d76fe:	4643      	mov	r3, r8
   d7700:	a90c      	add	r1, sp, #48	; 0x30
   d7702:	4630      	mov	r0, r6
   d7704:	47c8      	blx	r9
   d7706:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7708:	9800      	ldr	r0, [sp, #0]
   d770a:	f7fe fc6d 	bl	d5fe8 <netdb_freeaddrinfo>
}
   d770e:	4628      	mov	r0, r5
   d7710:	b013      	add	sp, #76	; 0x4c
   d7712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7716:	68e3      	ldr	r3, [r4, #12]
   d7718:	2b00      	cmp	r3, #0
   d771a:	d1c3      	bne.n	d76a4 <_ZN9TCPClient7connectEPKctm+0x64>
   d771c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7720:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7724:	f7fe fcf8 	bl	d6118 <inet_htonl>
   d7728:	4581      	cmp	r9, r0
   d772a:	d1bb      	bne.n	d76a4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d772c:	f104 0114 	add.w	r1, r4, #20
   d7730:	e7aa      	b.n	d7688 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7732:	4625      	mov	r5, r4
   d7734:	e7e8      	b.n	d7708 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7736:	bf00      	nop
   d7738:	000d9bc8 	.word	0x000d9bc8

000d773c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d773c:	2200      	movs	r2, #0
   d773e:	6840      	ldr	r0, [r0, #4]
   d7740:	4611      	mov	r1, r2
   d7742:	f7fe be85 	b.w	d6450 <network_ready>

000d7746 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7746:	2200      	movs	r2, #0
   d7748:	6840      	ldr	r0, [r0, #4]
   d774a:	4611      	mov	r1, r2
   d774c:	f7fe bea0 	b.w	d6490 <network_listening>

000d7750 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7750:	2200      	movs	r2, #0
   d7752:	6840      	ldr	r0, [r0, #4]
   d7754:	4611      	mov	r1, r2
   d7756:	f7fe beab 	b.w	d64b0 <network_get_listen_timeout>

000d775a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d775a:	6840      	ldr	r0, [r0, #4]
   d775c:	2200      	movs	r2, #0
   d775e:	f7fe be9f 	b.w	d64a0 <network_set_listen_timeout>

000d7762 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7762:	6840      	ldr	r0, [r0, #4]
   d7764:	2200      	movs	r2, #0
   d7766:	f081 0101 	eor.w	r1, r1, #1
   d776a:	f7fe be89 	b.w	d6480 <network_listen>

000d776e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d776e:	2300      	movs	r3, #0
   d7770:	6840      	ldr	r0, [r0, #4]
   d7772:	461a      	mov	r2, r3
   d7774:	4619      	mov	r1, r3
   d7776:	f7fe be7b 	b.w	d6470 <network_off>

000d777a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d777a:	2200      	movs	r2, #0
   d777c:	6840      	ldr	r0, [r0, #4]
   d777e:	4611      	mov	r1, r2
   d7780:	f7fe be56 	b.w	d6430 <network_connecting>

000d7784 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7784:	6840      	ldr	r0, [r0, #4]
   d7786:	2200      	movs	r2, #0
   d7788:	2102      	movs	r1, #2
   d778a:	f7fe be59 	b.w	d6440 <network_disconnect>

000d778e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d778e:	2300      	movs	r3, #0
   d7790:	6840      	ldr	r0, [r0, #4]
   d7792:	461a      	mov	r2, r3
   d7794:	f7fe be44 	b.w	d6420 <network_connect>

000d7798 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7798:	4b02      	ldr	r3, [pc, #8]	; (d77a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d779a:	2204      	movs	r2, #4
   d779c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d779e:	4a02      	ldr	r2, [pc, #8]	; (d77a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d77a0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d77a2:	4770      	bx	lr
   d77a4:	2003e7c8 	.word	0x2003e7c8
   d77a8:	000d9ce4 	.word	0x000d9ce4

000d77ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d77ac:	2300      	movs	r3, #0
   d77ae:	6840      	ldr	r0, [r0, #4]
   d77b0:	461a      	mov	r2, r3
   d77b2:	f7fe be35 	b.w	d6420 <network_connect>

000d77b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d77b6:	6840      	ldr	r0, [r0, #4]
   d77b8:	2200      	movs	r2, #0
   d77ba:	2102      	movs	r1, #2
   d77bc:	f7fe be40 	b.w	d6440 <network_disconnect>

000d77c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d77c0:	2200      	movs	r2, #0
   d77c2:	6840      	ldr	r0, [r0, #4]
   d77c4:	4611      	mov	r1, r2
   d77c6:	f7fe be33 	b.w	d6430 <network_connecting>

000d77ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d77ca:	2200      	movs	r2, #0
   d77cc:	6840      	ldr	r0, [r0, #4]
   d77ce:	4611      	mov	r1, r2
   d77d0:	f7fe be3e 	b.w	d6450 <network_ready>

000d77d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d77d4:	2300      	movs	r3, #0
   d77d6:	6840      	ldr	r0, [r0, #4]
   d77d8:	461a      	mov	r2, r3
   d77da:	4619      	mov	r1, r3
   d77dc:	f7fe be40 	b.w	d6460 <network_on>

000d77e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d77e0:	2300      	movs	r3, #0
   d77e2:	6840      	ldr	r0, [r0, #4]
   d77e4:	461a      	mov	r2, r3
   d77e6:	4619      	mov	r1, r3
   d77e8:	f7fe be42 	b.w	d6470 <network_off>

000d77ec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d77ec:	6840      	ldr	r0, [r0, #4]
   d77ee:	2100      	movs	r1, #0
   d77f0:	f7fe be66 	b.w	d64c0 <network_is_on>

000d77f4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d77f4:	6840      	ldr	r0, [r0, #4]
   d77f6:	2100      	movs	r1, #0
   d77f8:	f7fe be6a 	b.w	d64d0 <network_is_off>

000d77fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d77fc:	6840      	ldr	r0, [r0, #4]
   d77fe:	2200      	movs	r2, #0
   d7800:	f081 0101 	eor.w	r1, r1, #1
   d7804:	f7fe be3c 	b.w	d6480 <network_listen>

000d7808 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7808:	6840      	ldr	r0, [r0, #4]
   d780a:	2200      	movs	r2, #0
   d780c:	f7fe be48 	b.w	d64a0 <network_set_listen_timeout>

000d7810 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7810:	2200      	movs	r2, #0
   d7812:	6840      	ldr	r0, [r0, #4]
   d7814:	4611      	mov	r1, r2
   d7816:	f7fe be4b 	b.w	d64b0 <network_get_listen_timeout>

000d781a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d781a:	2200      	movs	r2, #0
   d781c:	6840      	ldr	r0, [r0, #4]
   d781e:	4611      	mov	r1, r2
   d7820:	f7fe be36 	b.w	d6490 <network_listening>

000d7824 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7828:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d782a:	b095      	sub	sp, #84	; 0x54
   d782c:	4616      	mov	r6, r2
   d782e:	460d      	mov	r5, r1
   d7830:	4607      	mov	r7, r0
    IPAddress addr;
   d7832:	f7ff faed 	bl	d6e10 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7836:	4621      	mov	r1, r4
   d7838:	2218      	movs	r2, #24
   d783a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d783c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d783e:	f001 f8b3 	bl	d89a8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7842:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7844:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7848:	4621      	mov	r1, r4
   d784a:	466b      	mov	r3, sp
   d784c:	aa0c      	add	r2, sp, #48	; 0x30
   d784e:	4630      	mov	r0, r6
   d7850:	f7fe fbd2 	bl	d5ff8 <netdb_getaddrinfo>
    if (!r) {
   d7854:	4604      	mov	r4, r0
   d7856:	2800      	cmp	r0, #0
   d7858:	d14c      	bne.n	d78f4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d785a:	4602      	mov	r2, r0
   d785c:	2101      	movs	r1, #1
   d785e:	6868      	ldr	r0, [r5, #4]
   d7860:	f7fe fdf6 	bl	d6450 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7864:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7866:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7868:	4622      	mov	r2, r4
   d786a:	6868      	ldr	r0, [r5, #4]
   d786c:	f7fe fdf0 	bl	d6450 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7870:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7872:	4681      	mov	r9, r0
        bool ok = false;
   d7874:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7876:	2e00      	cmp	r6, #0
   d7878:	d03c      	beq.n	d78f4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d787a:	2900      	cmp	r1, #0
   d787c:	d13a      	bne.n	d78f4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d787e:	6873      	ldr	r3, [r6, #4]
   d7880:	2b02      	cmp	r3, #2
   d7882:	d003      	beq.n	d788c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7884:	2b0a      	cmp	r3, #10
   d7886:	d011      	beq.n	d78ac <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7888:	69f6      	ldr	r6, [r6, #28]
   d788a:	e7f4      	b.n	d7876 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d788c:	f1b8 0f00 	cmp.w	r8, #0
   d7890:	d00a      	beq.n	d78a8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7892:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7894:	a806      	add	r0, sp, #24
   d7896:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7898:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d789a:	f7ff fb09 	bl	d6eb0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d789e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d78a0:	1d3c      	adds	r4, r7, #4
   d78a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d78a4:	682b      	ldr	r3, [r5, #0]
   d78a6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d78a8:	4641      	mov	r1, r8
   d78aa:	e7ed      	b.n	d7888 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d78ac:	f1b9 0f00 	cmp.w	r9, #0
   d78b0:	d101      	bne.n	d78b6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d78b2:	4649      	mov	r1, r9
   d78b4:	e7e8      	b.n	d7888 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d78b6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d78b8:	2210      	movs	r2, #16
   d78ba:	a801      	add	r0, sp, #4
   d78bc:	f001 f874 	bl	d89a8 <memset>
                    a.v = 6;
   d78c0:	2306      	movs	r3, #6
   d78c2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d78c6:	ad01      	add	r5, sp, #4
   d78c8:	f104 0308 	add.w	r3, r4, #8
   d78cc:	3418      	adds	r4, #24
   d78ce:	6818      	ldr	r0, [r3, #0]
   d78d0:	6859      	ldr	r1, [r3, #4]
   d78d2:	462a      	mov	r2, r5
   d78d4:	c203      	stmia	r2!, {r0, r1}
   d78d6:	3308      	adds	r3, #8
   d78d8:	42a3      	cmp	r3, r4
   d78da:	4615      	mov	r5, r2
   d78dc:	d1f7      	bne.n	d78ce <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d78de:	a901      	add	r1, sp, #4
   d78e0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d78e2:	ad07      	add	r5, sp, #28
   d78e4:	f7ff faa2 	bl	d6e2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d78e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d78ea:	1d3c      	adds	r4, r7, #4
   d78ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d78ee:	682b      	ldr	r3, [r5, #0]
   d78f0:	7023      	strb	r3, [r4, #0]
   d78f2:	e7de      	b.n	d78b2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d78f4:	9800      	ldr	r0, [sp, #0]
   d78f6:	f7fe fb77 	bl	d5fe8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d78fa:	4638      	mov	r0, r7
   d78fc:	b015      	add	sp, #84	; 0x54
   d78fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7904 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7904:	4b02      	ldr	r3, [pc, #8]	; (d7910 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7906:	4a03      	ldr	r2, [pc, #12]	; (d7914 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7908:	601a      	str	r2, [r3, #0]
   d790a:	2200      	movs	r2, #0
   d790c:	605a      	str	r2, [r3, #4]

} // spark
   d790e:	4770      	bx	lr
   d7910:	2003e7d0 	.word	0x2003e7d0
   d7914:	000d9d20 	.word	0x000d9d20

000d7918 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7918:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d791a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d791c:	d902      	bls.n	d7924 <pinAvailable+0xc>
    return false;
   d791e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7920:	b002      	add	sp, #8
   d7922:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7924:	f1a0 030b 	sub.w	r3, r0, #11
   d7928:	2b02      	cmp	r3, #2
   d792a:	d81a      	bhi.n	d7962 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d792c:	4c17      	ldr	r4, [pc, #92]	; (d798c <pinAvailable+0x74>)
   d792e:	7821      	ldrb	r1, [r4, #0]
   d7930:	f3bf 8f5b 	dmb	ish
   d7934:	f011 0101 	ands.w	r1, r1, #1
   d7938:	d10b      	bne.n	d7952 <pinAvailable+0x3a>
   d793a:	4620      	mov	r0, r4
   d793c:	9101      	str	r1, [sp, #4]
   d793e:	f7fc fbbb 	bl	d40b8 <__cxa_guard_acquire>
   d7942:	9901      	ldr	r1, [sp, #4]
   d7944:	b128      	cbz	r0, d7952 <pinAvailable+0x3a>
   d7946:	4812      	ldr	r0, [pc, #72]	; (d7990 <pinAvailable+0x78>)
   d7948:	f7fe fe56 	bl	d65f8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d794c:	4620      	mov	r0, r4
   d794e:	f7fc fbb8 	bl	d40c2 <__cxa_guard_release>
   d7952:	4b0f      	ldr	r3, [pc, #60]	; (d7990 <pinAvailable+0x78>)
   d7954:	7818      	ldrb	r0, [r3, #0]
   d7956:	f7fe fccf 	bl	d62f8 <hal_spi_is_enabled>
   d795a:	2800      	cmp	r0, #0
   d795c:	d1df      	bne.n	d791e <pinAvailable+0x6>
  return true; // 'pin' is available
   d795e:	2001      	movs	r0, #1
   d7960:	e7de      	b.n	d7920 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7962:	2801      	cmp	r0, #1
   d7964:	d809      	bhi.n	d797a <pinAvailable+0x62>
   d7966:	f000 f8a7 	bl	d7ab8 <_Z19__fetch_global_Wirev>
   d796a:	2100      	movs	r1, #0
   d796c:	7c00      	ldrb	r0, [r0, #16]
   d796e:	f7fe fc6b 	bl	d6248 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7972:	f080 0001 	eor.w	r0, r0, #1
   d7976:	b2c0      	uxtb	r0, r0
   d7978:	e7d2      	b.n	d7920 <pinAvailable+0x8>
   d797a:	3809      	subs	r0, #9
   d797c:	2801      	cmp	r0, #1
   d797e:	d8ee      	bhi.n	d795e <pinAvailable+0x46>
   d7980:	f7ff fb7c 	bl	d707c <_Z22__fetch_global_Serial1v>
   d7984:	7c00      	ldrb	r0, [r0, #16]
   d7986:	f7fe fc07 	bl	d6198 <hal_usart_is_enabled>
   d798a:	e7f2      	b.n	d7972 <pinAvailable+0x5a>
   d798c:	2003e648 	.word	0x2003e648
   d7990:	2003e64c 	.word	0x2003e64c

000d7994 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7994:	2823      	cmp	r0, #35	; 0x23
{
   d7996:	b538      	push	{r3, r4, r5, lr}
   d7998:	4604      	mov	r4, r0
   d799a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d799c:	d80a      	bhi.n	d79b4 <pinMode+0x20>
   d799e:	29ff      	cmp	r1, #255	; 0xff
   d79a0:	d008      	beq.n	d79b4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d79a2:	f7ff ffb9 	bl	d7918 <pinAvailable>
   d79a6:	b128      	cbz	r0, d79b4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d79a8:	4629      	mov	r1, r5
   d79aa:	4620      	mov	r0, r4
}
   d79ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d79b0:	f7fe bb32 	b.w	d6018 <HAL_Pin_Mode>
}
   d79b4:	bd38      	pop	{r3, r4, r5, pc}

000d79b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d79b6:	b538      	push	{r3, r4, r5, lr}
   d79b8:	4604      	mov	r4, r0
   d79ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d79bc:	f7fe fb34 	bl	d6028 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d79c0:	28ff      	cmp	r0, #255	; 0xff
   d79c2:	d010      	beq.n	d79e6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d79c4:	2806      	cmp	r0, #6
   d79c6:	d804      	bhi.n	d79d2 <digitalWrite+0x1c>
   d79c8:	234d      	movs	r3, #77	; 0x4d
   d79ca:	fa23 f000 	lsr.w	r0, r3, r0
   d79ce:	07c3      	lsls	r3, r0, #31
   d79d0:	d409      	bmi.n	d79e6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d79d2:	4620      	mov	r0, r4
   d79d4:	f7ff ffa0 	bl	d7918 <pinAvailable>
   d79d8:	b128      	cbz	r0, d79e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d79da:	4629      	mov	r1, r5
   d79dc:	4620      	mov	r0, r4
}
   d79de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d79e2:	f7fe bb29 	b.w	d6038 <HAL_GPIO_Write>
}
   d79e6:	bd38      	pop	{r3, r4, r5, pc}

000d79e8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d79e8:	b510      	push	{r4, lr}
   d79ea:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d79ec:	f7fe fb1c 	bl	d6028 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d79f0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d79f2:	b2db      	uxtb	r3, r3
   d79f4:	2b01      	cmp	r3, #1
   d79f6:	d908      	bls.n	d7a0a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d79f8:	4620      	mov	r0, r4
   d79fa:	f7ff ff8d 	bl	d7918 <pinAvailable>
   d79fe:	b120      	cbz	r0, d7a0a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7a00:	4620      	mov	r0, r4
}
   d7a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7a06:	f7fe bb1f 	b.w	d6048 <HAL_GPIO_Read>
}
   d7a0a:	2000      	movs	r0, #0
   d7a0c:	bd10      	pop	{r4, pc}

000d7a0e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7a0e:	280d      	cmp	r0, #13
{
   d7a10:	b510      	push	{r4, lr}
   d7a12:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7a14:	bf9c      	itt	ls
   d7a16:	340e      	addls	r4, #14
   d7a18:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7a1a:	4620      	mov	r0, r4
   d7a1c:	f7ff ff7c 	bl	d7918 <pinAvailable>
   d7a20:	b150      	cbz	r0, d7a38 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7a22:	2103      	movs	r1, #3
   d7a24:	4620      	mov	r0, r4
   d7a26:	f7fe faef 	bl	d6008 <HAL_Validate_Pin_Function>
   d7a2a:	2803      	cmp	r0, #3
   d7a2c:	d104      	bne.n	d7a38 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7a2e:	4620      	mov	r0, r4
}
   d7a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7a34:	f7fe bb18 	b.w	d6068 <hal_adc_read>
}
   d7a38:	2000      	movs	r0, #0
   d7a3a:	bd10      	pop	{r4, pc}

000d7a3c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d7a3c:	b538      	push	{r3, r4, r5, lr}
   d7a3e:	4604      	mov	r4, r0
   d7a40:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d7a42:	f7ff ff69 	bl	d7918 <pinAvailable>
   d7a46:	b1f0      	cbz	r0, d7a86 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d7a48:	2104      	movs	r1, #4
   d7a4a:	4620      	mov	r0, r4
   d7a4c:	f7fe fadc 	bl	d6008 <HAL_Validate_Pin_Function>
   d7a50:	2804      	cmp	r0, #4
   d7a52:	d105      	bne.n	d7a60 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d7a54:	b2a9      	uxth	r1, r5
   d7a56:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d7a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d7a5c:	f7fe bafc 	b.w	d6058 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d7a60:	2102      	movs	r1, #2
   d7a62:	4620      	mov	r0, r4
   d7a64:	f7fe fad0 	bl	d6008 <HAL_Validate_Pin_Function>
   d7a68:	2802      	cmp	r0, #2
   d7a6a:	d10c      	bne.n	d7a86 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d7a6c:	4620      	mov	r0, r4
   d7a6e:	f7fe fadb 	bl	d6028 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d7a72:	2801      	cmp	r0, #1
   d7a74:	d001      	beq.n	d7a7a <_Z11analogWritetm+0x3e>
   d7a76:	2804      	cmp	r0, #4
   d7a78:	d105      	bne.n	d7a86 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d7a7a:	4629      	mov	r1, r5
   d7a7c:	4620      	mov	r0, r4
}
   d7a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d7a82:	f7fe baf9 	b.w	d6078 <hal_pwm_write_ext>
}
   d7a86:	bd38      	pop	{r3, r4, r5, pc}

000d7a88 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7a88:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7a8a:	2300      	movs	r3, #0
   d7a8c:	2520      	movs	r5, #32
   d7a8e:	8043      	strh	r3, [r0, #2]
   d7a90:	2314      	movs	r3, #20
{
   d7a92:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7a94:	8003      	strh	r3, [r0, #0]
   d7a96:	6085      	str	r5, [r0, #8]
   d7a98:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7a9a:	4906      	ldr	r1, [pc, #24]	; (d7ab4 <_Z17acquireWireBufferv+0x2c>)
   d7a9c:	4628      	mov	r0, r5
   d7a9e:	f000 f83a 	bl	d7b16 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7aa2:	4904      	ldr	r1, [pc, #16]	; (d7ab4 <_Z17acquireWireBufferv+0x2c>)
	};
   d7aa4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7aa6:	4628      	mov	r0, r5
   d7aa8:	f000 f835 	bl	d7b16 <_ZnajRKSt9nothrow_t>
	};
   d7aac:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7aae:	4620      	mov	r0, r4
   d7ab0:	bd38      	pop	{r3, r4, r5, pc}
   d7ab2:	bf00      	nop
   d7ab4:	000d9d54 	.word	0x000d9d54

000d7ab8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7ab8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7aba:	4d0f      	ldr	r5, [pc, #60]	; (d7af8 <_Z19__fetch_global_Wirev+0x40>)
   d7abc:	7829      	ldrb	r1, [r5, #0]
   d7abe:	f3bf 8f5b 	dmb	ish
   d7ac2:	f011 0401 	ands.w	r4, r1, #1
{
   d7ac6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7ac8:	d113      	bne.n	d7af2 <_Z19__fetch_global_Wirev+0x3a>
   d7aca:	4628      	mov	r0, r5
   d7acc:	f7fc faf4 	bl	d40b8 <__cxa_guard_acquire>
   d7ad0:	b178      	cbz	r0, d7af2 <_Z19__fetch_global_Wirev+0x3a>
   d7ad2:	a801      	add	r0, sp, #4
   d7ad4:	f7ff ffd8 	bl	d7a88 <_Z17acquireWireBufferv>
   d7ad8:	aa01      	add	r2, sp, #4
   d7ada:	4621      	mov	r1, r4
   d7adc:	4807      	ldr	r0, [pc, #28]	; (d7afc <_Z19__fetch_global_Wirev+0x44>)
   d7ade:	f7ff fb23 	bl	d7128 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7ae2:	4628      	mov	r0, r5
   d7ae4:	f7fc faed 	bl	d40c2 <__cxa_guard_release>
   d7ae8:	4a05      	ldr	r2, [pc, #20]	; (d7b00 <_Z19__fetch_global_Wirev+0x48>)
   d7aea:	4906      	ldr	r1, [pc, #24]	; (d7b04 <_Z19__fetch_global_Wirev+0x4c>)
   d7aec:	4803      	ldr	r0, [pc, #12]	; (d7afc <_Z19__fetch_global_Wirev+0x44>)
   d7aee:	f000 f80b 	bl	d7b08 <__aeabi_atexit>
	return wire;
}
   d7af2:	4802      	ldr	r0, [pc, #8]	; (d7afc <_Z19__fetch_global_Wirev+0x44>)
   d7af4:	b007      	add	sp, #28
   d7af6:	bd30      	pop	{r4, r5, pc}
   d7af8:	2003e7dc 	.word	0x2003e7dc
   d7afc:	2003e7e0 	.word	0x2003e7e0
   d7b00:	2003e560 	.word	0x2003e560
   d7b04:	000d70d1 	.word	0x000d70d1

000d7b08 <__aeabi_atexit>:
   d7b08:	460b      	mov	r3, r1
   d7b0a:	4601      	mov	r1, r0
   d7b0c:	4618      	mov	r0, r3
   d7b0e:	f000 bf2f 	b.w	d8970 <__cxa_atexit>

000d7b12 <_ZdlPvj>:
   d7b12:	f7fc bac4 	b.w	d409e <_ZdlPv>

000d7b16 <_ZnajRKSt9nothrow_t>:
   d7b16:	f7fc bac0 	b.w	d409a <_Znaj>
	...

000d7b1c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7b1c:	4901      	ldr	r1, [pc, #4]	; (d7b24 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7b1e:	f000 b8f9 	b.w	d7d14 <_ZNKSt9type_infoeqERKS_>
   d7b22:	bf00      	nop
   d7b24:	000d9d70 	.word	0x000d9d70

000d7b28 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7b28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7b2a:	2400      	movs	r4, #0
   d7b2c:	2310      	movs	r3, #16
   d7b2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d7b32:	6803      	ldr	r3, [r0, #0]
   d7b34:	9400      	str	r4, [sp, #0]
   d7b36:	699e      	ldr	r6, [r3, #24]
   d7b38:	f88d 4004 	strb.w	r4, [sp, #4]
   d7b3c:	4615      	mov	r5, r2
   d7b3e:	466b      	mov	r3, sp
   d7b40:	6812      	ldr	r2, [r2, #0]
   d7b42:	47b0      	blx	r6
   d7b44:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7b48:	f003 0306 	and.w	r3, r3, #6
   d7b4c:	2b06      	cmp	r3, #6
   d7b4e:	bf03      	ittte	eq
   d7b50:	9b00      	ldreq	r3, [sp, #0]
   d7b52:	602b      	streq	r3, [r5, #0]
   d7b54:	2001      	moveq	r0, #1
   d7b56:	4620      	movne	r0, r4
   d7b58:	b004      	add	sp, #16
   d7b5a:	bd70      	pop	{r4, r5, r6, pc}

000d7b5c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7b5c:	9800      	ldr	r0, [sp, #0]
   d7b5e:	4290      	cmp	r0, r2
   d7b60:	bf14      	ite	ne
   d7b62:	2001      	movne	r0, #1
   d7b64:	2006      	moveq	r0, #6
   d7b66:	4770      	bx	lr

000d7b68 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d7b68:	b510      	push	{r4, lr}
   d7b6a:	4b03      	ldr	r3, [pc, #12]	; (d7b78 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7b6c:	6003      	str	r3, [r0, #0]
   d7b6e:	4604      	mov	r4, r0
   d7b70:	f000 f8cd 	bl	d7d0e <_ZNSt9type_infoD1Ev>
   d7b74:	4620      	mov	r0, r4
   d7b76:	bd10      	pop	{r4, pc}
   d7b78:	000d9db0 	.word	0x000d9db0

000d7b7c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7b7c:	b510      	push	{r4, lr}
   d7b7e:	4604      	mov	r4, r0
   d7b80:	f7ff fff2 	bl	d7b68 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7b84:	4620      	mov	r0, r4
   d7b86:	2108      	movs	r1, #8
   d7b88:	f7ff ffc3 	bl	d7b12 <_ZdlPvj>
   d7b8c:	4620      	mov	r0, r4
   d7b8e:	bd10      	pop	{r4, pc}

000d7b90 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7b94:	461f      	mov	r7, r3
   d7b96:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d7b9a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7b9e:	4598      	cmp	r8, r3
   d7ba0:	4606      	mov	r6, r0
   d7ba2:	4615      	mov	r5, r2
   d7ba4:	d107      	bne.n	d7bb6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7ba6:	9907      	ldr	r1, [sp, #28]
   d7ba8:	f000 f8b4 	bl	d7d14 <_ZNKSt9type_infoeqERKS_>
   d7bac:	b118      	cbz	r0, d7bb6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7bae:	7165      	strb	r5, [r4, #5]
   d7bb0:	2000      	movs	r0, #0
   d7bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7bb6:	4639      	mov	r1, r7
   d7bb8:	4630      	mov	r0, r6
   d7bba:	f000 f8ab 	bl	d7d14 <_ZNKSt9type_infoeqERKS_>
   d7bbe:	2800      	cmp	r0, #0
   d7bc0:	d0f6      	beq.n	d7bb0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7bc2:	2301      	movs	r3, #1
   d7bc4:	f8c4 8000 	str.w	r8, [r4]
   d7bc8:	7125      	strb	r5, [r4, #4]
   d7bca:	71a3      	strb	r3, [r4, #6]
   d7bcc:	e7f0      	b.n	d7bb0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7bce <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7bce:	b538      	push	{r3, r4, r5, lr}
   d7bd0:	4615      	mov	r5, r2
   d7bd2:	461c      	mov	r4, r3
   d7bd4:	f000 f89e 	bl	d7d14 <_ZNKSt9type_infoeqERKS_>
   d7bd8:	b120      	cbz	r0, d7be4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7bda:	2308      	movs	r3, #8
   d7bdc:	60e3      	str	r3, [r4, #12]
   d7bde:	2306      	movs	r3, #6
   d7be0:	6025      	str	r5, [r4, #0]
   d7be2:	7123      	strb	r3, [r4, #4]
   d7be4:	bd38      	pop	{r3, r4, r5, pc}

000d7be6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7be8:	4605      	mov	r5, r0
   d7bea:	460c      	mov	r4, r1
   d7bec:	9201      	str	r2, [sp, #4]
   d7bee:	461e      	mov	r6, r3
   d7bf0:	f000 f890 	bl	d7d14 <_ZNKSt9type_infoeqERKS_>
   d7bf4:	b950      	cbnz	r0, d7c0c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7bf6:	2e03      	cmp	r6, #3
   d7bf8:	d808      	bhi.n	d7c0c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7bfa:	6823      	ldr	r3, [r4, #0]
   d7bfc:	9a01      	ldr	r2, [sp, #4]
   d7bfe:	695b      	ldr	r3, [r3, #20]
   d7c00:	4629      	mov	r1, r5
   d7c02:	4620      	mov	r0, r4
   d7c04:	b002      	add	sp, #8
   d7c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7c0a:	4718      	bx	r3
   d7c0c:	b002      	add	sp, #8
   d7c0e:	bd70      	pop	{r4, r5, r6, pc}

000d7c10 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7c10:	b510      	push	{r4, lr}
   d7c12:	4b03      	ldr	r3, [pc, #12]	; (d7c20 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7c14:	6003      	str	r3, [r0, #0]
   d7c16:	4604      	mov	r4, r0
   d7c18:	f7ff ffa6 	bl	d7b68 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7c1c:	4620      	mov	r0, r4
   d7c1e:	bd10      	pop	{r4, pc}
   d7c20:	000d9e10 	.word	0x000d9e10

000d7c24 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7c24:	b510      	push	{r4, lr}
   d7c26:	4604      	mov	r4, r0
   d7c28:	f7ff fff2 	bl	d7c10 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7c2c:	4620      	mov	r0, r4
   d7c2e:	210c      	movs	r1, #12
   d7c30:	f7ff ff6f 	bl	d7b12 <_ZdlPvj>
   d7c34:	4620      	mov	r0, r4
   d7c36:	bd10      	pop	{r4, pc}

000d7c38 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7c3a:	9f08      	ldr	r7, [sp, #32]
   d7c3c:	4297      	cmp	r7, r2
   d7c3e:	4605      	mov	r5, r0
   d7c40:	460e      	mov	r6, r1
   d7c42:	4614      	mov	r4, r2
   d7c44:	d00a      	beq.n	d7c5c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7c46:	68a8      	ldr	r0, [r5, #8]
   d7c48:	6802      	ldr	r2, [r0, #0]
   d7c4a:	9708      	str	r7, [sp, #32]
   d7c4c:	6a15      	ldr	r5, [r2, #32]
   d7c4e:	4631      	mov	r1, r6
   d7c50:	4622      	mov	r2, r4
   d7c52:	46ac      	mov	ip, r5
   d7c54:	b003      	add	sp, #12
   d7c56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7c5a:	4760      	bx	ip
   d7c5c:	4619      	mov	r1, r3
   d7c5e:	9301      	str	r3, [sp, #4]
   d7c60:	f000 f858 	bl	d7d14 <_ZNKSt9type_infoeqERKS_>
   d7c64:	9b01      	ldr	r3, [sp, #4]
   d7c66:	2800      	cmp	r0, #0
   d7c68:	d0ed      	beq.n	d7c46 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7c6a:	2006      	movs	r0, #6
   d7c6c:	b003      	add	sp, #12
   d7c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7c70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7c70:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c74:	460d      	mov	r5, r1
   d7c76:	4619      	mov	r1, r3
   d7c78:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7c7c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7c80:	4681      	mov	r9, r0
   d7c82:	4617      	mov	r7, r2
   d7c84:	4698      	mov	r8, r3
   d7c86:	f000 f845 	bl	d7d14 <_ZNKSt9type_infoeqERKS_>
   d7c8a:	b190      	cbz	r0, d7cb2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7c8c:	2d00      	cmp	r5, #0
   d7c8e:	6034      	str	r4, [r6, #0]
   d7c90:	7137      	strb	r7, [r6, #4]
   d7c92:	db09      	blt.n	d7ca8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7c94:	1961      	adds	r1, r4, r5
   d7c96:	458a      	cmp	sl, r1
   d7c98:	bf0c      	ite	eq
   d7c9a:	2106      	moveq	r1, #6
   d7c9c:	2101      	movne	r1, #1
   d7c9e:	71b1      	strb	r1, [r6, #6]
   d7ca0:	2000      	movs	r0, #0
   d7ca2:	b001      	add	sp, #4
   d7ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7ca8:	3502      	adds	r5, #2
   d7caa:	d1f9      	bne.n	d7ca0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7cac:	2301      	movs	r3, #1
   d7cae:	71b3      	strb	r3, [r6, #6]
   d7cb0:	e7f6      	b.n	d7ca0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7cb2:	4554      	cmp	r4, sl
   d7cb4:	d106      	bne.n	d7cc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7cb6:	4659      	mov	r1, fp
   d7cb8:	4648      	mov	r0, r9
   d7cba:	f000 f82b 	bl	d7d14 <_ZNKSt9type_infoeqERKS_>
   d7cbe:	b108      	cbz	r0, d7cc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7cc0:	7177      	strb	r7, [r6, #5]
   d7cc2:	e7ed      	b.n	d7ca0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7cc4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7cc8:	6803      	ldr	r3, [r0, #0]
   d7cca:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7cce:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7cd2:	69dc      	ldr	r4, [r3, #28]
   d7cd4:	463a      	mov	r2, r7
   d7cd6:	4643      	mov	r3, r8
   d7cd8:	4629      	mov	r1, r5
   d7cda:	46a4      	mov	ip, r4
   d7cdc:	b001      	add	sp, #4
   d7cde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7ce2:	4760      	bx	ip

000d7ce4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7ce8:	4607      	mov	r7, r0
   d7cea:	460c      	mov	r4, r1
   d7cec:	4615      	mov	r5, r2
   d7cee:	461e      	mov	r6, r3
   d7cf0:	f7ff ff6d 	bl	d7bce <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7cf4:	b948      	cbnz	r0, d7d0a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7cf6:	68b8      	ldr	r0, [r7, #8]
   d7cf8:	6803      	ldr	r3, [r0, #0]
   d7cfa:	699f      	ldr	r7, [r3, #24]
   d7cfc:	462a      	mov	r2, r5
   d7cfe:	4633      	mov	r3, r6
   d7d00:	4621      	mov	r1, r4
   d7d02:	46bc      	mov	ip, r7
   d7d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7d08:	4760      	bx	ip
   d7d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7d0e <_ZNSt9type_infoD1Ev>:
   d7d0e:	4770      	bx	lr

000d7d10 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7d10:	2000      	movs	r0, #0
   d7d12:	4770      	bx	lr

000d7d14 <_ZNKSt9type_infoeqERKS_>:
   d7d14:	4281      	cmp	r1, r0
   d7d16:	b508      	push	{r3, lr}
   d7d18:	d00e      	beq.n	d7d38 <_ZNKSt9type_infoeqERKS_+0x24>
   d7d1a:	6840      	ldr	r0, [r0, #4]
   d7d1c:	7803      	ldrb	r3, [r0, #0]
   d7d1e:	2b2a      	cmp	r3, #42	; 0x2a
   d7d20:	d00c      	beq.n	d7d3c <_ZNKSt9type_infoeqERKS_+0x28>
   d7d22:	6849      	ldr	r1, [r1, #4]
   d7d24:	780b      	ldrb	r3, [r1, #0]
   d7d26:	2b2a      	cmp	r3, #42	; 0x2a
   d7d28:	bf08      	it	eq
   d7d2a:	3101      	addeq	r1, #1
   d7d2c:	f000 fe68 	bl	d8a00 <strcmp>
   d7d30:	fab0 f080 	clz	r0, r0
   d7d34:	0940      	lsrs	r0, r0, #5
   d7d36:	bd08      	pop	{r3, pc}
   d7d38:	2001      	movs	r0, #1
   d7d3a:	e7fc      	b.n	d7d36 <_ZNKSt9type_infoeqERKS_+0x22>
   d7d3c:	2000      	movs	r0, #0
   d7d3e:	e7fa      	b.n	d7d36 <_ZNKSt9type_infoeqERKS_+0x22>

000d7d40 <__aeabi_drsub>:
   d7d40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7d44:	e002      	b.n	d7d4c <__adddf3>
   d7d46:	bf00      	nop

000d7d48 <__aeabi_dsub>:
   d7d48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7d4c <__adddf3>:
   d7d4c:	b530      	push	{r4, r5, lr}
   d7d4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7d52:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7d56:	ea94 0f05 	teq	r4, r5
   d7d5a:	bf08      	it	eq
   d7d5c:	ea90 0f02 	teqeq	r0, r2
   d7d60:	bf1f      	itttt	ne
   d7d62:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7d66:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7d6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7d6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7d72:	f000 80e2 	beq.w	d7f3a <__adddf3+0x1ee>
   d7d76:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7d7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7d7e:	bfb8      	it	lt
   d7d80:	426d      	neglt	r5, r5
   d7d82:	dd0c      	ble.n	d7d9e <__adddf3+0x52>
   d7d84:	442c      	add	r4, r5
   d7d86:	ea80 0202 	eor.w	r2, r0, r2
   d7d8a:	ea81 0303 	eor.w	r3, r1, r3
   d7d8e:	ea82 0000 	eor.w	r0, r2, r0
   d7d92:	ea83 0101 	eor.w	r1, r3, r1
   d7d96:	ea80 0202 	eor.w	r2, r0, r2
   d7d9a:	ea81 0303 	eor.w	r3, r1, r3
   d7d9e:	2d36      	cmp	r5, #54	; 0x36
   d7da0:	bf88      	it	hi
   d7da2:	bd30      	pophi	{r4, r5, pc}
   d7da4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7da8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7dac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7db0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7db4:	d002      	beq.n	d7dbc <__adddf3+0x70>
   d7db6:	4240      	negs	r0, r0
   d7db8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7dbc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7dc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7dc4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7dc8:	d002      	beq.n	d7dd0 <__adddf3+0x84>
   d7dca:	4252      	negs	r2, r2
   d7dcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7dd0:	ea94 0f05 	teq	r4, r5
   d7dd4:	f000 80a7 	beq.w	d7f26 <__adddf3+0x1da>
   d7dd8:	f1a4 0401 	sub.w	r4, r4, #1
   d7ddc:	f1d5 0e20 	rsbs	lr, r5, #32
   d7de0:	db0d      	blt.n	d7dfe <__adddf3+0xb2>
   d7de2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7de6:	fa22 f205 	lsr.w	r2, r2, r5
   d7dea:	1880      	adds	r0, r0, r2
   d7dec:	f141 0100 	adc.w	r1, r1, #0
   d7df0:	fa03 f20e 	lsl.w	r2, r3, lr
   d7df4:	1880      	adds	r0, r0, r2
   d7df6:	fa43 f305 	asr.w	r3, r3, r5
   d7dfa:	4159      	adcs	r1, r3
   d7dfc:	e00e      	b.n	d7e1c <__adddf3+0xd0>
   d7dfe:	f1a5 0520 	sub.w	r5, r5, #32
   d7e02:	f10e 0e20 	add.w	lr, lr, #32
   d7e06:	2a01      	cmp	r2, #1
   d7e08:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7e0c:	bf28      	it	cs
   d7e0e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7e12:	fa43 f305 	asr.w	r3, r3, r5
   d7e16:	18c0      	adds	r0, r0, r3
   d7e18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7e1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7e20:	d507      	bpl.n	d7e32 <__adddf3+0xe6>
   d7e22:	f04f 0e00 	mov.w	lr, #0
   d7e26:	f1dc 0c00 	rsbs	ip, ip, #0
   d7e2a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7e2e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7e32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7e36:	d31b      	bcc.n	d7e70 <__adddf3+0x124>
   d7e38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7e3c:	d30c      	bcc.n	d7e58 <__adddf3+0x10c>
   d7e3e:	0849      	lsrs	r1, r1, #1
   d7e40:	ea5f 0030 	movs.w	r0, r0, rrx
   d7e44:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7e48:	f104 0401 	add.w	r4, r4, #1
   d7e4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7e50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7e54:	f080 809a 	bcs.w	d7f8c <__adddf3+0x240>
   d7e58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7e5c:	bf08      	it	eq
   d7e5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7e62:	f150 0000 	adcs.w	r0, r0, #0
   d7e66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7e6a:	ea41 0105 	orr.w	r1, r1, r5
   d7e6e:	bd30      	pop	{r4, r5, pc}
   d7e70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7e74:	4140      	adcs	r0, r0
   d7e76:	eb41 0101 	adc.w	r1, r1, r1
   d7e7a:	3c01      	subs	r4, #1
   d7e7c:	bf28      	it	cs
   d7e7e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7e82:	d2e9      	bcs.n	d7e58 <__adddf3+0x10c>
   d7e84:	f091 0f00 	teq	r1, #0
   d7e88:	bf04      	itt	eq
   d7e8a:	4601      	moveq	r1, r0
   d7e8c:	2000      	moveq	r0, #0
   d7e8e:	fab1 f381 	clz	r3, r1
   d7e92:	bf08      	it	eq
   d7e94:	3320      	addeq	r3, #32
   d7e96:	f1a3 030b 	sub.w	r3, r3, #11
   d7e9a:	f1b3 0220 	subs.w	r2, r3, #32
   d7e9e:	da0c      	bge.n	d7eba <__adddf3+0x16e>
   d7ea0:	320c      	adds	r2, #12
   d7ea2:	dd08      	ble.n	d7eb6 <__adddf3+0x16a>
   d7ea4:	f102 0c14 	add.w	ip, r2, #20
   d7ea8:	f1c2 020c 	rsb	r2, r2, #12
   d7eac:	fa01 f00c 	lsl.w	r0, r1, ip
   d7eb0:	fa21 f102 	lsr.w	r1, r1, r2
   d7eb4:	e00c      	b.n	d7ed0 <__adddf3+0x184>
   d7eb6:	f102 0214 	add.w	r2, r2, #20
   d7eba:	bfd8      	it	le
   d7ebc:	f1c2 0c20 	rsble	ip, r2, #32
   d7ec0:	fa01 f102 	lsl.w	r1, r1, r2
   d7ec4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7ec8:	bfdc      	itt	le
   d7eca:	ea41 010c 	orrle.w	r1, r1, ip
   d7ece:	4090      	lslle	r0, r2
   d7ed0:	1ae4      	subs	r4, r4, r3
   d7ed2:	bfa2      	ittt	ge
   d7ed4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7ed8:	4329      	orrge	r1, r5
   d7eda:	bd30      	popge	{r4, r5, pc}
   d7edc:	ea6f 0404 	mvn.w	r4, r4
   d7ee0:	3c1f      	subs	r4, #31
   d7ee2:	da1c      	bge.n	d7f1e <__adddf3+0x1d2>
   d7ee4:	340c      	adds	r4, #12
   d7ee6:	dc0e      	bgt.n	d7f06 <__adddf3+0x1ba>
   d7ee8:	f104 0414 	add.w	r4, r4, #20
   d7eec:	f1c4 0220 	rsb	r2, r4, #32
   d7ef0:	fa20 f004 	lsr.w	r0, r0, r4
   d7ef4:	fa01 f302 	lsl.w	r3, r1, r2
   d7ef8:	ea40 0003 	orr.w	r0, r0, r3
   d7efc:	fa21 f304 	lsr.w	r3, r1, r4
   d7f00:	ea45 0103 	orr.w	r1, r5, r3
   d7f04:	bd30      	pop	{r4, r5, pc}
   d7f06:	f1c4 040c 	rsb	r4, r4, #12
   d7f0a:	f1c4 0220 	rsb	r2, r4, #32
   d7f0e:	fa20 f002 	lsr.w	r0, r0, r2
   d7f12:	fa01 f304 	lsl.w	r3, r1, r4
   d7f16:	ea40 0003 	orr.w	r0, r0, r3
   d7f1a:	4629      	mov	r1, r5
   d7f1c:	bd30      	pop	{r4, r5, pc}
   d7f1e:	fa21 f004 	lsr.w	r0, r1, r4
   d7f22:	4629      	mov	r1, r5
   d7f24:	bd30      	pop	{r4, r5, pc}
   d7f26:	f094 0f00 	teq	r4, #0
   d7f2a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7f2e:	bf06      	itte	eq
   d7f30:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7f34:	3401      	addeq	r4, #1
   d7f36:	3d01      	subne	r5, #1
   d7f38:	e74e      	b.n	d7dd8 <__adddf3+0x8c>
   d7f3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7f3e:	bf18      	it	ne
   d7f40:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7f44:	d029      	beq.n	d7f9a <__adddf3+0x24e>
   d7f46:	ea94 0f05 	teq	r4, r5
   d7f4a:	bf08      	it	eq
   d7f4c:	ea90 0f02 	teqeq	r0, r2
   d7f50:	d005      	beq.n	d7f5e <__adddf3+0x212>
   d7f52:	ea54 0c00 	orrs.w	ip, r4, r0
   d7f56:	bf04      	itt	eq
   d7f58:	4619      	moveq	r1, r3
   d7f5a:	4610      	moveq	r0, r2
   d7f5c:	bd30      	pop	{r4, r5, pc}
   d7f5e:	ea91 0f03 	teq	r1, r3
   d7f62:	bf1e      	ittt	ne
   d7f64:	2100      	movne	r1, #0
   d7f66:	2000      	movne	r0, #0
   d7f68:	bd30      	popne	{r4, r5, pc}
   d7f6a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7f6e:	d105      	bne.n	d7f7c <__adddf3+0x230>
   d7f70:	0040      	lsls	r0, r0, #1
   d7f72:	4149      	adcs	r1, r1
   d7f74:	bf28      	it	cs
   d7f76:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7f7a:	bd30      	pop	{r4, r5, pc}
   d7f7c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7f80:	bf3c      	itt	cc
   d7f82:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7f86:	bd30      	popcc	{r4, r5, pc}
   d7f88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7f8c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7f90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7f94:	f04f 0000 	mov.w	r0, #0
   d7f98:	bd30      	pop	{r4, r5, pc}
   d7f9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7f9e:	bf1a      	itte	ne
   d7fa0:	4619      	movne	r1, r3
   d7fa2:	4610      	movne	r0, r2
   d7fa4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7fa8:	bf1c      	itt	ne
   d7faa:	460b      	movne	r3, r1
   d7fac:	4602      	movne	r2, r0
   d7fae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7fb2:	bf06      	itte	eq
   d7fb4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7fb8:	ea91 0f03 	teqeq	r1, r3
   d7fbc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7fc0:	bd30      	pop	{r4, r5, pc}
   d7fc2:	bf00      	nop

000d7fc4 <__aeabi_ui2d>:
   d7fc4:	f090 0f00 	teq	r0, #0
   d7fc8:	bf04      	itt	eq
   d7fca:	2100      	moveq	r1, #0
   d7fcc:	4770      	bxeq	lr
   d7fce:	b530      	push	{r4, r5, lr}
   d7fd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7fd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7fd8:	f04f 0500 	mov.w	r5, #0
   d7fdc:	f04f 0100 	mov.w	r1, #0
   d7fe0:	e750      	b.n	d7e84 <__adddf3+0x138>
   d7fe2:	bf00      	nop

000d7fe4 <__aeabi_i2d>:
   d7fe4:	f090 0f00 	teq	r0, #0
   d7fe8:	bf04      	itt	eq
   d7fea:	2100      	moveq	r1, #0
   d7fec:	4770      	bxeq	lr
   d7fee:	b530      	push	{r4, r5, lr}
   d7ff0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7ff4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7ff8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7ffc:	bf48      	it	mi
   d7ffe:	4240      	negmi	r0, r0
   d8000:	f04f 0100 	mov.w	r1, #0
   d8004:	e73e      	b.n	d7e84 <__adddf3+0x138>
   d8006:	bf00      	nop

000d8008 <__aeabi_f2d>:
   d8008:	0042      	lsls	r2, r0, #1
   d800a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d800e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8012:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8016:	bf1f      	itttt	ne
   d8018:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d801c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8020:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8024:	4770      	bxne	lr
   d8026:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d802a:	bf08      	it	eq
   d802c:	4770      	bxeq	lr
   d802e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8032:	bf04      	itt	eq
   d8034:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8038:	4770      	bxeq	lr
   d803a:	b530      	push	{r4, r5, lr}
   d803c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8040:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8044:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8048:	e71c      	b.n	d7e84 <__adddf3+0x138>
   d804a:	bf00      	nop

000d804c <__aeabi_ul2d>:
   d804c:	ea50 0201 	orrs.w	r2, r0, r1
   d8050:	bf08      	it	eq
   d8052:	4770      	bxeq	lr
   d8054:	b530      	push	{r4, r5, lr}
   d8056:	f04f 0500 	mov.w	r5, #0
   d805a:	e00a      	b.n	d8072 <__aeabi_l2d+0x16>

000d805c <__aeabi_l2d>:
   d805c:	ea50 0201 	orrs.w	r2, r0, r1
   d8060:	bf08      	it	eq
   d8062:	4770      	bxeq	lr
   d8064:	b530      	push	{r4, r5, lr}
   d8066:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d806a:	d502      	bpl.n	d8072 <__aeabi_l2d+0x16>
   d806c:	4240      	negs	r0, r0
   d806e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8072:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8076:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d807a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d807e:	f43f aed8 	beq.w	d7e32 <__adddf3+0xe6>
   d8082:	f04f 0203 	mov.w	r2, #3
   d8086:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d808a:	bf18      	it	ne
   d808c:	3203      	addne	r2, #3
   d808e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8092:	bf18      	it	ne
   d8094:	3203      	addne	r2, #3
   d8096:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d809a:	f1c2 0320 	rsb	r3, r2, #32
   d809e:	fa00 fc03 	lsl.w	ip, r0, r3
   d80a2:	fa20 f002 	lsr.w	r0, r0, r2
   d80a6:	fa01 fe03 	lsl.w	lr, r1, r3
   d80aa:	ea40 000e 	orr.w	r0, r0, lr
   d80ae:	fa21 f102 	lsr.w	r1, r1, r2
   d80b2:	4414      	add	r4, r2
   d80b4:	e6bd      	b.n	d7e32 <__adddf3+0xe6>
   d80b6:	bf00      	nop

000d80b8 <__aeabi_dmul>:
   d80b8:	b570      	push	{r4, r5, r6, lr}
   d80ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d80be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d80c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d80c6:	bf1d      	ittte	ne
   d80c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d80cc:	ea94 0f0c 	teqne	r4, ip
   d80d0:	ea95 0f0c 	teqne	r5, ip
   d80d4:	f000 f8de 	bleq	d8294 <__aeabi_dmul+0x1dc>
   d80d8:	442c      	add	r4, r5
   d80da:	ea81 0603 	eor.w	r6, r1, r3
   d80de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d80e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d80e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d80ea:	bf18      	it	ne
   d80ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d80f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d80f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d80f8:	d038      	beq.n	d816c <__aeabi_dmul+0xb4>
   d80fa:	fba0 ce02 	umull	ip, lr, r0, r2
   d80fe:	f04f 0500 	mov.w	r5, #0
   d8102:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8106:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d810a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d810e:	f04f 0600 	mov.w	r6, #0
   d8112:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8116:	f09c 0f00 	teq	ip, #0
   d811a:	bf18      	it	ne
   d811c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8120:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8124:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8128:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d812c:	d204      	bcs.n	d8138 <__aeabi_dmul+0x80>
   d812e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8132:	416d      	adcs	r5, r5
   d8134:	eb46 0606 	adc.w	r6, r6, r6
   d8138:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d813c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8140:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8144:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8148:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d814c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8150:	bf88      	it	hi
   d8152:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8156:	d81e      	bhi.n	d8196 <__aeabi_dmul+0xde>
   d8158:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d815c:	bf08      	it	eq
   d815e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8162:	f150 0000 	adcs.w	r0, r0, #0
   d8166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d816a:	bd70      	pop	{r4, r5, r6, pc}
   d816c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8170:	ea46 0101 	orr.w	r1, r6, r1
   d8174:	ea40 0002 	orr.w	r0, r0, r2
   d8178:	ea81 0103 	eor.w	r1, r1, r3
   d817c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8180:	bfc2      	ittt	gt
   d8182:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8186:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d818a:	bd70      	popgt	{r4, r5, r6, pc}
   d818c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8190:	f04f 0e00 	mov.w	lr, #0
   d8194:	3c01      	subs	r4, #1
   d8196:	f300 80ab 	bgt.w	d82f0 <__aeabi_dmul+0x238>
   d819a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d819e:	bfde      	ittt	le
   d81a0:	2000      	movle	r0, #0
   d81a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d81a6:	bd70      	pople	{r4, r5, r6, pc}
   d81a8:	f1c4 0400 	rsb	r4, r4, #0
   d81ac:	3c20      	subs	r4, #32
   d81ae:	da35      	bge.n	d821c <__aeabi_dmul+0x164>
   d81b0:	340c      	adds	r4, #12
   d81b2:	dc1b      	bgt.n	d81ec <__aeabi_dmul+0x134>
   d81b4:	f104 0414 	add.w	r4, r4, #20
   d81b8:	f1c4 0520 	rsb	r5, r4, #32
   d81bc:	fa00 f305 	lsl.w	r3, r0, r5
   d81c0:	fa20 f004 	lsr.w	r0, r0, r4
   d81c4:	fa01 f205 	lsl.w	r2, r1, r5
   d81c8:	ea40 0002 	orr.w	r0, r0, r2
   d81cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d81d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d81d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d81d8:	fa21 f604 	lsr.w	r6, r1, r4
   d81dc:	eb42 0106 	adc.w	r1, r2, r6
   d81e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d81e4:	bf08      	it	eq
   d81e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d81ea:	bd70      	pop	{r4, r5, r6, pc}
   d81ec:	f1c4 040c 	rsb	r4, r4, #12
   d81f0:	f1c4 0520 	rsb	r5, r4, #32
   d81f4:	fa00 f304 	lsl.w	r3, r0, r4
   d81f8:	fa20 f005 	lsr.w	r0, r0, r5
   d81fc:	fa01 f204 	lsl.w	r2, r1, r4
   d8200:	ea40 0002 	orr.w	r0, r0, r2
   d8204:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8208:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d820c:	f141 0100 	adc.w	r1, r1, #0
   d8210:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8214:	bf08      	it	eq
   d8216:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d821a:	bd70      	pop	{r4, r5, r6, pc}
   d821c:	f1c4 0520 	rsb	r5, r4, #32
   d8220:	fa00 f205 	lsl.w	r2, r0, r5
   d8224:	ea4e 0e02 	orr.w	lr, lr, r2
   d8228:	fa20 f304 	lsr.w	r3, r0, r4
   d822c:	fa01 f205 	lsl.w	r2, r1, r5
   d8230:	ea43 0302 	orr.w	r3, r3, r2
   d8234:	fa21 f004 	lsr.w	r0, r1, r4
   d8238:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d823c:	fa21 f204 	lsr.w	r2, r1, r4
   d8240:	ea20 0002 	bic.w	r0, r0, r2
   d8244:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8248:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d824c:	bf08      	it	eq
   d824e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8252:	bd70      	pop	{r4, r5, r6, pc}
   d8254:	f094 0f00 	teq	r4, #0
   d8258:	d10f      	bne.n	d827a <__aeabi_dmul+0x1c2>
   d825a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d825e:	0040      	lsls	r0, r0, #1
   d8260:	eb41 0101 	adc.w	r1, r1, r1
   d8264:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8268:	bf08      	it	eq
   d826a:	3c01      	subeq	r4, #1
   d826c:	d0f7      	beq.n	d825e <__aeabi_dmul+0x1a6>
   d826e:	ea41 0106 	orr.w	r1, r1, r6
   d8272:	f095 0f00 	teq	r5, #0
   d8276:	bf18      	it	ne
   d8278:	4770      	bxne	lr
   d827a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d827e:	0052      	lsls	r2, r2, #1
   d8280:	eb43 0303 	adc.w	r3, r3, r3
   d8284:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8288:	bf08      	it	eq
   d828a:	3d01      	subeq	r5, #1
   d828c:	d0f7      	beq.n	d827e <__aeabi_dmul+0x1c6>
   d828e:	ea43 0306 	orr.w	r3, r3, r6
   d8292:	4770      	bx	lr
   d8294:	ea94 0f0c 	teq	r4, ip
   d8298:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d829c:	bf18      	it	ne
   d829e:	ea95 0f0c 	teqne	r5, ip
   d82a2:	d00c      	beq.n	d82be <__aeabi_dmul+0x206>
   d82a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d82a8:	bf18      	it	ne
   d82aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d82ae:	d1d1      	bne.n	d8254 <__aeabi_dmul+0x19c>
   d82b0:	ea81 0103 	eor.w	r1, r1, r3
   d82b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d82b8:	f04f 0000 	mov.w	r0, #0
   d82bc:	bd70      	pop	{r4, r5, r6, pc}
   d82be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d82c2:	bf06      	itte	eq
   d82c4:	4610      	moveq	r0, r2
   d82c6:	4619      	moveq	r1, r3
   d82c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d82cc:	d019      	beq.n	d8302 <__aeabi_dmul+0x24a>
   d82ce:	ea94 0f0c 	teq	r4, ip
   d82d2:	d102      	bne.n	d82da <__aeabi_dmul+0x222>
   d82d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d82d8:	d113      	bne.n	d8302 <__aeabi_dmul+0x24a>
   d82da:	ea95 0f0c 	teq	r5, ip
   d82de:	d105      	bne.n	d82ec <__aeabi_dmul+0x234>
   d82e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d82e4:	bf1c      	itt	ne
   d82e6:	4610      	movne	r0, r2
   d82e8:	4619      	movne	r1, r3
   d82ea:	d10a      	bne.n	d8302 <__aeabi_dmul+0x24a>
   d82ec:	ea81 0103 	eor.w	r1, r1, r3
   d82f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d82f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d82f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d82fc:	f04f 0000 	mov.w	r0, #0
   d8300:	bd70      	pop	{r4, r5, r6, pc}
   d8302:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8306:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d830a:	bd70      	pop	{r4, r5, r6, pc}

000d830c <__aeabi_ddiv>:
   d830c:	b570      	push	{r4, r5, r6, lr}
   d830e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8312:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8316:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d831a:	bf1d      	ittte	ne
   d831c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8320:	ea94 0f0c 	teqne	r4, ip
   d8324:	ea95 0f0c 	teqne	r5, ip
   d8328:	f000 f8a7 	bleq	d847a <__aeabi_ddiv+0x16e>
   d832c:	eba4 0405 	sub.w	r4, r4, r5
   d8330:	ea81 0e03 	eor.w	lr, r1, r3
   d8334:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8338:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d833c:	f000 8088 	beq.w	d8450 <__aeabi_ddiv+0x144>
   d8340:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8344:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8348:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d834c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8350:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8354:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8358:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d835c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8360:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8364:	429d      	cmp	r5, r3
   d8366:	bf08      	it	eq
   d8368:	4296      	cmpeq	r6, r2
   d836a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d836e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8372:	d202      	bcs.n	d837a <__aeabi_ddiv+0x6e>
   d8374:	085b      	lsrs	r3, r3, #1
   d8376:	ea4f 0232 	mov.w	r2, r2, rrx
   d837a:	1ab6      	subs	r6, r6, r2
   d837c:	eb65 0503 	sbc.w	r5, r5, r3
   d8380:	085b      	lsrs	r3, r3, #1
   d8382:	ea4f 0232 	mov.w	r2, r2, rrx
   d8386:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d838a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d838e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8392:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8396:	bf22      	ittt	cs
   d8398:	1ab6      	subcs	r6, r6, r2
   d839a:	4675      	movcs	r5, lr
   d839c:	ea40 000c 	orrcs.w	r0, r0, ip
   d83a0:	085b      	lsrs	r3, r3, #1
   d83a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d83a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d83aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d83ae:	bf22      	ittt	cs
   d83b0:	1ab6      	subcs	r6, r6, r2
   d83b2:	4675      	movcs	r5, lr
   d83b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d83b8:	085b      	lsrs	r3, r3, #1
   d83ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d83be:	ebb6 0e02 	subs.w	lr, r6, r2
   d83c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d83c6:	bf22      	ittt	cs
   d83c8:	1ab6      	subcs	r6, r6, r2
   d83ca:	4675      	movcs	r5, lr
   d83cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d83d0:	085b      	lsrs	r3, r3, #1
   d83d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d83d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d83da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d83de:	bf22      	ittt	cs
   d83e0:	1ab6      	subcs	r6, r6, r2
   d83e2:	4675      	movcs	r5, lr
   d83e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d83e8:	ea55 0e06 	orrs.w	lr, r5, r6
   d83ec:	d018      	beq.n	d8420 <__aeabi_ddiv+0x114>
   d83ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d83f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d83f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d83fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d83fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8402:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8406:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d840a:	d1c0      	bne.n	d838e <__aeabi_ddiv+0x82>
   d840c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8410:	d10b      	bne.n	d842a <__aeabi_ddiv+0x11e>
   d8412:	ea41 0100 	orr.w	r1, r1, r0
   d8416:	f04f 0000 	mov.w	r0, #0
   d841a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d841e:	e7b6      	b.n	d838e <__aeabi_ddiv+0x82>
   d8420:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8424:	bf04      	itt	eq
   d8426:	4301      	orreq	r1, r0
   d8428:	2000      	moveq	r0, #0
   d842a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d842e:	bf88      	it	hi
   d8430:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8434:	f63f aeaf 	bhi.w	d8196 <__aeabi_dmul+0xde>
   d8438:	ebb5 0c03 	subs.w	ip, r5, r3
   d843c:	bf04      	itt	eq
   d843e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8442:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8446:	f150 0000 	adcs.w	r0, r0, #0
   d844a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d844e:	bd70      	pop	{r4, r5, r6, pc}
   d8450:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8454:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8458:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d845c:	bfc2      	ittt	gt
   d845e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8466:	bd70      	popgt	{r4, r5, r6, pc}
   d8468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d846c:	f04f 0e00 	mov.w	lr, #0
   d8470:	3c01      	subs	r4, #1
   d8472:	e690      	b.n	d8196 <__aeabi_dmul+0xde>
   d8474:	ea45 0e06 	orr.w	lr, r5, r6
   d8478:	e68d      	b.n	d8196 <__aeabi_dmul+0xde>
   d847a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d847e:	ea94 0f0c 	teq	r4, ip
   d8482:	bf08      	it	eq
   d8484:	ea95 0f0c 	teqeq	r5, ip
   d8488:	f43f af3b 	beq.w	d8302 <__aeabi_dmul+0x24a>
   d848c:	ea94 0f0c 	teq	r4, ip
   d8490:	d10a      	bne.n	d84a8 <__aeabi_ddiv+0x19c>
   d8492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8496:	f47f af34 	bne.w	d8302 <__aeabi_dmul+0x24a>
   d849a:	ea95 0f0c 	teq	r5, ip
   d849e:	f47f af25 	bne.w	d82ec <__aeabi_dmul+0x234>
   d84a2:	4610      	mov	r0, r2
   d84a4:	4619      	mov	r1, r3
   d84a6:	e72c      	b.n	d8302 <__aeabi_dmul+0x24a>
   d84a8:	ea95 0f0c 	teq	r5, ip
   d84ac:	d106      	bne.n	d84bc <__aeabi_ddiv+0x1b0>
   d84ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d84b2:	f43f aefd 	beq.w	d82b0 <__aeabi_dmul+0x1f8>
   d84b6:	4610      	mov	r0, r2
   d84b8:	4619      	mov	r1, r3
   d84ba:	e722      	b.n	d8302 <__aeabi_dmul+0x24a>
   d84bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d84c0:	bf18      	it	ne
   d84c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d84c6:	f47f aec5 	bne.w	d8254 <__aeabi_dmul+0x19c>
   d84ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d84ce:	f47f af0d 	bne.w	d82ec <__aeabi_dmul+0x234>
   d84d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d84d6:	f47f aeeb 	bne.w	d82b0 <__aeabi_dmul+0x1f8>
   d84da:	e712      	b.n	d8302 <__aeabi_dmul+0x24a>

000d84dc <__gedf2>:
   d84dc:	f04f 3cff 	mov.w	ip, #4294967295
   d84e0:	e006      	b.n	d84f0 <__cmpdf2+0x4>
   d84e2:	bf00      	nop

000d84e4 <__ledf2>:
   d84e4:	f04f 0c01 	mov.w	ip, #1
   d84e8:	e002      	b.n	d84f0 <__cmpdf2+0x4>
   d84ea:	bf00      	nop

000d84ec <__cmpdf2>:
   d84ec:	f04f 0c01 	mov.w	ip, #1
   d84f0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d84f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d84f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d84fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8500:	bf18      	it	ne
   d8502:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8506:	d01b      	beq.n	d8540 <__cmpdf2+0x54>
   d8508:	b001      	add	sp, #4
   d850a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d850e:	bf0c      	ite	eq
   d8510:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8514:	ea91 0f03 	teqne	r1, r3
   d8518:	bf02      	ittt	eq
   d851a:	ea90 0f02 	teqeq	r0, r2
   d851e:	2000      	moveq	r0, #0
   d8520:	4770      	bxeq	lr
   d8522:	f110 0f00 	cmn.w	r0, #0
   d8526:	ea91 0f03 	teq	r1, r3
   d852a:	bf58      	it	pl
   d852c:	4299      	cmppl	r1, r3
   d852e:	bf08      	it	eq
   d8530:	4290      	cmpeq	r0, r2
   d8532:	bf2c      	ite	cs
   d8534:	17d8      	asrcs	r0, r3, #31
   d8536:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d853a:	f040 0001 	orr.w	r0, r0, #1
   d853e:	4770      	bx	lr
   d8540:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8544:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8548:	d102      	bne.n	d8550 <__cmpdf2+0x64>
   d854a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d854e:	d107      	bne.n	d8560 <__cmpdf2+0x74>
   d8550:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8558:	d1d6      	bne.n	d8508 <__cmpdf2+0x1c>
   d855a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d855e:	d0d3      	beq.n	d8508 <__cmpdf2+0x1c>
   d8560:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8564:	4770      	bx	lr
   d8566:	bf00      	nop

000d8568 <__aeabi_cdrcmple>:
   d8568:	4684      	mov	ip, r0
   d856a:	4610      	mov	r0, r2
   d856c:	4662      	mov	r2, ip
   d856e:	468c      	mov	ip, r1
   d8570:	4619      	mov	r1, r3
   d8572:	4663      	mov	r3, ip
   d8574:	e000      	b.n	d8578 <__aeabi_cdcmpeq>
   d8576:	bf00      	nop

000d8578 <__aeabi_cdcmpeq>:
   d8578:	b501      	push	{r0, lr}
   d857a:	f7ff ffb7 	bl	d84ec <__cmpdf2>
   d857e:	2800      	cmp	r0, #0
   d8580:	bf48      	it	mi
   d8582:	f110 0f00 	cmnmi.w	r0, #0
   d8586:	bd01      	pop	{r0, pc}

000d8588 <__aeabi_dcmpeq>:
   d8588:	f84d ed08 	str.w	lr, [sp, #-8]!
   d858c:	f7ff fff4 	bl	d8578 <__aeabi_cdcmpeq>
   d8590:	bf0c      	ite	eq
   d8592:	2001      	moveq	r0, #1
   d8594:	2000      	movne	r0, #0
   d8596:	f85d fb08 	ldr.w	pc, [sp], #8
   d859a:	bf00      	nop

000d859c <__aeabi_dcmplt>:
   d859c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d85a0:	f7ff ffea 	bl	d8578 <__aeabi_cdcmpeq>
   d85a4:	bf34      	ite	cc
   d85a6:	2001      	movcc	r0, #1
   d85a8:	2000      	movcs	r0, #0
   d85aa:	f85d fb08 	ldr.w	pc, [sp], #8
   d85ae:	bf00      	nop

000d85b0 <__aeabi_dcmple>:
   d85b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d85b4:	f7ff ffe0 	bl	d8578 <__aeabi_cdcmpeq>
   d85b8:	bf94      	ite	ls
   d85ba:	2001      	movls	r0, #1
   d85bc:	2000      	movhi	r0, #0
   d85be:	f85d fb08 	ldr.w	pc, [sp], #8
   d85c2:	bf00      	nop

000d85c4 <__aeabi_dcmpge>:
   d85c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d85c8:	f7ff ffce 	bl	d8568 <__aeabi_cdrcmple>
   d85cc:	bf94      	ite	ls
   d85ce:	2001      	movls	r0, #1
   d85d0:	2000      	movhi	r0, #0
   d85d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d85d6:	bf00      	nop

000d85d8 <__aeabi_dcmpgt>:
   d85d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d85dc:	f7ff ffc4 	bl	d8568 <__aeabi_cdrcmple>
   d85e0:	bf34      	ite	cc
   d85e2:	2001      	movcc	r0, #1
   d85e4:	2000      	movcs	r0, #0
   d85e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d85ea:	bf00      	nop

000d85ec <__aeabi_d2uiz>:
   d85ec:	004a      	lsls	r2, r1, #1
   d85ee:	d211      	bcs.n	d8614 <__aeabi_d2uiz+0x28>
   d85f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d85f4:	d211      	bcs.n	d861a <__aeabi_d2uiz+0x2e>
   d85f6:	d50d      	bpl.n	d8614 <__aeabi_d2uiz+0x28>
   d85f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d85fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8600:	d40e      	bmi.n	d8620 <__aeabi_d2uiz+0x34>
   d8602:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d860a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d860e:	fa23 f002 	lsr.w	r0, r3, r2
   d8612:	4770      	bx	lr
   d8614:	f04f 0000 	mov.w	r0, #0
   d8618:	4770      	bx	lr
   d861a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d861e:	d102      	bne.n	d8626 <__aeabi_d2uiz+0x3a>
   d8620:	f04f 30ff 	mov.w	r0, #4294967295
   d8624:	4770      	bx	lr
   d8626:	f04f 0000 	mov.w	r0, #0
   d862a:	4770      	bx	lr

000d862c <__aeabi_uldivmod>:
   d862c:	b953      	cbnz	r3, d8644 <__aeabi_uldivmod+0x18>
   d862e:	b94a      	cbnz	r2, d8644 <__aeabi_uldivmod+0x18>
   d8630:	2900      	cmp	r1, #0
   d8632:	bf08      	it	eq
   d8634:	2800      	cmpeq	r0, #0
   d8636:	bf1c      	itt	ne
   d8638:	f04f 31ff 	movne.w	r1, #4294967295
   d863c:	f04f 30ff 	movne.w	r0, #4294967295
   d8640:	f000 b98c 	b.w	d895c <__aeabi_idiv0>
   d8644:	f1ad 0c08 	sub.w	ip, sp, #8
   d8648:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d864c:	f000 f824 	bl	d8698 <__udivmoddi4>
   d8650:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8658:	b004      	add	sp, #16
   d865a:	4770      	bx	lr

000d865c <__aeabi_d2ulz>:
   d865c:	b5d0      	push	{r4, r6, r7, lr}
   d865e:	4b0c      	ldr	r3, [pc, #48]	; (d8690 <__aeabi_d2ulz+0x34>)
   d8660:	2200      	movs	r2, #0
   d8662:	4606      	mov	r6, r0
   d8664:	460f      	mov	r7, r1
   d8666:	f7ff fd27 	bl	d80b8 <__aeabi_dmul>
   d866a:	f7ff ffbf 	bl	d85ec <__aeabi_d2uiz>
   d866e:	4604      	mov	r4, r0
   d8670:	f7ff fca8 	bl	d7fc4 <__aeabi_ui2d>
   d8674:	4b07      	ldr	r3, [pc, #28]	; (d8694 <__aeabi_d2ulz+0x38>)
   d8676:	2200      	movs	r2, #0
   d8678:	f7ff fd1e 	bl	d80b8 <__aeabi_dmul>
   d867c:	4602      	mov	r2, r0
   d867e:	460b      	mov	r3, r1
   d8680:	4630      	mov	r0, r6
   d8682:	4639      	mov	r1, r7
   d8684:	f7ff fb60 	bl	d7d48 <__aeabi_dsub>
   d8688:	f7ff ffb0 	bl	d85ec <__aeabi_d2uiz>
   d868c:	4621      	mov	r1, r4
   d868e:	bdd0      	pop	{r4, r6, r7, pc}
   d8690:	3df00000 	.word	0x3df00000
   d8694:	41f00000 	.word	0x41f00000

000d8698 <__udivmoddi4>:
   d8698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d869c:	9d08      	ldr	r5, [sp, #32]
   d869e:	4604      	mov	r4, r0
   d86a0:	468c      	mov	ip, r1
   d86a2:	2b00      	cmp	r3, #0
   d86a4:	f040 8083 	bne.w	d87ae <__udivmoddi4+0x116>
   d86a8:	428a      	cmp	r2, r1
   d86aa:	4617      	mov	r7, r2
   d86ac:	d947      	bls.n	d873e <__udivmoddi4+0xa6>
   d86ae:	fab2 f282 	clz	r2, r2
   d86b2:	b142      	cbz	r2, d86c6 <__udivmoddi4+0x2e>
   d86b4:	f1c2 0020 	rsb	r0, r2, #32
   d86b8:	fa24 f000 	lsr.w	r0, r4, r0
   d86bc:	4091      	lsls	r1, r2
   d86be:	4097      	lsls	r7, r2
   d86c0:	ea40 0c01 	orr.w	ip, r0, r1
   d86c4:	4094      	lsls	r4, r2
   d86c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d86ca:	0c23      	lsrs	r3, r4, #16
   d86cc:	fbbc f6f8 	udiv	r6, ip, r8
   d86d0:	fa1f fe87 	uxth.w	lr, r7
   d86d4:	fb08 c116 	mls	r1, r8, r6, ip
   d86d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d86dc:	fb06 f10e 	mul.w	r1, r6, lr
   d86e0:	4299      	cmp	r1, r3
   d86e2:	d909      	bls.n	d86f8 <__udivmoddi4+0x60>
   d86e4:	18fb      	adds	r3, r7, r3
   d86e6:	f106 30ff 	add.w	r0, r6, #4294967295
   d86ea:	f080 8119 	bcs.w	d8920 <__udivmoddi4+0x288>
   d86ee:	4299      	cmp	r1, r3
   d86f0:	f240 8116 	bls.w	d8920 <__udivmoddi4+0x288>
   d86f4:	3e02      	subs	r6, #2
   d86f6:	443b      	add	r3, r7
   d86f8:	1a5b      	subs	r3, r3, r1
   d86fa:	b2a4      	uxth	r4, r4
   d86fc:	fbb3 f0f8 	udiv	r0, r3, r8
   d8700:	fb08 3310 	mls	r3, r8, r0, r3
   d8704:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d8708:	fb00 fe0e 	mul.w	lr, r0, lr
   d870c:	45a6      	cmp	lr, r4
   d870e:	d909      	bls.n	d8724 <__udivmoddi4+0x8c>
   d8710:	193c      	adds	r4, r7, r4
   d8712:	f100 33ff 	add.w	r3, r0, #4294967295
   d8716:	f080 8105 	bcs.w	d8924 <__udivmoddi4+0x28c>
   d871a:	45a6      	cmp	lr, r4
   d871c:	f240 8102 	bls.w	d8924 <__udivmoddi4+0x28c>
   d8720:	3802      	subs	r0, #2
   d8722:	443c      	add	r4, r7
   d8724:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d8728:	eba4 040e 	sub.w	r4, r4, lr
   d872c:	2600      	movs	r6, #0
   d872e:	b11d      	cbz	r5, d8738 <__udivmoddi4+0xa0>
   d8730:	40d4      	lsrs	r4, r2
   d8732:	2300      	movs	r3, #0
   d8734:	e9c5 4300 	strd	r4, r3, [r5]
   d8738:	4631      	mov	r1, r6
   d873a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d873e:	b902      	cbnz	r2, d8742 <__udivmoddi4+0xaa>
   d8740:	deff      	udf	#255	; 0xff
   d8742:	fab2 f282 	clz	r2, r2
   d8746:	2a00      	cmp	r2, #0
   d8748:	d150      	bne.n	d87ec <__udivmoddi4+0x154>
   d874a:	1bcb      	subs	r3, r1, r7
   d874c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8750:	fa1f f887 	uxth.w	r8, r7
   d8754:	2601      	movs	r6, #1
   d8756:	fbb3 fcfe 	udiv	ip, r3, lr
   d875a:	0c21      	lsrs	r1, r4, #16
   d875c:	fb0e 331c 	mls	r3, lr, ip, r3
   d8760:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8764:	fb08 f30c 	mul.w	r3, r8, ip
   d8768:	428b      	cmp	r3, r1
   d876a:	d907      	bls.n	d877c <__udivmoddi4+0xe4>
   d876c:	1879      	adds	r1, r7, r1
   d876e:	f10c 30ff 	add.w	r0, ip, #4294967295
   d8772:	d202      	bcs.n	d877a <__udivmoddi4+0xe2>
   d8774:	428b      	cmp	r3, r1
   d8776:	f200 80e9 	bhi.w	d894c <__udivmoddi4+0x2b4>
   d877a:	4684      	mov	ip, r0
   d877c:	1ac9      	subs	r1, r1, r3
   d877e:	b2a3      	uxth	r3, r4
   d8780:	fbb1 f0fe 	udiv	r0, r1, lr
   d8784:	fb0e 1110 	mls	r1, lr, r0, r1
   d8788:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d878c:	fb08 f800 	mul.w	r8, r8, r0
   d8790:	45a0      	cmp	r8, r4
   d8792:	d907      	bls.n	d87a4 <__udivmoddi4+0x10c>
   d8794:	193c      	adds	r4, r7, r4
   d8796:	f100 33ff 	add.w	r3, r0, #4294967295
   d879a:	d202      	bcs.n	d87a2 <__udivmoddi4+0x10a>
   d879c:	45a0      	cmp	r8, r4
   d879e:	f200 80d9 	bhi.w	d8954 <__udivmoddi4+0x2bc>
   d87a2:	4618      	mov	r0, r3
   d87a4:	eba4 0408 	sub.w	r4, r4, r8
   d87a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d87ac:	e7bf      	b.n	d872e <__udivmoddi4+0x96>
   d87ae:	428b      	cmp	r3, r1
   d87b0:	d909      	bls.n	d87c6 <__udivmoddi4+0x12e>
   d87b2:	2d00      	cmp	r5, #0
   d87b4:	f000 80b1 	beq.w	d891a <__udivmoddi4+0x282>
   d87b8:	2600      	movs	r6, #0
   d87ba:	e9c5 0100 	strd	r0, r1, [r5]
   d87be:	4630      	mov	r0, r6
   d87c0:	4631      	mov	r1, r6
   d87c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d87c6:	fab3 f683 	clz	r6, r3
   d87ca:	2e00      	cmp	r6, #0
   d87cc:	d14a      	bne.n	d8864 <__udivmoddi4+0x1cc>
   d87ce:	428b      	cmp	r3, r1
   d87d0:	d302      	bcc.n	d87d8 <__udivmoddi4+0x140>
   d87d2:	4282      	cmp	r2, r0
   d87d4:	f200 80b8 	bhi.w	d8948 <__udivmoddi4+0x2b0>
   d87d8:	1a84      	subs	r4, r0, r2
   d87da:	eb61 0103 	sbc.w	r1, r1, r3
   d87de:	2001      	movs	r0, #1
   d87e0:	468c      	mov	ip, r1
   d87e2:	2d00      	cmp	r5, #0
   d87e4:	d0a8      	beq.n	d8738 <__udivmoddi4+0xa0>
   d87e6:	e9c5 4c00 	strd	r4, ip, [r5]
   d87ea:	e7a5      	b.n	d8738 <__udivmoddi4+0xa0>
   d87ec:	f1c2 0320 	rsb	r3, r2, #32
   d87f0:	fa20 f603 	lsr.w	r6, r0, r3
   d87f4:	4097      	lsls	r7, r2
   d87f6:	fa01 f002 	lsl.w	r0, r1, r2
   d87fa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d87fe:	40d9      	lsrs	r1, r3
   d8800:	4330      	orrs	r0, r6
   d8802:	0c03      	lsrs	r3, r0, #16
   d8804:	fbb1 f6fe 	udiv	r6, r1, lr
   d8808:	fa1f f887 	uxth.w	r8, r7
   d880c:	fb0e 1116 	mls	r1, lr, r6, r1
   d8810:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8814:	fb06 f108 	mul.w	r1, r6, r8
   d8818:	4299      	cmp	r1, r3
   d881a:	fa04 f402 	lsl.w	r4, r4, r2
   d881e:	d909      	bls.n	d8834 <__udivmoddi4+0x19c>
   d8820:	18fb      	adds	r3, r7, r3
   d8822:	f106 3cff 	add.w	ip, r6, #4294967295
   d8826:	f080 808d 	bcs.w	d8944 <__udivmoddi4+0x2ac>
   d882a:	4299      	cmp	r1, r3
   d882c:	f240 808a 	bls.w	d8944 <__udivmoddi4+0x2ac>
   d8830:	3e02      	subs	r6, #2
   d8832:	443b      	add	r3, r7
   d8834:	1a5b      	subs	r3, r3, r1
   d8836:	b281      	uxth	r1, r0
   d8838:	fbb3 f0fe 	udiv	r0, r3, lr
   d883c:	fb0e 3310 	mls	r3, lr, r0, r3
   d8840:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8844:	fb00 f308 	mul.w	r3, r0, r8
   d8848:	428b      	cmp	r3, r1
   d884a:	d907      	bls.n	d885c <__udivmoddi4+0x1c4>
   d884c:	1879      	adds	r1, r7, r1
   d884e:	f100 3cff 	add.w	ip, r0, #4294967295
   d8852:	d273      	bcs.n	d893c <__udivmoddi4+0x2a4>
   d8854:	428b      	cmp	r3, r1
   d8856:	d971      	bls.n	d893c <__udivmoddi4+0x2a4>
   d8858:	3802      	subs	r0, #2
   d885a:	4439      	add	r1, r7
   d885c:	1acb      	subs	r3, r1, r3
   d885e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d8862:	e778      	b.n	d8756 <__udivmoddi4+0xbe>
   d8864:	f1c6 0c20 	rsb	ip, r6, #32
   d8868:	fa03 f406 	lsl.w	r4, r3, r6
   d886c:	fa22 f30c 	lsr.w	r3, r2, ip
   d8870:	431c      	orrs	r4, r3
   d8872:	fa20 f70c 	lsr.w	r7, r0, ip
   d8876:	fa01 f306 	lsl.w	r3, r1, r6
   d887a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d887e:	fa21 f10c 	lsr.w	r1, r1, ip
   d8882:	431f      	orrs	r7, r3
   d8884:	0c3b      	lsrs	r3, r7, #16
   d8886:	fbb1 f9fe 	udiv	r9, r1, lr
   d888a:	fa1f f884 	uxth.w	r8, r4
   d888e:	fb0e 1119 	mls	r1, lr, r9, r1
   d8892:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d8896:	fb09 fa08 	mul.w	sl, r9, r8
   d889a:	458a      	cmp	sl, r1
   d889c:	fa02 f206 	lsl.w	r2, r2, r6
   d88a0:	fa00 f306 	lsl.w	r3, r0, r6
   d88a4:	d908      	bls.n	d88b8 <__udivmoddi4+0x220>
   d88a6:	1861      	adds	r1, r4, r1
   d88a8:	f109 30ff 	add.w	r0, r9, #4294967295
   d88ac:	d248      	bcs.n	d8940 <__udivmoddi4+0x2a8>
   d88ae:	458a      	cmp	sl, r1
   d88b0:	d946      	bls.n	d8940 <__udivmoddi4+0x2a8>
   d88b2:	f1a9 0902 	sub.w	r9, r9, #2
   d88b6:	4421      	add	r1, r4
   d88b8:	eba1 010a 	sub.w	r1, r1, sl
   d88bc:	b2bf      	uxth	r7, r7
   d88be:	fbb1 f0fe 	udiv	r0, r1, lr
   d88c2:	fb0e 1110 	mls	r1, lr, r0, r1
   d88c6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d88ca:	fb00 f808 	mul.w	r8, r0, r8
   d88ce:	45b8      	cmp	r8, r7
   d88d0:	d907      	bls.n	d88e2 <__udivmoddi4+0x24a>
   d88d2:	19e7      	adds	r7, r4, r7
   d88d4:	f100 31ff 	add.w	r1, r0, #4294967295
   d88d8:	d22e      	bcs.n	d8938 <__udivmoddi4+0x2a0>
   d88da:	45b8      	cmp	r8, r7
   d88dc:	d92c      	bls.n	d8938 <__udivmoddi4+0x2a0>
   d88de:	3802      	subs	r0, #2
   d88e0:	4427      	add	r7, r4
   d88e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d88e6:	eba7 0708 	sub.w	r7, r7, r8
   d88ea:	fba0 8902 	umull	r8, r9, r0, r2
   d88ee:	454f      	cmp	r7, r9
   d88f0:	46c6      	mov	lr, r8
   d88f2:	4649      	mov	r1, r9
   d88f4:	d31a      	bcc.n	d892c <__udivmoddi4+0x294>
   d88f6:	d017      	beq.n	d8928 <__udivmoddi4+0x290>
   d88f8:	b15d      	cbz	r5, d8912 <__udivmoddi4+0x27a>
   d88fa:	ebb3 020e 	subs.w	r2, r3, lr
   d88fe:	eb67 0701 	sbc.w	r7, r7, r1
   d8902:	fa07 fc0c 	lsl.w	ip, r7, ip
   d8906:	40f2      	lsrs	r2, r6
   d8908:	ea4c 0202 	orr.w	r2, ip, r2
   d890c:	40f7      	lsrs	r7, r6
   d890e:	e9c5 2700 	strd	r2, r7, [r5]
   d8912:	2600      	movs	r6, #0
   d8914:	4631      	mov	r1, r6
   d8916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d891a:	462e      	mov	r6, r5
   d891c:	4628      	mov	r0, r5
   d891e:	e70b      	b.n	d8738 <__udivmoddi4+0xa0>
   d8920:	4606      	mov	r6, r0
   d8922:	e6e9      	b.n	d86f8 <__udivmoddi4+0x60>
   d8924:	4618      	mov	r0, r3
   d8926:	e6fd      	b.n	d8724 <__udivmoddi4+0x8c>
   d8928:	4543      	cmp	r3, r8
   d892a:	d2e5      	bcs.n	d88f8 <__udivmoddi4+0x260>
   d892c:	ebb8 0e02 	subs.w	lr, r8, r2
   d8930:	eb69 0104 	sbc.w	r1, r9, r4
   d8934:	3801      	subs	r0, #1
   d8936:	e7df      	b.n	d88f8 <__udivmoddi4+0x260>
   d8938:	4608      	mov	r0, r1
   d893a:	e7d2      	b.n	d88e2 <__udivmoddi4+0x24a>
   d893c:	4660      	mov	r0, ip
   d893e:	e78d      	b.n	d885c <__udivmoddi4+0x1c4>
   d8940:	4681      	mov	r9, r0
   d8942:	e7b9      	b.n	d88b8 <__udivmoddi4+0x220>
   d8944:	4666      	mov	r6, ip
   d8946:	e775      	b.n	d8834 <__udivmoddi4+0x19c>
   d8948:	4630      	mov	r0, r6
   d894a:	e74a      	b.n	d87e2 <__udivmoddi4+0x14a>
   d894c:	f1ac 0c02 	sub.w	ip, ip, #2
   d8950:	4439      	add	r1, r7
   d8952:	e713      	b.n	d877c <__udivmoddi4+0xe4>
   d8954:	3802      	subs	r0, #2
   d8956:	443c      	add	r4, r7
   d8958:	e724      	b.n	d87a4 <__udivmoddi4+0x10c>
   d895a:	bf00      	nop

000d895c <__aeabi_idiv0>:
   d895c:	4770      	bx	lr
   d895e:	bf00      	nop

000d8960 <atoi>:
   d8960:	220a      	movs	r2, #10
   d8962:	2100      	movs	r1, #0
   d8964:	f000 b8f4 	b.w	d8b50 <strtol>

000d8968 <atol>:
   d8968:	220a      	movs	r2, #10
   d896a:	2100      	movs	r1, #0
   d896c:	f000 b8f0 	b.w	d8b50 <strtol>

000d8970 <__cxa_atexit>:
   d8970:	b510      	push	{r4, lr}
   d8972:	4c05      	ldr	r4, [pc, #20]	; (d8988 <__cxa_atexit+0x18>)
   d8974:	4613      	mov	r3, r2
   d8976:	b12c      	cbz	r4, d8984 <__cxa_atexit+0x14>
   d8978:	460a      	mov	r2, r1
   d897a:	4601      	mov	r1, r0
   d897c:	2002      	movs	r0, #2
   d897e:	f3af 8000 	nop.w
   d8982:	bd10      	pop	{r4, pc}
   d8984:	4620      	mov	r0, r4
   d8986:	e7fc      	b.n	d8982 <__cxa_atexit+0x12>
   d8988:	00000000 	.word	0x00000000

000d898c <memcpy>:
   d898c:	440a      	add	r2, r1
   d898e:	4291      	cmp	r1, r2
   d8990:	f100 33ff 	add.w	r3, r0, #4294967295
   d8994:	d100      	bne.n	d8998 <memcpy+0xc>
   d8996:	4770      	bx	lr
   d8998:	b510      	push	{r4, lr}
   d899a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d899e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d89a2:	4291      	cmp	r1, r2
   d89a4:	d1f9      	bne.n	d899a <memcpy+0xe>
   d89a6:	bd10      	pop	{r4, pc}

000d89a8 <memset>:
   d89a8:	4402      	add	r2, r0
   d89aa:	4603      	mov	r3, r0
   d89ac:	4293      	cmp	r3, r2
   d89ae:	d100      	bne.n	d89b2 <memset+0xa>
   d89b0:	4770      	bx	lr
   d89b2:	f803 1b01 	strb.w	r1, [r3], #1
   d89b6:	e7f9      	b.n	d89ac <memset+0x4>

000d89b8 <srand>:
   d89b8:	b538      	push	{r3, r4, r5, lr}
   d89ba:	4b0d      	ldr	r3, [pc, #52]	; (d89f0 <srand+0x38>)
   d89bc:	681d      	ldr	r5, [r3, #0]
   d89be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d89c0:	4604      	mov	r4, r0
   d89c2:	b97b      	cbnz	r3, d89e4 <srand+0x2c>
   d89c4:	2018      	movs	r0, #24
   d89c6:	f7fd fd9b 	bl	d6500 <malloc>
   d89ca:	4a0a      	ldr	r2, [pc, #40]	; (d89f4 <srand+0x3c>)
   d89cc:	4b0a      	ldr	r3, [pc, #40]	; (d89f8 <srand+0x40>)
   d89ce:	63a8      	str	r0, [r5, #56]	; 0x38
   d89d0:	e9c0 2300 	strd	r2, r3, [r0]
   d89d4:	4b09      	ldr	r3, [pc, #36]	; (d89fc <srand+0x44>)
   d89d6:	6083      	str	r3, [r0, #8]
   d89d8:	230b      	movs	r3, #11
   d89da:	8183      	strh	r3, [r0, #12]
   d89dc:	2201      	movs	r2, #1
   d89de:	2300      	movs	r3, #0
   d89e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d89e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d89e6:	2200      	movs	r2, #0
   d89e8:	611c      	str	r4, [r3, #16]
   d89ea:	615a      	str	r2, [r3, #20]
   d89ec:	bd38      	pop	{r3, r4, r5, pc}
   d89ee:	bf00      	nop
   d89f0:	2003e4f8 	.word	0x2003e4f8
   d89f4:	abcd330e 	.word	0xabcd330e
   d89f8:	e66d1234 	.word	0xe66d1234
   d89fc:	0005deec 	.word	0x0005deec

000d8a00 <strcmp>:
   d8a00:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8a04:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8a08:	2a01      	cmp	r2, #1
   d8a0a:	bf28      	it	cs
   d8a0c:	429a      	cmpcs	r2, r3
   d8a0e:	d0f7      	beq.n	d8a00 <strcmp>
   d8a10:	1ad0      	subs	r0, r2, r3
   d8a12:	4770      	bx	lr

000d8a14 <strcpy>:
   d8a14:	4603      	mov	r3, r0
   d8a16:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8a1a:	f803 2b01 	strb.w	r2, [r3], #1
   d8a1e:	2a00      	cmp	r2, #0
   d8a20:	d1f9      	bne.n	d8a16 <strcpy+0x2>
   d8a22:	4770      	bx	lr

000d8a24 <strlen>:
   d8a24:	4603      	mov	r3, r0
   d8a26:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8a2a:	2a00      	cmp	r2, #0
   d8a2c:	d1fb      	bne.n	d8a26 <strlen+0x2>
   d8a2e:	1a18      	subs	r0, r3, r0
   d8a30:	3801      	subs	r0, #1
   d8a32:	4770      	bx	lr

000d8a34 <strncpy>:
   d8a34:	b510      	push	{r4, lr}
   d8a36:	3901      	subs	r1, #1
   d8a38:	4603      	mov	r3, r0
   d8a3a:	b132      	cbz	r2, d8a4a <strncpy+0x16>
   d8a3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8a40:	f803 4b01 	strb.w	r4, [r3], #1
   d8a44:	3a01      	subs	r2, #1
   d8a46:	2c00      	cmp	r4, #0
   d8a48:	d1f7      	bne.n	d8a3a <strncpy+0x6>
   d8a4a:	441a      	add	r2, r3
   d8a4c:	2100      	movs	r1, #0
   d8a4e:	4293      	cmp	r3, r2
   d8a50:	d100      	bne.n	d8a54 <strncpy+0x20>
   d8a52:	bd10      	pop	{r4, pc}
   d8a54:	f803 1b01 	strb.w	r1, [r3], #1
   d8a58:	e7f9      	b.n	d8a4e <strncpy+0x1a>
	...

000d8a5c <_strtol_l.isra.0>:
   d8a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8a60:	4e3a      	ldr	r6, [pc, #232]	; (d8b4c <_strtol_l.isra.0+0xf0>)
   d8a62:	4686      	mov	lr, r0
   d8a64:	468c      	mov	ip, r1
   d8a66:	4660      	mov	r0, ip
   d8a68:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8a6c:	5da5      	ldrb	r5, [r4, r6]
   d8a6e:	f015 0508 	ands.w	r5, r5, #8
   d8a72:	d1f8      	bne.n	d8a66 <_strtol_l.isra.0+0xa>
   d8a74:	2c2d      	cmp	r4, #45	; 0x2d
   d8a76:	d133      	bne.n	d8ae0 <_strtol_l.isra.0+0x84>
   d8a78:	f89c 4000 	ldrb.w	r4, [ip]
   d8a7c:	f04f 0801 	mov.w	r8, #1
   d8a80:	f100 0c02 	add.w	ip, r0, #2
   d8a84:	2b00      	cmp	r3, #0
   d8a86:	d05c      	beq.n	d8b42 <_strtol_l.isra.0+0xe6>
   d8a88:	2b10      	cmp	r3, #16
   d8a8a:	d10c      	bne.n	d8aa6 <_strtol_l.isra.0+0x4a>
   d8a8c:	2c30      	cmp	r4, #48	; 0x30
   d8a8e:	d10a      	bne.n	d8aa6 <_strtol_l.isra.0+0x4a>
   d8a90:	f89c 0000 	ldrb.w	r0, [ip]
   d8a94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8a98:	2858      	cmp	r0, #88	; 0x58
   d8a9a:	d14d      	bne.n	d8b38 <_strtol_l.isra.0+0xdc>
   d8a9c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8aa0:	2310      	movs	r3, #16
   d8aa2:	f10c 0c02 	add.w	ip, ip, #2
   d8aa6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8aaa:	3f01      	subs	r7, #1
   d8aac:	2600      	movs	r6, #0
   d8aae:	fbb7 f9f3 	udiv	r9, r7, r3
   d8ab2:	4630      	mov	r0, r6
   d8ab4:	fb03 7a19 	mls	sl, r3, r9, r7
   d8ab8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8abc:	2d09      	cmp	r5, #9
   d8abe:	d818      	bhi.n	d8af2 <_strtol_l.isra.0+0x96>
   d8ac0:	462c      	mov	r4, r5
   d8ac2:	42a3      	cmp	r3, r4
   d8ac4:	dd24      	ble.n	d8b10 <_strtol_l.isra.0+0xb4>
   d8ac6:	1c75      	adds	r5, r6, #1
   d8ac8:	d007      	beq.n	d8ada <_strtol_l.isra.0+0x7e>
   d8aca:	4581      	cmp	r9, r0
   d8acc:	d31d      	bcc.n	d8b0a <_strtol_l.isra.0+0xae>
   d8ace:	d101      	bne.n	d8ad4 <_strtol_l.isra.0+0x78>
   d8ad0:	45a2      	cmp	sl, r4
   d8ad2:	db1a      	blt.n	d8b0a <_strtol_l.isra.0+0xae>
   d8ad4:	fb00 4003 	mla	r0, r0, r3, r4
   d8ad8:	2601      	movs	r6, #1
   d8ada:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8ade:	e7eb      	b.n	d8ab8 <_strtol_l.isra.0+0x5c>
   d8ae0:	2c2b      	cmp	r4, #43	; 0x2b
   d8ae2:	bf08      	it	eq
   d8ae4:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8ae8:	46a8      	mov	r8, r5
   d8aea:	bf08      	it	eq
   d8aec:	f100 0c02 	addeq.w	ip, r0, #2
   d8af0:	e7c8      	b.n	d8a84 <_strtol_l.isra.0+0x28>
   d8af2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8af6:	2d19      	cmp	r5, #25
   d8af8:	d801      	bhi.n	d8afe <_strtol_l.isra.0+0xa2>
   d8afa:	3c37      	subs	r4, #55	; 0x37
   d8afc:	e7e1      	b.n	d8ac2 <_strtol_l.isra.0+0x66>
   d8afe:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8b02:	2d19      	cmp	r5, #25
   d8b04:	d804      	bhi.n	d8b10 <_strtol_l.isra.0+0xb4>
   d8b06:	3c57      	subs	r4, #87	; 0x57
   d8b08:	e7db      	b.n	d8ac2 <_strtol_l.isra.0+0x66>
   d8b0a:	f04f 36ff 	mov.w	r6, #4294967295
   d8b0e:	e7e4      	b.n	d8ada <_strtol_l.isra.0+0x7e>
   d8b10:	1c73      	adds	r3, r6, #1
   d8b12:	d106      	bne.n	d8b22 <_strtol_l.isra.0+0xc6>
   d8b14:	2322      	movs	r3, #34	; 0x22
   d8b16:	f8ce 3000 	str.w	r3, [lr]
   d8b1a:	4638      	mov	r0, r7
   d8b1c:	b942      	cbnz	r2, d8b30 <_strtol_l.isra.0+0xd4>
   d8b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8b22:	f1b8 0f00 	cmp.w	r8, #0
   d8b26:	d000      	beq.n	d8b2a <_strtol_l.isra.0+0xce>
   d8b28:	4240      	negs	r0, r0
   d8b2a:	2a00      	cmp	r2, #0
   d8b2c:	d0f7      	beq.n	d8b1e <_strtol_l.isra.0+0xc2>
   d8b2e:	b10e      	cbz	r6, d8b34 <_strtol_l.isra.0+0xd8>
   d8b30:	f10c 31ff 	add.w	r1, ip, #4294967295
   d8b34:	6011      	str	r1, [r2, #0]
   d8b36:	e7f2      	b.n	d8b1e <_strtol_l.isra.0+0xc2>
   d8b38:	2430      	movs	r4, #48	; 0x30
   d8b3a:	2b00      	cmp	r3, #0
   d8b3c:	d1b3      	bne.n	d8aa6 <_strtol_l.isra.0+0x4a>
   d8b3e:	2308      	movs	r3, #8
   d8b40:	e7b1      	b.n	d8aa6 <_strtol_l.isra.0+0x4a>
   d8b42:	2c30      	cmp	r4, #48	; 0x30
   d8b44:	d0a4      	beq.n	d8a90 <_strtol_l.isra.0+0x34>
   d8b46:	230a      	movs	r3, #10
   d8b48:	e7ad      	b.n	d8aa6 <_strtol_l.isra.0+0x4a>
   d8b4a:	bf00      	nop
   d8b4c:	000d9e4a 	.word	0x000d9e4a

000d8b50 <strtol>:
   d8b50:	4613      	mov	r3, r2
   d8b52:	460a      	mov	r2, r1
   d8b54:	4601      	mov	r1, r0
   d8b56:	4802      	ldr	r0, [pc, #8]	; (d8b60 <strtol+0x10>)
   d8b58:	6800      	ldr	r0, [r0, #0]
   d8b5a:	f7ff bf7f 	b.w	d8a5c <_strtol_l.isra.0>
   d8b5e:	bf00      	nop
   d8b60:	2003e4f8 	.word	0x2003e4f8

000d8b64 <dynalib_user>:
   d8b64:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d8b74:	00000000 25006925 6900696c 756f006e     ....%i.%li.in.ou
   d8b84:	77700074 7764006d 00776100 586a6e63     t.pwm.dw.aw.cnjX
   d8b94:	745f6e44 73637637 502d4933 626a2d52     Dn_t7vcs3I-PR-jb
   d8ba4:	47626f53 6a5f5f64 394d7132 6c654300     SobGd__j2qM9.Cel
   d8bb4:	73756973 0a00203a 68614600 686e6572     sius: ...Fahrenh
   d8bc4:	3a746965                                 eit: .

000d8bca <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d8bca:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d8bda:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d8bea:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d8bfa:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d8c0a:	32203320 20313230 303a3131 30333a31      3 2021 11:01:30
   d8c1a:	00000000                                 ......

000d8c20 <_ZL22BlynkReadHandlerVector>:
   d8c20:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8c30:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8c40:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8c50:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8c60:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8c70:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8c80:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8c90:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8ca0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8cb0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8cc0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8cd0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8ce0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8cf0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8d00:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8d10:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8d20:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8d30:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8d40:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8d50:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8d60:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8d70:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8d80:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8d90:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8da0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8db0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8dc0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8dd0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8de0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8df0:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8e00:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..
   d8e10:	000d4c9d 000d4c9d 000d4c9d 000d4c9d     .L...L...L...L..

000d8e20 <_ZL23BlynkWriteHandlerVector>:
   d8e20:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8e30:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8e40:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8e50:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8e60:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8e70:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8e80:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8e90:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8ea0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8eb0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8ec0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8ed0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8ee0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8ef0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8f00:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8f10:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8f20:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8f30:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8f40:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8f50:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8f60:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8f70:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8f80:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8f90:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8fa0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8fb0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8fc0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8fd0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8fe0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d8ff0:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d9000:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d9010:	000d4c9f 000d4c9f 000d4c9f 000d4c9f     .L...L...L...L..
   d9020:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
   d9030:	50533c00 74655349 676e6974 65642073     .<SPISettings de
   d9040:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
   d9050:	2073676e 75257325 20732520 45444f4d     ngs %s%u %s MODE
   d9060:	003e7525                                %u>.

000d9064 <_ZL4font>:
   d9064:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   d9074:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   d9084:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   d9094:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   d90a4:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   d90b4:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   d90c4:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   d90d4:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   d90e4:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   d90f4:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   d9104:	00000000 5f000000 07000000 14000700     ......._........
   d9114:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   d9124:	00502056 00030708 41221c00 22410000     V P......."A..A"
   d9134:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   d9144:	08080800 00000808 20006060 02040810     ........``. ....
   d9154:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   d9164:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   d9174:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   d9184:	00001e29 00000014 00003440 22140800     ).......@4....."
   d9194:	14141441 41001414 02081422 06095901     A......A"....Y..
   d91a4:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   d91b4:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   d91c4:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   d91d4:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   d91e4:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   d91f4:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   d9204:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   d9214:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   d9224:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   d9234:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   d9244:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   d9254:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   d9264:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   d9274:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   d9284:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   d9294:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   d92a4:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   d92b4:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   d92c4:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   d92d4:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   d92e4:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   d92f4:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   d9304:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   d9314:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   d9324:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   d9334:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   d9344:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   d9354:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   d9364:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   d9374:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   d9384:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   d9394:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   d93a4:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   d93b4:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   d93c4:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   d93d4:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   d93e4:	00ff0000 ff101010 14141400 101000ff     ................
   d93f4:	10ff00ff f010f010 fc141414 f7141400     ................
   d9404:	0000ff00 14ff00ff fc04f414 10171414     ................
   d9414:	1f10101f 14141f10 10001f14 00f01010     ................
   d9424:	1f000000 10101010 1010101f 0010f010     ................
   d9434:	10ff0000 10101010 10101010 000010ff     ................
   d9444:	0014ff00 ff00ff00 101f0000 fc000017     ................
   d9454:	1414f404 14171017 f404f414 00ff0000     ................
   d9464:	141414f7 14141414 14f700f7 14171414     ................
   d9474:	101f1010 1414141f 101014f4 00f010f0     ................
   d9484:	1f101f00 1f000000 00000014 000014fc     ................
   d9494:	10f010f0 ff10ff10 ff141414 10101014     ................
   d94a4:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   d94b4:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   d94c4:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   d94d4:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   d94e4:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   d94f4:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   d9504:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   d9514:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   d9524:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   d9534:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   d9544:	00000018 30001010 0101ff40 01011f00     .......0@.......
   d9554:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

000d9564 <_ZTV12Adafruit_GFX>:
	...
   d9574:	000d5401 000d6aa5 000d40a5 000d4e09     .T...j...@...N..
   d9584:	000d4e0b 000d4e3d 000d4e19 000d4e2b     .N..=N...N..+N..
   d9594:	000d4d4d 000d4e09 000d5035 000d4faf     MM...N..5P...O..
   d95a4:	000d4e55 000d4e93 000d4ecd 000d4f13     UN...N...N...O..
   d95b4:	000d4fb1 000d4f2f                       .O../O..

000d95bc <_ZTV16OledWingAdafruit>:
	...
   d95c4:	000d5511 000d5531 000d5401 000d6aa5     .U..1U...T...j..
   d95d4:	000d5719 000d4e09 000d4e0b 000d4e3d     .W...N...N..=N..
   d95e4:	000d4e19 000d4e2b 000d4d4d 000d4e09     .N..+N..MM...N..
   d95f4:	000d5035 000d58d3 000d5e67 000d5e19     5P...X..g^...^..
   d9604:	000d4ecd 000d4f13 000d4fb1 000d4f2f     .N...O...O../O..

000d9614 <_ZTVN8particle11SPISettingsE>:
	...
   d961c:	000d4cf9 000d4ccd 000d4ccf              .L...L...L..

000d9628 <_ZL12splash1_data>:
   d9628:	00000000 00800100 00000000 00000000     ................
   d9638:	00008003 00000000 07000000 000000c0     ................
   d9648:	00000000 c0070000 00000000 00000000     ................
   d9658:	00c00f00 00000000 00000000 0000e01f     ................
   d9668:	00000000 1f000000 000000e0 00000000     ................
   d9678:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   d9690:	0000f07f 00000000 7ff81f00 000000f0     ................
   d96a0:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   d96b0:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   d96c0:	00000000 f9ff0f00 0000c0ff 00000000     ................
   d96d0:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   d96e0:	00000000 fc030000 80ffff73 00000000     ........s.......
   d96f0:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   d9700:	000000ff 00000000 fc1ffe7f 00000000     ................
   d9710:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   d9720:	0000e0ff 00000000 ff191f00 000000c0     ................
   d9730:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   d9740:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   d9750:	00000000 fcffff00 00000000 00000000     ................
   d9760:	00feffff 00000000 ff000000 0000feff     ................
   d9770:	00000000 efff0100 000000fe 00000000     ................
   d9780:	fecfff01 00000000 03000000 00fe07ff     ................
   d9790:	00000000 fc030000 0000fe07 00000000     ................
   d97a0:	03f00300 000000fe 00000000 fe008001     ................
	...
   d97b8:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   d97d0:	0000000c 07000000 00fc0080 00c00300     ................
   d97e0:	80070000 0000fc01 0000c003 01800700     ................
   d97f0:	030000fc 000000c0 e0018007 1e000000     ................
   d9800:	07000000 00e00180 001e0000 9ff7e37f     ................
   d9810:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   d9820:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   d9830:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   d9840:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   d9850:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   d9860:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   d9870:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   d9880:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   d9890:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   d98a0:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   d98b0:	ffffff00 ffffffff c0ffffff ffffffff     ................
   d98c0:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   d98d0:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   d98e0:	5b6bfdff c0fd6adb                       ..k[.j..

000d98e8 <_ZL12splash2_data>:
   d98e8:	00600000 00000000 00000000 00000000     ..`.............
   d98f8:	0000e000 00000000 00000000 01000000     ................
   d9908:	000000e0 00000000 00000000 f0010000     ................
	...
   d9924:	00f00300 00000000 00000000 00000000     ................
   d9934:	0000f007 00000000 00000000 07000000     ................
   d9944:	000000f8 00000000 00000000 f80f0000     ................
   d9954:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   d9964:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   d9974:	00c00300 010000fe ffff00e0 000000f8     ................
   d9984:	f000c003 0f000000 7ffe7f00 030000c0     ................
   d9994:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   d99a4:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   d99b4:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   d99c4:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   d99d4:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   d99e4:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   d99f4:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   d9a04:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   d9a14:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   d9a24:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   d9a34:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   d9a44:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   d9a54:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   d9a64:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   d9a7c:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   d9a8c:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   d9a9c:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   d9aac:	ff7f000f a5feffff 198d9dad 060000e0     ................
   d9abc:	ffff7f00 adb5feff e07eb5ed              ..........~.

000d9ac8 <_ZTV16Adafruit_SSD1306>:
	...
   d9ad0:	000d56ed 000d5705 000d5401 000d6aa5     .V...W...T...j..
   d9ae0:	000d5719 000d4e09 000d4e0b 000d4e3d     .W...N...N..=N..
   d9af0:	000d4e19 000d4e2b 000d4d4d 000d4e09     .N..+N..MM...N..
   d9b00:	000d5035 000d58d3 000d5e67 000d5e19     5P...X..g^...^..
   d9b10:	000d4ecd 000d4f13 000d4fb1 000d4f2f     .N...O...O../O..

000d9b20 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d9b20:	e0c08000 fefcf8f0                       ........

000d9b28 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d9b28:	07030100 7f3f1f0f                       ......?.

000d9b30 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d9b30:	a880d5ae                                ....

000d9b34 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d9b34:	8d4000d3                                ..@.

000d9b38 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d9b38:	c8a10020                                 ...

000d9b3c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d9b3c:	a6a440db                                 .@....

000d9b42 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d9b42:	8f8102da                                ....

000d9b46 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d9b46:	                                         ...

000d9b49 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d9b49:	                                         ...

000d9b4c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d9b4c:	21ff0022 00000000                       "..!....

000d9b54 <_ZTVN5spark13EthernetClassE>:
	...
   d9b5c:	000d65cf 000d65c5 000d65bb 000d65b1     .e...e...e...e..
   d9b6c:	000d65a5 000d6599 000d77ed 000d77f5     .e...e...w...w..
   d9b7c:	000d658d 000d6585 000d657b 000d6571     .e...e..{e..qe..
   d9b8c:	000d7825                                %x..

000d9b90 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9b90:	18100800 38302820                       .... (08

000d9b98 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d9ba0:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d9bb0:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d9bc0 <_ZTV9IPAddress>:
	...
   d9bc8:	000d6dad 000d6d9d 000d6d9f              .m...m...m..

000d9bd4 <_ZTV9USBSerial>:
	...
   d9bdc:	000d6ed1 000d6f39 000d6f0f 000d6aa5     .n..9o...o...j..
   d9bec:	000d6f01 000d6ed3 000d6ee3 000d6f33     .o...n...n..3o..
   d9bfc:	000d6ef3 000d6ecd                       .n...n..

000d9c04 <_ZTV11USARTSerial>:
	...
   d9c0c:	000d6fd5 000d7041 000d7019 000d6aa5     .o..Ap...p...j..
   d9c1c:	000d6fe9 000d7005 000d6ff7 000d7013     .o...p...o...p..
   d9c2c:	000d6fd7 000d6fdb                       .o...o..

000d9c34 <_ZTV7TwoWire>:
	...
   d9c3c:	000d70d1 000d711b 000d70f3 000d70d3     .p...q...p...p..
   d9c4c:	000d70fb 000d7103 000d710b 000d7113     .p...q...q...q..
   d9c5c:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d9c6c:	203d2072 00006425                       r = %d..

000d9c74 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9c7c:	000d71ff 000d7221 000d763b 000d722f     .q..!r..;v../r..
   d9c8c:	000d7201                                .r..

000d9c90 <_ZTV9TCPClient>:
	...
   d9c98:	000d72ad 000d72e1 000d717d 000d7197     .r...r..}q...q..
   d9ca8:	000d74d1 000d7343 000d7315 000d71c1     .t..Cs...s...q..
   d9cb8:	000d73db 000d7641 000d7377 000d7585     .s..Av..ws...u..
   d9cc8:	000d71c3 000d71f5 000d71a9 000d7233     .q...q...q..3r..
   d9cd8:	000d72f5                                .r..

000d9cdc <_ZTVN5spark9WiFiClassE>:
	...
   d9ce4:	000d778f 000d7785 000d777b 000d773d     .w...w..{w..=w..
   d9cf4:	000d6c19 000d776f 000d77ed 000d77f5     .l..ow...w...w..
   d9d04:	000d7763 000d775b 000d7751 000d7747     cw..[w..Qw..Gw..
   d9d14:	000d7825                                %x..

000d9d18 <_ZTVN5spark12NetworkClassE>:
	...
   d9d20:	000d77ad 000d77b7 000d77c1 000d77cb     .w...w...w...w..
   d9d30:	000d77d5 000d77e1 000d77ed 000d77f5     .w...w...w...w..
   d9d40:	000d77fd 000d7809 000d7811 000d781b     .w...x...x...x..
   d9d50:	000d7825                                %x..

000d9d54 <_ZSt7nothrow>:
	...

000d9d55 <_ZTSSt19_Sp_make_shared_tag>:
   d9d55:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d9d65:	5f646572 00676174                        red_tag....

000d9d70 <_ZTISt19_Sp_make_shared_tag>:
   d9d70:	000d9db0 000d9d55                       ....U...

000d9d78 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d9d78:	000d9e10 000d9d84 000d9e34              ........4...

000d9d84 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d9d84:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d9d94:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d9da4:	00000045                                E...

000d9da8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d9da8:	00000000 000d9d78 000d7b69 000d7b7d     ....x...i{..}{..
   d9db8:	000d7d11 000d7d11 000d7be7 000d7b29     .}...}...{..){..
   d9dc8:	000d7bcf 000d7b91 000d7b5d              .{...{..]{..

000d9dd4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d9dd4:	000d9e10 000d9de0 000d9d78              ........x...

000d9de0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d9de0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d9df0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d9e00:	456f666e 00000000                       nfoE....

000d9e08 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d9e08:	00000000 000d9dd4 000d7c11 000d7c25     .........|..%|..
   d9e18:	000d7d11 000d7d11 000d7be7 000d7b29     .}...}...{..){..
   d9e28:	000d7ce5 000d7c71 000d7c39              .|..q|..9|..

000d9e34 <_ZTISt9type_info>:
   d9e34:	000d9db0 000d9e3c                       ....<...

000d9e3c <_ZTSSt9type_info>:
   d9e3c:	74397453 5f657079 6f666e69               St9type_info.

000d9e49 <_ctype_>:
   d9e49:	20202000 20202020 28282020 20282828     .         ((((( 
   d9e59:	20202020 20202020 20202020 20202020                     
   d9e69:	10108820 10101010 10101010 10101010      ...............
   d9e79:	04040410 04040404 10040404 10101010     ................
   d9e89:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9e99:	01010101 01010101 01010101 10101010     ................
   d9ea9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9eb9:	02020202 02020202 02020202 10101010     ................
   d9ec9:	00000020 00000000 00000000 00000000      ...............
	...

000d9f4a <link_const_variable_data_end>:
	...

000d9f4c <link_constructors_location>:
   d9f4c:	000d4c29 	.word	0x000d4c29
   d9f50:	000d65d9 	.word	0x000d65d9
   d9f54:	000d6769 	.word	0x000d6769
   d9f58:	000d6a7d 	.word	0x000d6a7d
   d9f5c:	000d6c25 	.word	0x000d6c25
   d9f60:	000d6c35 	.word	0x000d6c35
   d9f64:	000d6c5d 	.word	0x000d6c5d
   d9f68:	000d7799 	.word	0x000d7799
   d9f6c:	000d7905 	.word	0x000d7905
